load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_test")
load("@npm//openapi-examples-validator:index.bzl", "openapi_examples_validator_test")
load("@npm//openapi-to-postmanv2:index.bzl", "openapi2postmanv2")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("//rules:redocly_cli.bzl", "bundle", "validate")

exports_files(
    ["tsconfig.json"],
    visibility = ["//visibility:public"],
)

BUNDLE_NAME = "woosmap-openapi3"

# has .yml and .json outputs
bundle(
    name = BUNDLE_NAME,
    data = ["//specification:openapi3"],
    entry = "specification/index.yml",
)

validate(
    name = "validate_yml_test",
    data = "//:{}.yml".format(BUNDLE_NAME),
)

validate(
    name = "validate_json_test",
    data = "//:{}.json".format(BUNDLE_NAME),
)

pkg_tar(
    name = "dist",
    srcs = [
        "//:{}.yml".format(BUNDLE_NAME),
        "//:{}.json".format(BUNDLE_NAME),
        "//:merged-woosmap-openapi3.json",
        "//:woosmap-postman.json",
    ],
    strip_prefix = ".",
    deps = [
        "//generator/documentation:parameters.tar",
        "//generator/documentation:schemas.tar",
        "//generator/requests:snippets.tar",
    ],
)

filegroup(
    name = "outputs",
    srcs = [
        ":dist",
        ":parameters",
    ],
)

# test diff
filegroup(
    name = "dist_files",
    srcs = glob(["dist/**/*"]),
)

nodejs_test(
    name = "dist-is-updated",
    data = [
        ":dist",
        ":dist_files",
        "//rules:dist-is-updated",
    ],
    entry_point = "//rules:dist-is-updated.ts",
    templated_args = [
        "--archive",
        "$(rootpath :dist)",
        "--dist",
        "$(locations :dist_files)",
    ],
)

openapi_examples_validator_test(
    name = "validate_examples",
    data = ["//:{}.json".format(BUNDLE_NAME)],
    templated_args = [
        "--no-additional-properties",
        "$(rootpath //:{}.json)".format(BUNDLE_NAME),
    ],
)

nodejs_test(
    name = "schema-in-index",
    data = [
        ":dist",
        "//rules:schema-in-index",
        "//specification:openapi3",
    ],
    entry_point = "//rules:schema-in-index.ts",
    templated_args = [
        "--archive",
        "$(rootpath :dist)",
    ],
)

nodejs_test(
    name = "schema-title",
    data = [
        "//:woosmap-openapi3.json",
        "//rules:schema-title",
    ],
    entry_point = "//rules:schema-title.ts",
    templated_args = [
        "--spec",
        "$(rootpath //:{}.json)".format(BUNDLE_NAME),
    ],
)

openapi2postmanv2(
    name = "postman",
    outs = ["woosmap-postman.json"],
    args = [
        "--spec",
        "$(location //:merged-woosmap-openapi3.json)",
        "--pretty",
        "--options-config",
        "$(location //:postman-config.json)",
        "--output $@",
    ],
    data = [
        "//:merged-woosmap-openapi3.json",
        "//:postman-config.json",
    ],
    visibility = ["//visibility:public"],
)

genrule(
    name = "parameters",
    srcs = [
        "//specification:openapi3",
        "@npm//glob",
        "@npm//yargs",
    ],
    outs = ["parameters.yml"],
    cmd = "$(location //rules:parameters) --output $@ $(locations //specification:openapi3)",
    tools = ["//rules:parameters"],
)

genrule(
    name = "smusher",
    srcs = [
        "//:openapi-smusher.sh",
        "//:woosmap-openapi3.json",
        "//:smusher-config.json",
    ],
    outs = ["merged-woosmap-openapi3.json"],
    cmd = "$(location openapi-smusher.sh) --spec $(location //:woosmap-openapi3.json) --output $@",
    visibility = ["//visibility:public"],
)

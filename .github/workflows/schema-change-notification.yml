name: Notify on OpenAPI Schema Changes

on:
  pull_request:
    types: [opened, synchronize]
    branches: [master]

jobs:
  detect-and-notify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find changed schema files
        id: schema_changes
        run: |
          git fetch origin master
          CHANGED=$(git diff --name-only origin/master...HEAD specification/schemas/)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR if schemas changed
        if: steps.schema_changes.outputs.changed_files != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: pr.number,
              body: "ðŸ”” OpenAPI schema has changed. Please bring Mobile team up to speed on the same."
            });

      - name: Create issue in Woosmap/woosmap if schemas changed
        if: steps.schema_changes.outputs.changed_files != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;

            // 1) Fetch any issues the PR closes/references via GraphQL
            const result = await github.graphql(`
              query($owner:String!, $repo:String!, $number:Int!) {
                repository(owner:$owner, name:$repo) {
                  pullRequest(number:$number) {
                    closingIssuesReferences(first: 1) {
                      nodes { number }
                    }
                  }
                }
              }`,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                number: pr.number
              }
            );

            // 2) Determine target: linked issue or PR
            const refs = result.repository.pullRequest.closingIssuesReferences.nodes;
            const target = refs.length ? refs[0].number : pr.number;

            // 3) Post the comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: target,
              body: "ðŸ”” OpenAPI schema has changed. Please bring Mobile team up to speed on the same."
            });
          
                
      - name: Send Slack notification if schemas changed
        if: steps.schema_changes.outputs.changed_files != ''
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "channel": "#mobile",
              "text": "ðŸš¨ OpenAPI schema has changed. Please refer to the PR <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}> for more insights."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOOSMAP_SLACK_WEBHOOK }}
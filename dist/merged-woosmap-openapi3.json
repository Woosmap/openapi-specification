{
  "components": {
    "parameters": {
      "address_address": {
        "description": "The address of which to find the coordinates for. A partial address is less likely to return the proper coordinates than the complete address.\n",
        "example": "224%20Rue%20de%20Rivoli%2C%20Paris",
        "in": "query",
        "name": "address",
        "schema": {
          "type": "string"
        }
      },
      "address_cc_format": {
        "description": "To specify the format for the short [country code](https://en.wikipedia.org/wiki/ISO_3166-1) expected to be returned in the address_components field (default is `alpha3`).\n",
        "example": "alpha2",
        "in": "query",
        "name": "cc_format",
        "schema": {
          "enum": [
            "alpha2",
            "alpha3"
          ],
          "type": "string"
        }
      },
      "address_components": {
        "description": "To restrict your results to specific areas. Currently, you can use components to filter over countries. Countries must be passed as three characters string (ISO 3166-1 Alpha 3). Components should be passed as an array of different options which are separated by a `|`.\n",
        "example": "country:CAN|country:BEL",
        "in": "query",
        "name": "components",
        "schema": {
          "type": "string"
        }
      },
      "address_fields": {
        "description": "Used to limit the returning fields (by default, all fields are return). Available fields are (geometry) (fields should be separated by a `,`). By using this parameter you will limit content of responses to the geometry part. No address component will be returned.\n",
        "example": "geometry",
        "in": "query",
        "name": "fields",
        "schema": {
          "enum": [
            "geometry"
          ],
          "type": "string"
        }
      },
      "address_input": {
        "description": "The text string on which to search, for example: \"london\" or \"123 Cross Road\". The Woosmap Address API will return predictions matches based on this string and order the results based on their perceived relevance.\n",
        "example": "London",
        "in": "query",
        "name": "input",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "address_language": {
        "description": "The language code, using ISO 639-1 country codes, indicating in which language the results should be returned, if possible. If language is not supplied, the Localities service will use the default language of each country.\n",
        "example": "en",
        "in": "query",
        "name": "language",
        "schema": {
          "type": "string"
        }
      },
      "address_latlng": {
        "description": "Geographic coordinates. Should be pass in `lat`,`lng` format.\n",
        "example": "5.2,-2.3",
        "in": "query",
        "name": "latlng",
        "schema": {
          "type": "string"
        }
      },
      "address_limit": {
        "description": "Maximum number of results to be returned (value from 1 to 100, default values for geocode request [20] and for reverse geocode request [1])\n",
        "example": 10,
        "in": "query",
        "name": "limit",
        "schema": {
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "address_location": {
        "description": "Bias for the results. Should be pass in `lat`,`lng` format.\n",
        "example": "5.2,-2.3",
        "in": "query",
        "name": "location",
        "schema": {
          "type": "string"
        }
      },
      "address_public_id": {
        "description": "A textual identifier that uniquely identifies a locality, returned from an [Address Autocomplete](https://developers.woosmap.com/products/address-api/autocomplete/).\n",
        "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMDA1MTI2",
        "in": "query",
        "name": "public_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "distance_alternatives": {
        "description": "Specifies if alternative routes should be returned. default is `false`. Depending on the calculated route, alternatives may not be provided.\n`alternatives` and `waypoints` can not be used at the same time.\n",
        "example": true,
        "in": "query",
        "name": "alternatives",
        "schema": {
          "type": "boolean"
        }
      },
      "distance_arrival_time": {
        "description": "By using this parameter, Distance will calculate the duration with traffic Specifies the arrival date/time as a timestamp to base the calculation on (e.g. `1600799173` for the date:`22/09/2020 20:26:13`).\nUse either `arrival_time` or `departure_time`, not both.\n",
        "example": "1600799173",
        "in": "query",
        "name": "arrival_time",
        "schema": {
          "type": "string"
        }
      },
      "distance_avoid": {
        "description": "The list of features that you want to avoid. Valid values are `tolls`, `highways`, `ferries` or polygons coordinates whose vertex latlng are separated by a semicolon. To add multiple polygons, separate them with the `|` character.\n",
        "example": "tolls|highways|43.3,3.4;42.1,3.5;41.4,3.6",
        "in": "query",
        "name": "avoid",
        "schema": {
          "type": "string"
        }
      },
      "distance_departure_time": {
        "description": "By using this parameter, Distance will calculate the duration with traffic Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\nUse either `arrival_time` or `departure_time`, not both.\n",
        "example": "1600799173",
        "in": "query",
        "name": "departure_time",
        "schema": {
          "type": "string"
        }
      },
      "distance_destination": {
        "description": "The ending point for the route. It should be supplied in the form of latitude/longitude coordinates. Ensure that no space exists between the latitude and longitude values.\n",
        "example": "48.768,2.338",
        "in": "query",
        "name": "destination",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "distance_destinations": {
        "description": "One or more locations to use as the finishing point for calculating travel distance. The options for the destinations parameter are the same as for the origins parameter, described above. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n",
        "example": "48.709,2.403|48.768,2.338",
        "in": "query",
        "name": "destinations",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "distance_details": {
        "description": "Specifies if maneuver instructions should be returned (roadbook). Valid values are `none` and `full` (default is `none`)\n",
        "example": "full",
        "in": "query",
        "name": "details",
        "schema": {
          "enum": [
            "full",
            "none"
          ],
          "type": "string"
        }
      },
      "distance_elements": {
        "description": "Specifies element values that will be part of the API response (distance and/or duration). if not specified default is `distance`\n",
        "example": "duration_distance",
        "in": "query",
        "name": "elements",
        "schema": {
          "enum": [
            "distance",
            "duration",
            "duration_distance"
          ],
          "type": "string"
        }
      },
      "distance_language": {
        "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or “en”.\n",
        "example": "en",
        "in": "query",
        "name": "language",
        "schema": {
          "type": "string"
        }
      },
      "distance_method": {
        "description": "Specifies the method to compute the route between the start point and the end point:\n- `time`: fastest route (default) - `distance`: shortest route\n",
        "example": "distance",
        "in": "query",
        "name": "method",
        "schema": {
          "enum": [
            "time",
            "distance"
          ],
          "type": "string"
        }
      },
      "distance_mode": {
        "description": "Specifies the mode of transport to use when calculating distance\n",
        "example": "driving",
        "in": "query",
        "name": "mode",
        "schema": {
          "enum": [
            "driving",
            "cycling",
            "walking"
          ],
          "type": "string"
        }
      },
      "distance_origin": {
        "description": "The starting point. It should be supplied in the form of latitude/longitude coordinates. Ensure that no space exists between the latitude and longitude values.\n",
        "example": "48.709,2.403",
        "in": "query",
        "name": "origin",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "distance_origins": {
        "description": "The starting point for calculating travel distance. You can supply one or more locations separated by the pipe character (|), in the form of latitude/longitude coordinates. They are used unchanged to calculate distance. Ensure that no space exists between the latitude and longitude values. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n",
        "example": "48.709,2.403",
        "in": "query",
        "name": "origins",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "distance_units": {
        "description": "Specifies the unit system parameter to use when expressing distance as text. Two different units supported:\n  * `metric` (default) returns distances in kilometers and meters\n  * `imperial` returns distances in miles and feet\n",
        "example": "metric",
        "in": "query",
        "name": "units",
        "schema": {
          "enum": [
            "imperial",
            "metric"
          ],
          "type": "string"
        }
      },
      "distance_value": {
        "description": "The value to use for isochrone contour. You can specify time in minutes or distance in kilometers (cf. method parameter). The maximum value that can be specified is 120 (120 minutes : 2 hours or 120 km).\n",
        "example": 120,
        "in": "query",
        "name": "value",
        "required": true,
        "schema": {
          "maximum": 120,
          "minimum": 1,
          "type": "integer"
        }
      },
      "distance_waypoints": {
        "description": "A list of points by which the route should pass (route response is divided into legs, one leg corresponding to a route between two waypoints). Waypoints should be separated by | character.\nOptionally, you may pass `optimize:true` as the first argument within the waypoints parameter. This way the provided route is optimized by rearranging the waypoints in a more efficient order based on distance or time according to the method parameter. The route start point and end point order is not changed, their position is considered fixed.\n`alternatives` and `waypoints` can not be used at the same time.\n",
        "example": "optimize:true|48.850077,3.311124|48.850077,3.411124",
        "in": "query",
        "name": "waypoints",
        "schema": {
          "type": "string"
        }
      },
      "geolocation_ip_address": {
        "description": "The ip_address you want to geolocate. For **server call with private_key** only. Without this parameter, the API will geolocate the IP Address attached to the raw TCP request.\n",
        "example": "75.134.29.90",
        "in": "query",
        "name": "ip_address",
        "schema": {
          "type": "string"
        }
      },
      "geolocation_limit": {
        "description": "To limit number of assets retrieved from an IP location.\n",
        "example": 10,
        "in": "query",
        "name": "limit",
        "schema": {
          "maximum": 300,
          "minimum": 1,
          "type": "integer"
        }
      },
      "localities_address": {
        "description": "The input string to geocode. Can represent an address, a street, a locality or a postal code. The `address` parameter must be URL encoded.\n",
        "example": "224%20Rue%20de%20Rivoli%2C%20Paris",
        "in": "query",
        "name": "address",
        "schema": {
          "type": "string"
        }
      },
      "localities_addresses_per_page": {
        "deprecated": true,
        "description": "In a few cases, a postal code details may contain addresses (UK postal codes). The address list is paginated. In that case, you can navigate in the address list thanks to the `addresses_per_page` and `page` parameters. Notice: as all the addresses are now automatically returned in the response, the `addresses_per_page` parameter is deprecated and has been turned off on December 31, 2021.\n",
        "example": 10,
        "in": "query",
        "name": "addresses_per_page",
        "schema": {
          "type": "integer"
        }
      },
      "localities_cc_format": {
        "description": "To specify the format for the short [country code](https://en.wikipedia.org/wiki/ISO_3166-1) expected to be returned in the address_components field. Default is the format used to specify `components` or `alpha2` if no components are specified.\n",
        "example": "alpha2",
        "in": "query",
        "name": "cc_format",
        "schema": {
          "enum": [
            "alpha2",
            "alpha3"
          ],
          "type": "string"
        }
      },
      "localities_components": {
        "description": "A grouping of places to which you would like to restrict your results. Components can and should be used when applicable to filter over countries and retrieve more accurate results. Countries must be passed as an ISO 3166-1 Alpha-2 or Alpha-3 compatible country code. For example: `components=country:fr` or `components=country:fra` would restrict your results to places within France and `components=country:fr-fr` returns locations only in Metropolitan France. Multiple countries must be passed as multiple `country:XX` filters, with the pipe character (`|`) as a separator. For example: `components=country:gb|country:fr|country:be|country:sp|country:it` would restrict your results to city names or postal codes within the United Kingdom, France, Belgium, Spain and Italy.\n",
        "example": "country:fr|country:es",
        "in": "query",
        "name": "components",
        "schema": {
          "type": "string"
        }
      },
      "localities_custom_description": {
        "description": "This parameter allows to choose the description format for all or some of the suggestion types selected. The custom formats are described as follows (available fields depend on the returned type): `custom_description=type_A:\"{field_1}, {field_2}, [...]\"|type_B:\"{field_1}, {field_2}, [...]\"`\n",
        "example": "locality:\"{name} - {administrative_area_level_0}\"|postal_code:\"{name} ({administrative_area_level_1})\"",
        "in": "query",
        "name": "custom_description",
        "schema": {
          "type": "string"
        }
      },
      "localities_data": {
        "description": "Two values for this parameter: `standard` or `advanced`. By default, if the parameter is not defined, value is set as `standard`. The `advanced` value opens suggestions to worldwide postal codes in addition to postal codes for Western Europe. ***A dedicated option subject to specific billing on your license is needed to use this parameter. Please contact us if you are interested in using this parameter and you do not have subscribed the proper option yet.***\n",
        "example": "advanced",
        "in": "query",
        "name": "data",
        "schema": {
          "enum": [
            "standard",
            "advanced"
          ],
          "type": "string"
        }
      },
      "localities_extended": {
        "description": "If set, this parameter allows a refined search over locality names that bears the same postal code. By triggering this parameter, integrators will benefit from a search spectrum on the `locality` type that ***includes postal codes***. To avoid confusion, it is recommended not to activate this parameter along with the `postal_code` type which could lead to duplicate locations. Also, the default description returned by the API changes to `name (postal code), admin_1, admin_0`. It is only available for France, Italy, Spain and Belgium.\n",
        "example": "postal_code",
        "in": "query",
        "name": "extended",
        "schema": {
          "enum": [
            "postal_code"
          ],
          "type": "string"
        }
      },
      "localities_fields": {
        "description": "Used to limit the returning fields when type=address (by default, and for other types localities, all fields are return). Only one field is available: `geometry`. By using this parameter you will limit content of responses to the geometry part. No address component will be returned.\n",
        "example": "geometry",
        "in": "query",
        "name": "fields",
        "schema": {
          "enum": [
            "geometry"
          ],
          "type": "string"
        }
      },
      "localities_input": {
        "description": "The text string on which to search, for example: \"london\" or \"123 Cross Road\". The Woosmap Localities API will return predictions matches based on this string and order the results based on their perceived relevance.\n",
        "example": "London",
        "in": "query",
        "name": "input",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "localities_language": {
        "description": "The language code, using ISO 639-2 Alpha-2 country codes, indicating in which language the results should be returned, if possible. If language is not supplied, first `Accept-Language` of the browser will be used.  If neither the provided `language` or the `Accept-Language` are known, the Localities service uses the international default language (English).  No `language` is necessary for a postal_code request. According to requested language, only parts of the address components might be translated.\n",
        "example": "en",
        "in": "query",
        "name": "language",
        "schema": {
          "type": "string"
        }
      },
      "localities_latlng": {
        "description": "The latlng parameter is used for reverse geocoding, it’s required if the `address` parameter is missing.\n",
        "example": "5.2,-2.3",
        "in": "query",
        "name": "latlng",
        "schema": {
          "type": "string"
        }
      },
      "localities_list_sub_buildings": {
        "description": "When latlng parameter is used for reverse geocoding, setting `list_sub_building=true` allows to retrieve all addresses at the same location for a common street number or building. Results may contain an additional key \"sub_buildings\" with \"public_id\" and \"description\" values for every addresses at the same location sharing the same address components.\n",
        "example": true,
        "in": "query",
        "name": "list_sub_buildings",
        "schema": {
          "type": "boolean"
        }
      },
      "localities_location": {
        "description": "This parameter is used to add a bias to the autocomplete feature. The location defines the point around which to retrieve results in priority. It must be specified in the `latitude,longitude` string format.\n",
        "example": "5.2,-2.3",
        "in": "query",
        "name": "location",
        "schema": {
          "type": "string"
        }
      },
      "localities_page": {
        "deprecated": true,
        "description": "In a few cases, a postal code details may contain addresses (UK postal codes). The address list is paginated. In that case, you can navigate in the address list thanks to the `addresses_per_page` and `page` parameters. Notice: as all the addresses are now automatically returned in the response, the `page` parameter is deprecated and has been turned off on December 31, 2021.\n",
        "example": 1,
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer"
        }
      },
      "localities_public_id": {
        "description": "A textual identifier that uniquely identifies a locality, returned from a [Localities Autocomplete](https://developers.woosmap.com/products/localities/autocomplete/).\n",
        "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo=",
        "in": "query",
        "name": "public_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "localities_radius": {
        "description": "This parameter may be used in addition to the `location` parameter to define the distance in meters within which the API will return results in priority. Results outside of the defined area may still be displayed. Default radius if this parameter is not set is 100 000.\n",
        "example": 200000,
        "in": "query",
        "name": "radius",
        "schema": {
          "type": "integer"
        }
      },
      "localities_types": {
        "description": "The types of suggestion to return.\n\n  * `locality`: includes locality names (from city to village) and suburbs\n  * `postal_code`: publicly-used postal codes around the world\n  * `address`: addresses\n  * `admin_level`: most commonly used administrative areas\n  * `country`: countries as whole point of interest\n  * `airport`: includes all medium sized to international sized airports\n  * `train_station`: includes all train stations\n  * `metro_station`: includes all metro stations\n  * `shopping`: includes shopping malls (or \"shopping centers\") - *may include private retail brands*\n  * `museum`: includes museums\n  * `tourist_attraction`: includes tourist attractions like the Eiffel tower\n  * `amusement_park`: includes amusement parks like Disneyland Paris\n  * `art_gallery`: includes art galleries\n  * `zoo`: includes zoos\n\nNot specifying any type will only query `locality` and `postal_code`. Multiple types can be passed using the pipe character (`|`) as a separator. For example: `types=locality|airport|admin_level`.\n",
        "example": "postal_code",
        "in": "query",
        "name": "types",
        "schema": {
          "enum": [
            "locality",
            "postal_code",
            "address",
            "admin_level",
            "country",
            "airport",
            "train_station",
            "metro_station",
            "shopping",
            "museum",
            "tourist_attraction",
            "amusement_park",
            "art_gallery",
            "zoo"
          ],
          "type": "string"
        }
      },
      "merchants_dirty_name": {
        "description": "The dirty name is the unique merchant identifier which is provided on transactions by a payment provider.\n",
        "example": "APPLE.COM%2FBILL",
        "in": "query",
        "name": "dirty_name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "search_encoded_polyline": {
        "description": "Find assets nearby an [encoded polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) and inside a defined radius.\n",
        "example": "_p~iF~ps|U_ulLnnqC_mqNvxq`@",
        "in": "query",
        "name": "encoded_polyline",
        "schema": {
          "type": "string"
        }
      },
      "search_language": {
        "description": "The language code, using ISO 639-2 Alpha-2 country codes, indicating in which language the `localized` name  property should be searched , if present, or else the default `name` property.\n",
        "example": "en",
        "in": "query",
        "name": "language",
        "schema": {
          "type": "string"
        }
      },
      "search_lat": {
        "description": "Latitude bias for the results. Should be pass with `lng`.\n",
        "example": 5.2,
        "in": "query",
        "name": "lat",
        "schema": {
          "type": "number"
        }
      },
      "search_limit": {
        "description": "If your request returns a high number of assets you should use the `limit` parameters to return only the firsts matching elements (Default is 5, max is 50).\n",
        "example": 15,
        "in": "query",
        "name": "limit",
        "schema": {
          "maximum": 50,
          "minimum": 1,
          "type": "integer"
        }
      },
      "search_lng": {
        "description": "Longitude bias for the results. Should be pass with `lat`.\n",
        "example": 3.5,
        "in": "query",
        "name": "lng",
        "schema": {
          "type": "number"
        }
      },
      "search_page": {
        "description": "Page number when accessing paginated assets feature collection\n",
        "example": 2,
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer"
        }
      },
      "search_query": {
        "description": "Search query combining one or more search clauses. Each search clause is made up of three parts structured as `field` `:` `operator` `value`. , e.g. `name:=\"My cool store\"`\n### Vocabulary\n\n  - **Field**: attribute of the Store that is searched, e.g. the attribute `name` of the store.\n\n  - **Operator**: test that is performed on the data to provide a match, e.g. `=`.\n  Each field has a default operator. If none operator follow the `:`, the default one is used.\n\n  - **Value**: the content of the attribute that is tested, e.g. the name of the store `\"My cool store\"`.\n\nCombine clauses with the conjunctions `AND` or `OR`, and negate the query with `NOT`.\n### Fields\n\n  - `type`: An element is contained within `type` collection. e.g. `type:\"myType\"`\n\n  - `tag`: An element is contained within `tag` collection. e.g. `tag:\"myTag\"`\n\n  - `city`: text matching: the value match the `city` field. e.g. `city:=\"Paris\"`\n\n  - `country`: text matching: the value match the `countryCode` field. e.g. `country:=\"FR\"`\n\n  - `name`: text matching: the value match the `name` field. e.g. `name:=\"myName\"`\n\n  - `idstore`: text matching: the value match the `idstore` field.  e.g. `idstore:=\"myIdStore\"`\n\n  - `user`: concerns all fields inside `user_properties`. text matching or numerical comparison.  e.g. `user.myAttribute:=\"myValue\"`\n\n  - `localized`: used for [localizedNames](https://developers.woosmap.com/products/data-api/data-structure/#localizednames) to search in native language. text matching in collection: the value match one of the the `localizedNames`. e.g. `localized:=\"centro\"`\n\n\u003e **userProperties** field has no restriction regarding the data you can put in it (Arrays, Object, Boolean, String, Numeric...) but you can only query for **text matching or numerical comparison**.\n### Operators\n\n  - `:` : Default and mandatory operator. For `type` and `tag` fields, define that an element is contained within a collection.\n\n  - `=` : The content of a string or a number is equal to the other.\n\n  - `\u003e` : A number is greater than another.\n\n  - `\u003c` : A number is smaller than another.\n\n  - `\u003e=` : A number is greater than or equal to another.\n\n  - `\u003c=` : A number is smaller than or equal to another.\n\n  - `AND` : Return assets that match both clauses.\n\n  - `OR` : Return assets that match either clauses.\n\n  - `NOT` : Negates a search clause.\n\nFor compound clauses, you can use parentheses to group clauses together. For example: ```(type:\"type1\" OR type:\"type2\") AND tag:\"hockey\"```\nYou can use `NOT` operator to negates a search clause. For example: ```not type:\"type1\"```\n",
        "example": "name:'My cool store'|type:'click_and_collect'",
        "in": "query",
        "name": "query",
        "schema": {
          "type": "string"
        }
      },
      "search_radius": {
        "description": "Unit in meters. Used to combine with lat/lng or encoded polyline. To bias the results within a given circular area. 3000 means to search for Assets that are at the most far from 3kms to search area (latlng or polyline).\n",
        "example": 3000,
        "in": "query",
        "name": "radius",
        "schema": {
          "type": "number"
        }
      },
      "search_stores_by_page": {
        "description": "If your request returns a high number of assets, the result will be paginated. If so, you can request assets by page using `page` and `stores_by_page` parameters (Default is 100, max is 300).\n",
        "example": 150,
        "in": "query",
        "name": "stores_by_page",
        "schema": {
          "maximum": 300,
          "minimum": 1,
          "type": "integer"
        }
      },
      "search_zone": {
        "description": "returns the stores that are linked to a zone intersecting the provided `lat`,`lng` query parameters.\n",
        "example": true,
        "in": "query",
        "name": "zone",
        "schema": {
          "type": "boolean"
        }
      },
      "traffic_arrival_time": {
        "description": "Specifies the arrival date/time as a timestamp to base the calculation on (e.g. `1600799173` for the date:`22/09/2020 20:26:13`).\nUse either `arrival_time` or `departure_time`, not both.\n",
        "example": "1600799173",
        "in": "query",
        "name": "arrival_time",
        "schema": {
          "type": "string"
        }
      },
      "traffic_avoid": {
        "description": "The list of features that you want to avoid. Valid values are `tolls`.\n",
        "example": "tolls",
        "in": "query",
        "name": "avoid",
        "schema": {
          "enum": [
            "tolls"
          ],
          "type": "string"
        }
      },
      "traffic_departure_time": {
        "description": "Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\nUse either `arrival_time` or `departure_time`, not both.\n",
        "example": "1600799173",
        "in": "query",
        "name": "departure_time",
        "schema": {
          "type": "string"
        }
      },
      "traffic_routing": {
        "description": "Specifies what to base the cost calculation on. If not specified default is `fastest`.\n  * `fastest` will include traffic and optimise the route based on the smallest travel time.\n  * `shortest` will optimise based on travel distance.\n",
        "example": "fastest",
        "in": "query",
        "name": "routing",
        "schema": {
          "enum": [
            "fastest",
            "shortest"
          ],
          "type": "string"
        }
      },
      "traffic_waypoints": {
        "description": "A list of points by which the route should pass (traffic route response is divided into legs, one leg corresponding to a route between two waypoints). Waypoints should be separated by `|` character.\n  \n`alternatives` and `waypoints` can not be used at the same time.\n",
        "example": "48.850077,3.311124|48.850077,3.411124",
        "in": "query",
        "name": "waypoints",
        "schema": {
          "type": "string"
        }
      },
      "zones_limit": {
        "description": "To limit number of zones retrieved (max 50).\n",
        "example": 10,
        "in": "query",
        "name": "limit",
        "schema": {
          "maximum": 50,
          "minimum": 1,
          "type": "integer"
        }
      },
      "zones_offset": {
        "description": "To retrieve zones starting from an offset value.\n",
        "example": 20,
        "in": "query",
        "name": "offset",
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "schemas": {
      "AddressAutocompleteCollectionResponse": {
        "description": "Address Collection Response containing Localities",
        "example": {
          "predictions": [
            {
              "description": "London, England, United Kingdom",
              "matched_substring": {
                "description": [
                  {
                    "length": 4,
                    "offset": 0
                  }
                ]
              },
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
              "type": "locality"
            },
            {
              "description": "Londonderry, Northern Ireland, United Kingdom",
              "matched_substring": {
                "description": [
                  {
                    "length": 4,
                    "offset": 0
                  }
                ]
              },
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDE5Nzgz",
              "type": "locality"
            },
            {
              "description": "County Londonderry, Northern Ireland, United Kingdom",
              "matched_substring": {
                "description": [
                  {
                    "length": 4,
                    "offset": 7
                  }
                ]
              },
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDExMTIz",
              "type": "admin_level"
            }
          ],
          "status": "OK"
        },
        "properties": {
          "predictions": {
            "items": {
              "$ref": "#/components/schemas/AddressAutocompleteResponse"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "title": "AddressAutocompleteCollectionResponse",
        "type": "object"
      },
      "AddressAutocompleteMatchedFields": {
        "description": "Contains a set of substrings for description. Each substring is identified by an `offset` and a `length`.`",
        "properties": {
          "description": {
            "description": "match substrings for address `description`",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            },
            "type": "array"
          }
        },
        "title": "AddressAutocompleteMatchedFields",
        "type": "object"
      },
      "AddressAutocompleteResponse": {
        "description": "Attributes describing an Address.",
        "example": {
          "description": "London, England, United Kingdom",
          "matched_substring": {
            "description": [
              {
                "length": 4,
                "offset": 0
              }
            ]
          },
          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
          "type": "locality"
        },
        "properties": {
          "description": {
            "description": "Address description to be used as suggestion in drop down list if needed.",
            "example": "London, England, United Kingdom",
            "type": "string"
          },
          "matched_substring": {
            "$ref": "#/components/schemas/AddressAutocompleteMatchedFields"
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID if you need to give us feedbacks on results. This ID is also required to perform Address Details request.",
            "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          },
          "type": {
            "$ref": "#/components/schemas/AddressTypes"
          }
        },
        "title": "AddressAutocompleteResponse",
        "type": "object"
      },
      "AddressComponents": {
        "description": "An array containing Address Components with additional information",
        "example": [
          {
            "long_name": "United Kingdom",
            "short_name": "GBR",
            "types": [
              "country"
            ]
          },
          {
            "long_name": "London",
            "short_name": "London",
            "types": [
              "locality"
            ]
          }
        ],
        "items": {
          "description": "The address component object",
          "example": {
            "long_name": "United Kingdom",
            "short_name": "GBR",
            "types": [
              "country"
            ]
          },
          "properties": {
            "long_name": {
              "description": "The full text description or name of the address component, or a list of names (ie. list of postal codes).",
              "example": "United Kingdom",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ]
            },
            "short_name": {
              "description": "An abbreviated textual name for the address component, if available. For example, an address component for the state of United Kingdom may have a `long_name` of `United Kingdom` and a `short_name` of `UK` using the 2-letter postal abbreviation.",
              "example": "UK",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ]
            },
            "types": {
              "description": "An array indicating the type of the address component.",
              "example": [
                "country",
                "administrative_area_level_0"
              ],
              "items": {
                "description": "address component type",
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "title": "AddressComponents",
        "type": "array"
      },
      "AddressDetailsResponse": {
        "description": "Address Details Response",
        "example": {
          "result": {
            "address_components": [
              {
                "long_name": "United Kingdom",
                "short_name": "GBR",
                "types": [
                  "country"
                ]
              },
              {
                "long_name": "England",
                "short_name": "England",
                "types": [
                  "state"
                ]
              },
              {
                "long_name": "London",
                "short_name": "LDN",
                "types": [
                  "county"
                ]
              },
              {
                "long_name": "London",
                "short_name": "London",
                "types": [
                  "locality"
                ]
              },
              {
                "long_name": "SW1A 2",
                "short_name": "SW1A 2",
                "types": [
                  "postal_code"
                ]
              }
            ],
            "formatted_address": "London, England, United Kingdom",
            "geometry": {
              "location": {
                "lat": 51.50643,
                "lng": -0.12719
              },
              "location_type": "GEOMETRIC_CENTER",
              "viewport": {
                "northeast": {
                  "lat": 51.68629,
                  "lng": 0.28206
                },
                "southwest": {
                  "lat": 51.28043,
                  "lng": -0.56316
                }
              }
            },
            "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
            "types": [
              "locality"
            ]
          },
          "status": "OK"
        },
        "properties": {
          "result": {
            "description": "the root node of address details",
            "properties": {
              "address_components": {
                "$ref": "#/components/schemas/AddressComponents"
              },
              "formatted_address": {
                "$ref": "#/components/schemas/FormattedAddress"
              },
              "geometry": {
                "$ref": "#/components/schemas/AddressGeometry"
              },
              "public_id": {
                "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
                "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
                "type": "string"
              },
              "types": {
                "description": "The types of result.",
                "items": {
                  "$ref": "#/components/schemas/AddressTypes"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "title": "AddressDetailsResponse",
        "type": "object"
      },
      "AddressGeocodeCollectionResponse": {
        "description": "Address Geocode Collection Response. Contains one or more Addresses with coordinates (default to one result for reverse geocoding)",
        "example": {
          "results": [
            {
              "address_components": [
                {
                  "long_name": "France",
                  "short_name": "FRA",
                  "types": [
                    "country"
                  ]
                },
                {
                  "long_name": "Ile-de-France",
                  "short_name": "IDF",
                  "types": [
                    "state"
                  ]
                },
                {
                  "long_name": "Paris",
                  "short_name": "Paris",
                  "types": [
                    "county"
                  ]
                },
                {
                  "long_name": "Paris",
                  "short_name": "Paris",
                  "types": [
                    "locality"
                  ]
                },
                {
                  "long_name": "7th Arrondissement",
                  "short_name": "7th Arrondissement",
                  "types": [
                    "district"
                  ]
                },
                {
                  "long_name": "Place de la Résistance",
                  "short_name": "Place de la Résistance",
                  "types": [
                    "route"
                  ]
                },
                {
                  "long_name": "75007",
                  "short_name": "75007",
                  "types": [
                    "postal_code"
                  ]
                }
              ],
              "formatted_address": "Place de la Résistance, 75007 Paris, France",
              "geometry": {
                "location": {
                  "lat": 48.86228,
                  "lng": 2.30346
                },
                "location_type": "GEOMETRIC_CENTER",
                "viewport": {
                  "northeast": {
                    "lat": 48.86231,
                    "lng": 2.30546
                  },
                  "southwest": {
                    "lat": 48.86191,
                    "lng": 2.30147
                  }
                }
              },
              "types": [
                "route"
              ]
            }
          ],
          "status": "OK"
        },
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/AddressGeocodeResponse"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "title": "AddressGeocodeCollectionResponse",
        "type": "object"
      },
      "AddressGeocodeResponse": {
        "description": "Address Geocode Response",
        "properties": {
          "address_components": {
            "$ref": "#/components/schemas/AddressComponents"
          },
          "formatted_address": {
            "$ref": "#/components/schemas/FormattedAddress"
          },
          "geometry": {
            "$ref": "#/components/schemas/AddressGeometry"
          },
          "types": {
            "description": "The types of result. If result type is a `place`, additional types may be returned (`eat_and_drink`, `going_out_entertainment`, `sights_and_museums`, `natural_and_geographical`, `transport`, `accommodations`, `leisure_and_outdoor`, `shopping`, `business_and_services`, `facilities`, `areas_and_buildings`)",
            "items": {
              "$ref": "#/components/schemas/AddressGeocodeTypes"
            },
            "type": "array"
          }
        },
        "title": "AddressGeocodeResponse",
        "type": "object"
      },
      "AddressGeocodeTypes": {
        "description": "Contains the type of result.",
        "enum": [
          "house_number",
          "route",
          "address_block",
          "locality",
          "admin_level",
          "country",
          "place"
        ],
        "title": "AddressGeocodeTypes",
        "type": "string"
      },
      "AddressGeometry": {
        "description": "The location of the result, in latitude and longitude. Accuracy is also provided.",
        "example": {
          "location": {
            "lat": 48.829405,
            "lng": 2.367944
          },
          "location_type": "GEOMETRIC_CENTER"
        },
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "location_type": {
            "description": "Specifies additional data about the geocoded location. The following values are currently supported: \n  - `ROOFTOP` result is a precise geocode for which we have location information accurate down to street address precision.\n  - `RANGE_INTERPOLATED` result reflects an approximation (usually on a road) interpolated between two precise points (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n  - `GEOMETRIC_CENTER` result is the geometric center of a result such as a polyline (for example, a street) or polygon (city, region, …).\n  - `APPROXIMATE` result is approximate (usually when no other above value applies)\n",
            "enum": [
              "ROOFTOP",
              "RANGE_INTERPOLATED",
              "GEOMETRIC_CENTER",
              "APPROXIMATE"
            ],
            "type": "string"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          }
        },
        "title": "AddressGeometry",
        "type": "object"
      },
      "AddressQuery": {
        "properties": {
          "language": {
            "default": "en",
            "description": "A supported address language as an ISO 639-1 2 letter code.",
            "title": "Language",
            "type": "string"
          },
          "words": {
            "description": "A 3 word address as a string. It must be three words separated with dots or a japanese middle dot character (・). Words separated by spaces will be rejected. Optionally, the 3 word address can be prefixed with /// (which would be encoded as %2F%2F%2F)",
            "example": "couch.spotted.amended",
            "title": "Words",
            "type": "string"
          }
        },
        "required": [
          "words"
        ],
        "title": "AddressQuery",
        "type": "object"
      },
      "AddressStatus": {
        "description": "Returns more info on if the request was successful or not, valid responses.\n  * `OK` indicates the response contains a valid result.\n  * `INVALID_REQUEST` indicates that the provided request was invalid (e.g. wrong URL syntax).\n  * `REQUEST_DENIED` indicates that the service denied use of the Address API (e.g. wrong API Key, wrong/no referer, …).\n  * `UNKNOWN_ERROR` indicates an Address API request could not be processed due to a server error. The request may succeed if you try again.\n",
        "enum": [
          "OK",
          "INVALID_REQUEST",
          "REQUEST_DENIED",
          "UNKNOWN_ERROR"
        ],
        "example": "OK",
        "title": "AddressStatus",
        "type": "string"
      },
      "AddressSummary": {
        "properties": {
          "description": {
            "description": "Human readable address",
            "title": "Description",
            "type": "string"
          },
          "public_id": {
            "description": "Public ID of address listed as sub_building",
            "title": "Public Id",
            "type": "string"
          }
        },
        "required": [
          "public_id",
          "description"
        ],
        "title": "AddressSummary",
        "type": "object"
      },
      "AddressTypes": {
        "description": "Contains the type of result.",
        "enum": [
          "house_number",
          "route",
          "address_block",
          "locality",
          "admin_level",
          "country"
        ],
        "title": "AddressTypes",
        "type": "string"
      },
      "AssetAddressLines": {
        "description": "An Array for lines of an Asset Address",
        "example": [
          "Building Centre",
          "26 Store Street"
        ],
        "items": {
          "example": "26 Store Street",
          "type": "string"
        },
        "title": "AssetAddressLines",
        "type": "array"
      },
      "AssetAddressRequest": {
        "description": "An object containing the separate components applicable to this address.",
        "example": {
          "city": "London",
          "countryCode": "UK",
          "lines": [
            "8 Southwark St"
          ],
          "zipcode": "WC1E 7BT"
        },
        "properties": {
          "city": {
            "description": "A City where belongs an Asset",
            "example": "London",
            "type": "string"
          },
          "countryCode": {
            "description": "An ISO_3166-1 Country Code where the Asset is located (see \u003chttps://en.wikipedia.org/wiki/ISO_3166-1\u003e for full list)",
            "example": "UK",
            "nullable": true,
            "type": "string"
          },
          "lines": {
            "$ref": "#/components/schemas/AssetAddressLines"
          },
          "zipcode": {
            "description": "An Zipcode / Postal code of an Asset Address",
            "example": "WC1E 7BT",
            "type": "string"
          }
        },
        "title": "AssetAddressRequest",
        "type": "object"
      },
      "AssetAddressResponse": {
        "description": "An object containing the separate components applicable to this address.",
        "example": {
          "city": "London",
          "country_code": "UK",
          "lines": [
            "8 Southwark St"
          ],
          "zipcode": "SE1 1TL"
        },
        "properties": {
          "city": {
            "description": "A City where belongs an Asset",
            "example": "London",
            "type": "string"
          },
          "country_code": {
            "description": "An ISO_3166-1 Country Code where the Asset is located (see \u003chttps://en.wikipedia.org/wiki/ISO_3166-1\u003e for full list)",
            "example": "UK",
            "nullable": true,
            "type": "string"
          },
          "lines": {
            "$ref": "#/components/schemas/AssetAddressLines"
          },
          "zipcode": {
            "description": "An Zipcode / Postal code of an Asset Address",
            "example": "WC1E 7BT",
            "type": "string"
          }
        },
        "title": "AssetAddressResponse",
        "type": "object"
      },
      "AssetAutocompleteResponse": {
        "description": "Asset Autocomplete Response with highlighted results on asset name.",
        "example": {
          "predictions": [
            {
              "highlighted": "Sun \u003cb\u003eStreet\u003c/b\u003e",
              "matched_substrings": [
                {
                  "length": 6,
                  "offset": 4
                }
              ],
              "name": "Sun Street",
              "store_id": "2670",
              "types": [
                "Coffee shop"
              ]
            },
            {
              "highlighted": "7th \u003cb\u003eStreet\u003c/b\u003e",
              "matched_substrings": [
                {
                  "length": 6,
                  "offset": 4
                }
              ],
              "name": "7th Street",
              "store_id": "16069",
              "types": [
                "Coffee shop"
              ]
            },
            {
              "highlighted": "The \u003cb\u003eStreet\u003c/b\u003e",
              "matched_substrings": [
                {
                  "length": 6,
                  "offset": 4
                }
              ],
              "name": "The Street",
              "store_id": "1013873",
              "types": [
                "Coffee shop"
              ]
            },
            {
              "highlighted": "12th \u003cb\u003eStreet\u003c/b\u003e",
              "matched_substrings": [
                {
                  "length": 6,
                  "offset": 5
                }
              ],
              "name": "12th Street",
              "store_id": "1008896",
              "types": [
                "Coffee shop"
              ]
            },
            {
              "highlighted": "Doha \u003cb\u003eStreet\u003c/b\u003e",
              "matched_substrings": [
                {
                  "length": 6,
                  "offset": 5
                }
              ],
              "name": "Doha Street",
              "store_id": "1023565",
              "types": [
                "Coffee shop"
              ]
            }
          ]
        },
        "properties": {
          "predictions": {
            "description": "A list of predictions based on similarity in all the `localizedNames` passed in query (or similarity to `store_name` if no `localizedNames` exist)",
            "items": {
              "properties": {
                "highlighted": {
                  "description": "an HTML formatted string with, if it exists, the matched substring(s) in bold font.",
                  "example": "Centro \u003cb\u003eCommercial\u003c/b\u003ee Deria",
                  "type": "string"
                },
                "matched_substrings": {
                  "items": {
                    "$ref": "#/components/schemas/MatchedSubstring"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "The `name` property of each prediction will be filled with the localized name of your asset in the `language` you provided in your query if it exists, or else the default name property.\n",
                  "example": "Centro Commerciale Deria",
                  "type": "string"
                },
                "store_id": {
                  "$ref": "#/components/schemas/AssetId"
                },
                "types": {
                  "$ref": "#/components/schemas/AssetTypes"
                }
              },
              "type": "object"
            }
          }
        },
        "title": "AssetAutocompleteResponse",
        "type": "object"
      },
      "AssetContact": {
        "description": "An object containing the asset's contact available information.",
        "example": {
          "email": "contact@woosmap.com",
          "phone": "+44 20 7693 4000",
          "website": "https://www.woosmap.com"
        },
        "properties": {
          "email": {
            "description": "Contains the Asset's email contact.",
            "example": "contact@woosmap.com",
            "type": "string"
          },
          "phone": {
            "description": "Contains the Asset's phone number in its [local format](https://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers).",
            "example": "+44 20 7693 4000",
            "type": "string"
          },
          "website": {
            "description": "The website contact for this Asset, such as a business' homepage.",
            "example": "https://www.woosmap.com",
            "type": "string"
          }
        },
        "title": "AssetContact",
        "type": "object"
      },
      "AssetFeatureCollectionResponse": {
        "description": "Assets Collection Response as a GeoJSon FeatureCollection with Asset properties",
        "example": {
          "features": [
            {
              "geometry": {
                "coordinates": [
                  -0.14408,
                  51.5088
                ],
                "type": "Point"
              },
              "properties": {
                "address": {
                  "city": "London",
                  "country_code": "GB",
                  "lines": [
                    "27 Berkeley St",
                    "London, ENG W1X 5AD"
                  ],
                  "zipcode": "W1X 5AD"
                },
                "contact": {
                  "phone": "02076295779",
                  "website": "https://www.starbucks.com/store-locator/store/2354/berkeley-street-berkeley-square-27-berkeley-st-berkeley-square-london-eng-w-1-x-5-"
                },
                "distance": 135.28682936,
                "last_updated": "2022-11-10T13:23:53.564829+00:00",
                "name": "Berkeley Street/Berkeley Square",
                "open": {
                  "current_slice": {
                    "end": "18:00",
                    "start": "06:30"
                  },
                  "open_hours": [
                    {
                      "end": "18:00",
                      "start": "06:30"
                    }
                  ],
                  "open_now": true,
                  "week_day": 5
                },
                "opening_hours": {
                  "special": {},
                  "timezone": "Europe/London",
                  "usual": {
                    "1": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "2": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "3": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "4": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "5": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "6": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ],
                    "7": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ]
                  }
                },
                "store_id": "2354",
                "tags": [
                  "WA",
                  "WF",
                  "CD",
                  "DR",
                  "XO"
                ],
                "types": [
                  "Coffee shop"
                ],
                "user_properties": {
                  "take_away": "available"
                },
                "weekly_opening": {
                  "1": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "2": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "3": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "4": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "5": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "6": {
                    "hours": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ],
                    "isSpecial": false
                  },
                  "7": {
                    "hours": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ],
                    "isSpecial": false
                  },
                  "timezone": "Europe/London"
                }
              },
              "type": "Feature"
            }
          ],
          "pagination": {
            "page": 1,
            "pageCount": 1
          },
          "type": "FeatureCollection"
        },
        "properties": {
          "features": {
            "description": "the Assets Features",
            "items": {
              "$ref": "#/components/schemas/AssetFeatureResponse"
            },
            "type": "array"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "type": {
            "description": "the Geojson Type (only 'FeatureCollection')",
            "enum": [
              "FeatureCollection"
            ],
            "type": "string"
          }
        },
        "title": "AssetFeatureCollectionResponse",
        "type": "object"
      },
      "AssetFeatureResponse": {
        "description": "Asset Response as a GeoJSon Feature with Asset properties",
        "example": {
          "geometry": {
            "coordinates": [
              -122.712924,
              38.41244
            ],
            "type": "Point"
          },
          "properties": {
            "address": {
              "city": "Santa Rosa",
              "country_code": "US",
              "lines": [
                "2688 Santa Rosa Ave",
                "Santa Rosa, CA 95407"
              ],
              "zipcode": "954077625"
            },
            "contact": {
              "phone": "707-527-1006",
              "website": "https://www.starbucks.com/store-locator/store/10031/santa-rosa-yolanda-2688-santa-rosa-ave-santa-rosa-ca-954077625-us"
            },
            "last_updated": "2022-11-10T13:26:55.066524+00:00",
            "name": "Santa Rosa \u0026 Yolanda",
            "open": {
              "current_slice": {
                "end": "20:00",
                "start": "05:00"
              },
              "open_hours": [
                {
                  "end": "20:00",
                  "start": "05:00"
                }
              ],
              "open_now": true,
              "week_day": 5
            },
            "opening_hours": {
              "special": {},
              "timezone": "America/Los_Angeles",
              "usual": {
                "1": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "2": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "3": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "4": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "5": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "6": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "7": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ]
              }
            },
            "store_id": "10031",
            "tags": [
              "DT",
              "WA",
              "CD",
              "DR",
              "LB",
              "GO",
              "XO",
              "MX",
              "NB",
              "BE",
              "LU"
            ],
            "types": [
              "Coffee shop"
            ],
            "user_properties": {
              "take_away": "available"
            },
            "weekly_opening": {
              "1": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "2": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "3": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "4": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "5": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "6": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "7": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "timezone": "America/Los_Angeles"
            }
          },
          "type": "Feature"
        },
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/GeoJsonPoint"
          },
          "properties": {
            "$ref": "#/components/schemas/AssetResponse"
          },
          "type": {
            "description": "the Geojson Type (only 'Feature')",
            "enum": [
              "Feature"
            ],
            "type": "string"
          }
        },
        "title": "AssetFeatureResponse",
        "type": "object"
      },
      "AssetId": {
        "description": "A textual identifier that uniquely identifies an Asset. It must matches the following regexp `[A-Za-z0-9]+`\n",
        "example": "STORE_ID_12345",
        "title": "AssetId",
        "type": "string"
      },
      "AssetName": {
        "description": "The asset's name.",
        "example": "My Cool Store",
        "title": "AssetName",
        "type": "string"
      },
      "AssetOpenResponse": {
        "description": "The Current opening status for an Asset",
        "example": {
          "current_slice": {
            "end": "20:00",
            "start": "05:00"
          },
          "open_hours": [
            {
              "end": "20:00",
              "start": "05:00"
            }
          ],
          "open_now": true,
          "week_day": 1
        },
        "properties": {
          "current_slice": {
            "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
          },
          "next_opening": {
            "description": "the next opening hours period",
            "properties": {
              "day": {
                "description": "the day of next opening",
                "example": "2021-11-16",
                "type": "string"
              },
              "end": {
                "description": "the hours of next opening",
                "example": "17:30",
                "type": "string"
              },
              "start": {
                "description": "the hours of next closing",
                "example": "06:00",
                "type": "string"
              }
            },
            "type": "object"
          },
          "open_hours": {
            "description": "the opening hours for the day",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "open_now": {
            "description": "Boolean value indicating the status of the opening hours",
            "type": "boolean"
          },
          "week_day": {
            "description": "the day of the week starting from 1 to 7",
            "maximum": 7,
            "minimum": 1,
            "type": "integer"
          }
        },
        "title": "AssetOpenResponse",
        "type": "object"
      },
      "AssetOpeningHours": {
        "description": "An object describing the opening hours of an Asset.",
        "example": {
          "special": {
            "2015-02-07": [
              {
                "end": "23:00",
                "start": "08:00"
              }
            ]
          },
          "timezone": "Europe/London",
          "usual": {
            "1": [],
            "default": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ]
          }
        },
        "nullable": true,
        "properties": {
          "special": {
            "$ref": "#/components/schemas/AssetOpeningHoursSpecial"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "usual": {
            "$ref": "#/components/schemas/AssetOpeningHoursUsual"
          }
        },
        "title": "AssetOpeningHours",
        "type": "object"
      },
      "AssetOpeningHoursPeriod": {
        "description": "The hours for an opening period. To define a slice of time where the asset is open you must define a `start` and `end` keys. `start` and `end` must belong to the same day (crossing midnight may result in open_now being always false.)",
        "example": {
          "end": "19:30",
          "start": "08:30"
        },
        "properties": {
          "end": {
            "description": "Contains a time of day in 24-hour hh:mm format for the end of opening period. Values are in the range 00:00–23:59",
            "example": "19:30",
            "type": "string"
          },
          "start": {
            "description": "Contains a time of day in 24-hour hh:mm format for the begin of opening period. Values are in the range 00:00–23:59",
            "example": "08:30",
            "type": "string"
          }
        },
        "required": [
          "start",
          "end"
        ],
        "title": "AssetOpeningHoursPeriod",
        "type": "object"
      },
      "AssetOpeningHoursSpecial": {
        "description": "An object describing the special opening hours of an Asset.",
        "properties": {
          "2015-02-07": {
            "description": "The format for defining opening and closing hours for a particular day is the same as the usual. Instead of using numeric week day for keys you must use a date YYYY-MM-DD like \"2015-03-08\" (see ISO-8601).\n",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "2015-02-08": {
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          }
        },
        "title": "AssetOpeningHoursSpecial",
        "type": "object"
      },
      "AssetOpeningHoursUsual": {
        "description": "An object describing the usual opening hours of an Asset.",
        "properties": {
          "1": {
            "description": "The opening Hours for Monday",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "2": {
            "description": "The opening Hours for Tuesday",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "3": {
            "description": "The opening Hours for Wednesday",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "4": {
            "description": "The opening Hours for Thursday",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "5": {
            "description": "The opening Hours for Friday",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "6": {
            "description": "The opening Hours for Saturday",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "7": {
            "description": "The opening Hours for Sunday",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "default": {
            "description": "Contains the default opening hours to apply to all week days",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          }
        },
        "title": "AssetOpeningHoursUsual",
        "type": "object"
      },
      "AssetRequest": {
        "description": "Attributes describing an Asset Request.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AssetAddressRequest"
          },
          "contact": {
            "$ref": "#/components/schemas/AssetContact"
          },
          "localizedNames": {
            "description": "Alternate names for your assets. These localized names are useful for multi-language integrations. Combined with our Autocomplete API endpoint you can let your users find your store in their native language.",
            "example": {
              "ar": "مركز فيليتزي التجاري",
              "fr": "Centre Commercial Velizy",
              "gb": "Velizy Shopping Center",
              "it": "Centro Commerciale Velizy"
            },
            "type": "object"
          },
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "name": {
            "$ref": "#/components/schemas/AssetName"
          },
          "openingHours": {
            "$ref": "#/components/schemas/AssetOpeningHours"
          },
          "storeId": {
            "$ref": "#/components/schemas/AssetId"
          },
          "tags": {
            "$ref": "#/components/schemas/AssetTags"
          },
          "types": {
            "$ref": "#/components/schemas/AssetTypes"
          },
          "userProperties": {
            "additionalProperties": true,
            "description": "Contains all additional information relative to an Asset. If not set it returns null value.",
            "example": {
              "some_user_properties": "some_value"
            },
            "nullable": true,
            "type": "object"
          }
        },
        "required": [
          "location",
          "name",
          "storeId"
        ],
        "title": "AssetRequest",
        "type": "object"
      },
      "AssetResponse": {
        "description": "Attributes describing an Asset.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AssetAddressResponse"
          },
          "contact": {
            "$ref": "#/components/schemas/AssetContact"
          },
          "distance": {
            "description": "The distance in meters from the geolocated position or searched position if exist",
            "example": 544.581,
            "type": "number"
          },
          "last_updated": {
            "description": "the previous date timestamp when the asset has been updated",
            "example": "2022-11-08T15:48:08.556803+00:00",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/AssetName"
          },
          "open": {
            "$ref": "#/components/schemas/AssetOpenResponse"
          },
          "opening_hours": {
            "$ref": "#/components/schemas/AssetOpeningHours"
          },
          "store_id": {
            "$ref": "#/components/schemas/AssetId"
          },
          "tags": {
            "$ref": "#/components/schemas/AssetTags"
          },
          "types": {
            "$ref": "#/components/schemas/AssetTypes"
          },
          "user_properties": {
            "additionalProperties": true,
            "description": "Contains all additional information relative to an Asset. If not set it returns null value.",
            "example": {
              "some_user_properties": "some_value"
            },
            "nullable": true,
            "type": "object"
          },
          "weekly_opening": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningResponse"
          }
        },
        "title": "AssetResponse",
        "type": "object"
      },
      "AssetTags": {
        "description": "Contains an array of tags describing the Asset. For example a list of available amenities.",
        "example": [
          "wifi",
          "covered_parking"
        ],
        "items": {
          "example": "wifi",
          "type": "string"
        },
        "title": "AssetTags",
        "type": "array"
      },
      "AssetTypes": {
        "description": "Contains an array of types describing the Asset.",
        "example": [
          "drive",
          "click_and_collect"
        ],
        "items": {
          "example": "drive",
          "type": "string"
        },
        "title": "AssetTypes",
        "type": "array"
      },
      "AssetWeeklyOpeningHoursPeriod": {
        "description": "The opening Hours for Monday",
        "example": {
          "hours": [
            {
              "end": "18:00",
              "start": "06:30"
            }
          ],
          "isSpecial": false
        },
        "properties": {
          "hours": {
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "type": "array"
          },
          "isSpecial": {
            "description": "Define if the hours comes from a special opening hours day.",
            "example": false,
            "type": "boolean"
          }
        },
        "title": "AssetWeeklyOpeningHoursPeriod",
        "type": "object"
      },
      "AssetWeeklyOpeningResponse": {
        "description": "The current Weekly Opening taking into account the special hours",
        "example": {
          "1": {
            "hours": [],
            "isSpecial": false
          },
          "2": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "3": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "4": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "5": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "6": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "7": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "timezone": "Europe/London"
        },
        "properties": {
          "1": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "2": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "3": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "4": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "5": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "6": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "7": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          }
        },
        "title": "AssetWeeklyOpeningResponse",
        "type": "object"
      },
      "AssetsCollectionRequest": {
        "description": "A Collection of Woosmap Assets as expected for Data Management Data API.",
        "example": {
          "stores": [
            {
              "address": {
                "city": "London",
                "countryCode": "UK",
                "lines": [
                  "Building Centre",
                  "26 Store Street"
                ],
                "zipcode": "WC1E 7BT"
              },
              "contact": {
                "email": "contact@woosmap.com",
                "phone": "+44 20 7693 4000",
                "website": "https://www.woosmap.com"
              },
              "location": {
                "lat": 38.719,
                "lng": -77.1067
              },
              "name": "My Cool Store",
              "openingHours": {
                "special": {
                  "2015-02-07": [
                    {
                      "end": "23:00",
                      "start": "08:00"
                    }
                  ]
                },
                "timezone": "Europe/London",
                "usual": {
                  "1": [],
                  "default": [
                    {
                      "end": "22:00",
                      "start": "08:30"
                    }
                  ]
                }
              },
              "storeId": "STORE_ID_123456",
              "tags": [
                "wifi",
                "covered_parking"
              ],
              "types": [
                "drive",
                "click_and_collect"
              ],
              "userProperties": {
                "some_user_properties": "associated user value"
              }
            },
            {
              "address": {
                "city": "Alexandria",
                "countryCode": "US",
                "lines": [
                  "1805-1899",
                  "Orchard St"
                ],
                "zipcode": "22309"
              },
              "contact": {
                "email": "contact@woosmap.com",
                "phone": "+44 20 7693 4000",
                "website": "https://www.woosmap.com"
              },
              "location": {
                "lat": 38.5239,
                "lng": -77.0157
              },
              "name": "My Cool Store 2",
              "openingHours": {
                "timezone": "America/New_York",
                "usual": {
                  "1": [],
                  "default": [
                    {
                      "end": "22:00",
                      "start": "08:30"
                    }
                  ]
                }
              },
              "storeId": "STORE_ID_45678",
              "tags": [
                "covered_parking"
              ],
              "types": [
                "drive"
              ],
              "userProperties": {
                "some_user_properties": "associated user value"
              }
            }
          ]
        },
        "properties": {
          "stores": {
            "description": "The Assets collection",
            "items": {
              "$ref": "#/components/schemas/AssetRequest"
            },
            "type": "array"
          }
        },
        "required": [
          "stores"
        ],
        "title": "AssetsCollectionRequest",
        "type": "object"
      },
      "AuthenticationErrorResponse": {
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "required": [
          "detail"
        ],
        "title": "AuthenticationErrorResponse",
        "type": "object"
      },
      "AutoSuggestQuery": {
        "properties": {
          "clip-to-bounding-box": {
            "description": "Restrict AutoSuggest results to a bounding box, specified by coordinates.south_lat,west_lng,north_lat,east_lng, where: south_lat less than or equal to north_lat, west_lng less than or equal to east_lng.",
            "example": "48.624314,1.804429,49.058148,2.908555",
            "title": "Clip-To-Bounding-Box",
            "type": "string"
          },
          "clip-to-circle": {
            "description": "Restrict AutoSuggest results to a circle, specified by lat, lng, kilometres, where kilometres is the radius of the circle.",
            "example": "48.839701,2.291878,20",
            "title": "Clip-To-Circle",
            "type": "string"
          },
          "clip-to-country": {
            "description": "Restricts AutoSuggest to only return results inside the countries specified by comma-separated list of ISO 3166-1 alpha-2 country codes.",
            "example": "FR",
            "title": "Clip-To-Country",
            "type": "string"
          },
          "clip-to-polygon": {
            "description": "Restrict AutoSuggest results to a polygon, specified by a comma-separated list of lat, lng pairs. The polygon should be closed, i.e. the first element should be repeated as the last element; also the list should contain at least 4 pairs. The API is currently limited to accepting up to 25 pairs.",
            "example": "48.823547,2.199174,48.823547,2.199174,48.922216,2.328709,48.888626,2.473673,48.819279,2.445513,48.784865,2.330668,48.823547,2.199174",
            "title": "Clip-To-Polygon",
            "type": "string"
          },
          "focus": {
            "description": "This is a location, specified as latitude,longitude (often where the user making the query is). If specified, the results will be weighted to give preference to those near the focus.",
            "example": "48.861026,2.335853",
            "title": "Focus",
            "type": "string"
          },
          "input": {
            "description": "The full or partial 3 word address to obtain suggestions for. At minimum this must be the first two complete words plus at least one character from the third word.",
            "example": "couch.spotted.a",
            "title": "Input",
            "type": "string"
          },
          "input-type": {
            "default": "text",
            "description": "For power users, used to specify voice input mode.",
            "enum": [
              "text",
              "vocon-hybrid",
              "nmdp-asr",
              "generic-voice"
            ],
            "title": "Input-Type",
            "type": "string"
          },
          "language": {
            "description": "For normal text input, specifies a fallback language, which will help guide AutoSuggest if the input is particularly messy. A supported address language as an ISO 639-1 2 letter code.",
            "example": "fr",
            "title": "Language",
            "type": "string"
          },
          "prefer-land": {
            "default": true,
            "description": "Makes AutoSuggest prefer results on land to those in the sea.",
            "title": "Prefer-Land",
            "type": "boolean"
          }
        },
        "required": [
          "input"
        ],
        "title": "AutoSuggestQuery",
        "type": "object"
      },
      "AutoSuggestResponse": {
        "example": {
          "suggestions": [
            {
              "country": "FR",
              "distanceToFocusKm": 4,
              "language": "en",
              "nearestPlace": "Paris",
              "rank": 1,
              "words": "couches.spotted.alas"
            },
            {
              "country": "FR",
              "distanceToFocusKm": 8,
              "language": "en",
              "nearestPlace": "Paris",
              "rank": 2,
              "words": "couches.spotted.atom"
            },
            {
              "country": "FR",
              "distanceToFocusKm": 30,
              "language": "en",
              "nearestPlace": "Pontcarré, Seine-et-Marne",
              "rank": 3,
              "words": "couch.spotted.boat"
            },
            {
              "country": "FR",
              "distanceToFocusKm": 27,
              "language": "en",
              "nearestPlace": "Triel-sur-Seine, Yvelines",
              "rank": 4,
              "words": "vouch.spotted.dare"
            }
          ]
        },
        "properties": {
          "suggestions": {
            "items": {
              "$ref": "#/components/schemas/AutoSuggestions"
            },
            "title": "Suggestions",
            "type": "array"
          }
        },
        "required": [
          "suggestions"
        ],
        "title": "AutoSuggestResponse",
        "type": "object"
      },
      "AutoSuggestions": {
        "properties": {
          "country": {
            "description": "Country Code",
            "title": "Country",
            "type": "string"
          },
          "distanceToFocusKm": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Distance to the Lat Lng focus (if provided)",
            "title": "Distancetofocuskm"
          },
          "language": {
            "description": "Language Code",
            "title": "Language",
            "type": "string"
          },
          "nearestPlace": {
            "description": "Nearest Place",
            "title": "Nearestplace",
            "type": "string"
          },
          "rank": {
            "description": "Suggestion Rank",
            "title": "Rank",
            "type": "integer"
          },
          "words": {
            "description": "The what3words address",
            "title": "Words",
            "type": "string"
          }
        },
        "required": [
          "country",
          "nearestPlace",
          "words",
          "rank",
          "language"
        ],
        "title": "AutoSuggestions",
        "type": "object"
      },
      "AutocompleteInput": {
        "properties": {
          "advanced_filter": {
            "description": "Filter by complex queries on properties (ex: indoor:=\"room\" OR door:=\"yes\").",
            "title": "Advanced Filter",
            "type": "string"
          },
          "building": {
            "description": "Filter by building (use `undefined` to find POIs not associated with a building.).",
            "title": "Building",
            "type": "string"
          },
          "category": {
            "description": "Filter by category.",
            "title": "Category",
            "type": "string"
          },
          "extended": {
            "description": "Option to search even not searchable pois (extended=full)",
            "example": "full",
            "title": "Extended",
            "type": "string"
          },
          "from_location": {
            "description": "A string with the format lat,lng,level",
            "example": "48.8818546,2.3572283,0",
            "title": "From Location",
            "type": "string"
          },
          "items_by_page": {
            "default": 0,
            "description": "Number of items per page. A value of 0 means no pagination.",
            "title": "Items By Page",
            "type": "integer"
          },
          "language": {
            "default": "en",
            "description": "A supported language as an ISO 639-1 2 letter code.",
            "title": "Language",
            "type": "string"
          },
          "level": {
            "description": "Filter by level.",
            "title": "Level",
            "type": "integer"
          },
          "page": {
            "default": 0,
            "description": "Page number. 0 being the first page.",
            "title": "Page",
            "type": "integer"
          },
          "q": {
            "description": "Search string. If not passed then all features will be listed alphabetically",
            "title": "Q",
            "type": "string"
          },
          "ref": {
            "description": "Filter by a comma seperated list of POI Refs.",
            "example": "ref:main_entrance,ref:side_entrance",
            "title": "Ref",
            "type": "string"
          }
        },
        "title": "AutocompleteInput",
        "type": "object"
      },
      "AutocompletePagination": {
        "example": {
          "pagination": {
            "page": 1,
            "page_count": 1,
            "per_page": 2,
            "total": 2
          },
          "predictions": [
            {
              "building": "Palace of Westminster",
              "category": null,
              "distance": null,
              "duration": null,
              "id": 3623459,
              "level": "1",
              "name": "Painted Chamber",
              "ref": null
            },
            {
              "building": "Palace of Westminster",
              "category": null,
              "distance": null,
              "duration": null,
              "id": 3624060,
              "level": "1",
              "name": "Lord Chamberlain's Private Office",
              "ref": null
            }
          ]
        },
        "properties": {
          "pagination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationSchema"
              }
            ],
            "description": "Pagination Information"
          },
          "predictions": {
            "default": [],
            "description": "List of Indoor features",
            "items": {
              "$ref": "#/components/schemas/PredictionSchema"
            },
            "title": "Predictions",
            "type": "array"
          }
        },
        "required": [
          "pagination"
        ],
        "title": "AutocompletePagination",
        "type": "object"
      },
      "Bounds": {
        "description": "A rectangle in geographical coordinates from points at the southwest and northeast corners.",
        "example": {
          "northeast": {
            "lat": 49.315678,
            "lng": 4.15292
          },
          "southwest": {
            "lat": 49.31073,
            "lng": 4.145162
          }
        },
        "properties": {
          "northeast": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "southwest": {
            "$ref": "#/components/schemas/LatLngLiteral"
          }
        },
        "title": "Bounds",
        "type": "object"
      },
      "BoundsResponse": {
        "description": "Message returned to a success Search Bounds request",
        "properties": {
          "bounds": {
            "description": "The bounds object",
            "properties": {
              "east": {
                "description": "The east longitude of bounds",
                "example": -0.14408,
                "type": "number"
              },
              "north": {
                "description": "The north latitude of bounds",
                "example": 51.5088,
                "type": "number"
              },
              "south": {
                "description": "The south latitude of bounds",
                "example": -51.5088,
                "type": "number"
              },
              "west": {
                "description": "The west longitude of bounds",
                "example": -0.14408,
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "title": "BoundsResponse",
        "type": "object"
      },
      "Building": {
        "properties": {
          "cover": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cover"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Building Description",
            "title": "Description"
          },
          "levels": {
            "description": "Levels associated with the Building",
            "items": {
              "$ref": "#/components/schemas/Level"
            },
            "title": "Levels",
            "type": "array"
          },
          "localized_name": {
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Translated names of the Building",
            "title": "Localized Name",
            "type": "object"
          },
          "logo": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the Building",
            "title": "Name"
          },
          "opening_hours": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Building Opening Hours",
            "title": "Opening Hours"
          },
          "ref": {
            "description": "Reference to identify Building",
            "title": "Ref",
            "type": "string"
          }
        },
        "required": [
          "ref",
          "levels"
        ],
        "title": "Building",
        "type": "object"
      },
      "Coordinates": {
        "properties": {
          "lat": {
            "description": "Latitude",
            "title": "Lat",
            "type": "number"
          },
          "lng": {
            "description": "Longitude",
            "title": "Lng",
            "type": "number"
          }
        },
        "required": [
          "lng",
          "lat"
        ],
        "title": "Coordinates",
        "type": "object"
      },
      "Destinations": {
        "description": "One or more locations to use as the finishing point for calculating travel distance. The options for the destinations parameter are the same as for the origins parameter, described above. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n",
        "example": "48.709,2.403|48.768,2.338",
        "title": "Destinations",
        "type": "string"
      },
      "DirectionsIn": {
        "properties": {
          "destination": {
            "description": "A string defining the destination of the route, in the format `lat,lng,level`, `poi_id` (identifier of a poi) or `ref:poi_ref` (ref of a poi with starting with 'ref:')",
            "examples": {
              "lll": {
                "summary": "lat,lng,level",
                "value": "48.8818546,2.3572283,0"
              },
              "poi": {
                "summary": "POI",
                "value": "123456"
              },
              "ref": {
                "summary": "Reference",
                "value": "ref:entrance"
              }
            },
            "title": "Destination",
            "type": "string"
          },
          "origin": {
            "description": "A string defining the origin of the route, in the format of `lat,lng,level`, `poi_id` (identifier of a POI) or `ref:poi_ref` (ref of a poi with starting with 'ref:') ",
            "examples": {
              "lll": {
                "summary": "lat,lng,level",
                "value": "48.8818546,2.3572283,0"
              },
              "poi": {
                "summary": "POI",
                "value": "123456"
              },
              "ref": {
                "summary": "Reference",
                "value": "ref:entrance"
              }
            },
            "title": "Origin",
            "type": "string"
          }
        },
        "required": [
          "origin",
          "destination"
        ],
        "title": "DirectionsIn",
        "type": "object"
      },
      "Distance": {
        "properties": {
          "text": {
            "description": "Distance as text based response with unit type",
            "title": "Text",
            "type": "string"
          },
          "value": {
            "description": "Distance in metres",
            "title": "Value",
            "type": "number"
          }
        },
        "required": [
          "value",
          "text"
        ],
        "title": "Distance",
        "type": "object"
      },
      "DistanceInstructions": {
        "description": "Formatted instructions for this leg",
        "example": {
          "action": 2,
          "summary": "Drive northeast on D 151.",
          "verbal_alert": "Enter the roundabout and take the 2nd exit onto D 30.",
          "verbal_before": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30."
        },
        "properties": {
          "action": {
            "description": "The action to take for the current step (turn left, merge, straight, etc.). See [list of available actions](https://developers.woosmap.com/products/distance-api/route-endpoint/#instructions).",
            "example": 2,
            "type": "integer"
          },
          "summary": {
            "description": "Written maneuver instruction.",
            "example": "Drive northeast on D 151.",
            "type": "string"
          },
          "verbal_after": {
            "description": "Text suitable for use as a verbal message immediately after the maneuver transition",
            "example": "Continue for 700 meters.",
            "type": "string"
          },
          "verbal_alert": {
            "description": "The transition alert instruction will prepare the user for the forthcoming transition.",
            "example": "Enter the roundabout and take the 2nd exit onto D 30.",
            "type": "string"
          },
          "verbal_before": {
            "description": "Text suitable for use as a verbal message immediately prior to the maneuver transition",
            "example": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30.",
            "type": "string"
          },
          "verbal_succint": {
            "description": "Text suitable for use as a verbal alert in a navigation application",
            "example": "Drive northeast. Then Enter the roundabout and take the 2nd exit onto D 30.",
            "type": "string"
          }
        },
        "title": "DistanceInstructions",
        "type": "object"
      },
      "DistanceIsochroneResponse": {
        "description": "Attributes describing a distance isochrone response.",
        "example": {
          "isoline": {
            "distance": {
              "text": "1 km",
              "value": 1
            },
            "geometry": "s|ihHouuMZ`GdClCsA~QhCnQmBhEvQhWpD|AnHqJ`OwBx@lC|DhAgFnKlBx@v@tHfEvDlBqF{@{NvDgDhAeIbEI~AfL`EnAfHiEiAOE_EuCq@c@cD_FY}C_EqF_@gEoEoKMcCkDsI}@_C}CyG]aG{G[eFoCw@gAiIkDYg@_DwA@",
            "origin": {
              "lat": 48.709,
              "lng": 2.403
            }
          },
          "status": "OK"
        },
        "properties": {
          "isoline": {
            "description": "Contains the properties of isoline",
            "properties": {
              "distance": {
                "description": "The distance of the isochrone (returned only if `method=distance` in parameters)",
                "properties": {
                  "text": {
                    "description": "The readable distance in kilometers",
                    "example": "10 km",
                    "type": "string"
                  },
                  "value": {
                    "description": "The distance in kilometers",
                    "example": 10,
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "geometry": {
                "description": "The polyline of the isoline (encoded with the [poyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)).",
                "example": "a_jyHfol@aAfEzGlIfER~JqV_KqLu@pDiHv@bAfEeCfE",
                "type": "string"
              },
              "origin": {
                "$ref": "#/components/schemas/LatLngLiteral"
              },
              "time": {
                "description": "The time of the isochrone (returned as default or when specifying `method=time` in parameters)",
                "properties": {
                  "text": {
                    "description": "The readable time in minutes",
                    "example": "30 minutes",
                    "type": "string"
                  },
                  "value": {
                    "description": "The time in minutes",
                    "example": 30,
                    "type": "number"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          }
        },
        "title": "DistanceIsochroneResponse",
        "type": "object"
      },
      "DistanceLeg": {
        "description": "Leg in a route",
        "example": {
          "distance": {
            "text": "1 km",
            "value": 1038
          },
          "duration": {
            "text": "1 min",
            "value": 75
          },
          "end_address": "D 30",
          "end_location": {
            "lat": 49.31344,
            "lng": 4.15293
          },
          "end_waypoint": 1,
          "start_address": "D 151",
          "start_location": {
            "lat": 49.31067,
            "lng": 4.14525
          },
          "start_waypoint": 0
        },
        "properties": {
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "end_address": {
            "description": "the ending address of the leg",
            "example": "D 8043, E 44",
            "type": "string"
          },
          "end_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "end_waypoint": {
            "description": "The end waypoint order number",
            "example": 2,
            "type": "integer"
          },
          "start_address": {
            "description": "the starting address of the leg",
            "example": "Chemin de la Tuilerie",
            "type": "string"
          },
          "start_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "start_waypoint": {
            "description": "The start waypoint order number",
            "example": 1,
            "type": "integer"
          },
          "steps": {
            "description": "List of steps constituting the leg. Steps are returned when `details=full` parameter is specified. A step is the most atomic unit of a route, containing a single step describing a specific, single instruction on the journey. The step not only describes the instruction but also contains distance and duration information relating to how this step relates to the following step.",
            "items": {
              "$ref": "#/components/schemas/DistanceStep"
            },
            "type": "array"
          }
        },
        "title": "DistanceLeg",
        "type": "object"
      },
      "DistanceMatrixCollection": {
        "example": {
          "rows": [],
          "status": "OK"
        },
        "properties": {
          "rows": {
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixRow"
            },
            "title": "Rows",
            "type": "array"
          },
          "status": {
            "description": "A string to indicate the success of the request",
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status",
          "rows"
        ],
        "title": "DistanceMatrixCollection",
        "type": "object"
      },
      "DistanceMatrixDirectionsIn": {
        "properties": {
          "destinations": {
            "description": "A string with a list of destinations seperated by `|`. Destinations can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
            "example": "1.2,2.1,1|exit_1|1.3,3.1,2|ref:main_exit",
            "title": "Destinations",
            "type": "string"
          },
          "origins": {
            "description": "A string with a list of origins seperated by `|`. Origins can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
            "example": "1.2,2.1,1|exit_1|1.3,3.1,2|ref:main_exit",
            "title": "Origins",
            "type": "string"
          }
        },
        "required": [
          "origins",
          "destinations"
        ],
        "title": "DistanceMatrixDirectionsIn",
        "type": "object"
      },
      "DistanceMatrixElement": {
        "properties": {
          "distance": {
            "$ref": "#/components/schemas/Distance"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "status": {
            "description": "A string to indicate if a path was found or not",
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status",
          "duration",
          "distance"
        ],
        "title": "DistanceMatrixElement",
        "type": "object"
      },
      "DistanceMatrixElementResponse": {
        "description": "Attributes describing an element of origin and destination returned in distance Matrix response.",
        "properties": {
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "status": {
            "description": "Status returned for Distance Matrix Element Response.\n  - `OK` indicates the response contains a valid result.\n  - `NOT_FOUND` indicates that the origin and/or destination of this pairing could not be matched to the network.\n  - `ZERO_RESULTS` indicates no route could be found between the origin and destination.\n",
            "enum": [
              "OK",
              "NOT_FOUND",
              "ZERO_RESULTS"
            ],
            "type": "string"
          }
        },
        "title": "DistanceMatrixElementResponse",
        "type": "object"
      },
      "DistanceMatrixElementsResponse": {
        "description": "Attributes describing elements of origin and destination returned in distance Matrix response.",
        "example": {
          "elements": [
            {
              "distance": {
                "text": "10.6 km",
                "value": 10613
              },
              "duration": {
                "text": "14 mins",
                "value": 866
              },
              "status": "OK"
            },
            {
              "distance": {
                "text": "10.3 km",
                "value": 10287
              },
              "duration": {
                "text": "16 mins",
                "value": 935
              },
              "status": "OK"
            }
          ]
        },
        "properties": {
          "elements": {
            "description": "the route element",
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixElementResponse"
            },
            "type": "array"
          }
        },
        "title": "DistanceMatrixElementsResponse",
        "type": "object"
      },
      "DistanceMatrixRequest": {
        "description": "Attributes describing a distance Matrix request",
        "example": {
          "departure_time": "now",
          "destinations": "48.83534,2.368308",
          "elements": "duration_distance",
          "method": "distance",
          "origins": "48.73534,2.368308|48.73534,2.368308",
          "units": "imperial"
        },
        "properties": {
          "departure_time": {
            "description": "Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\n",
            "example": "now",
            "type": "string"
          },
          "destinations": {
            "$ref": "#/components/schemas/Destinations"
          },
          "elements": {
            "description": "Specifies element values that will be part of the API response (distance and/or duration). if not specified default is `distance`\n",
            "enum": [
              "distance",
              "duration",
              "duration_distance"
            ],
            "example": "duration_distance",
            "type": "string"
          },
          "language": {
            "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or “en”.\n",
            "example": "en",
            "type": "string"
          },
          "method": {
            "description": "Specifies the method to compute the route between the start point and the end point:\n  - `time`: fastest route (default)\n  - `distance`: shortest route\n",
            "enum": [
              "time",
              "distance"
            ],
            "example": "distance",
            "type": "string"
          },
          "mode": {
            "description": "Specifies the mode of transport to use when calculating distance\n",
            "enum": [
              "driving",
              "cycling",
              "walking"
            ],
            "example": "driving",
            "type": "string"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "units": {
            "$ref": "#/components/schemas/Units"
          }
        },
        "required": [
          "origins",
          "destinations"
        ],
        "title": "DistanceMatrixRequest",
        "type": "object"
      },
      "DistanceMatrixResponse": {
        "description": "Attributes describing an distance Matrix response.",
        "example": {
          "rows": [
            {
              "elements": [
                {
                  "distance": {
                    "text": "10.6 km",
                    "value": 10605
                  },
                  "duration": {
                    "text": "16 mins",
                    "value": 937
                  },
                  "status": "OK"
                },
                {
                  "distance": {
                    "text": "10.3 km",
                    "value": 10333
                  },
                  "duration": {
                    "text": "15 mins",
                    "value": 907
                  },
                  "status": "OK"
                }
              ]
            }
          ],
          "status": "OK"
        },
        "properties": {
          "rows": {
            "description": "Contains an array of elements for each pair of origin and destination",
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixElementsResponse"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          }
        },
        "title": "DistanceMatrixResponse",
        "type": "object"
      },
      "DistanceMatrixRow": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixElement"
            },
            "title": "Elements",
            "type": "array"
          }
        },
        "required": [
          "elements"
        ],
        "title": "DistanceMatrixRow",
        "type": "object"
      },
      "DistanceRouteElementsResponse": {
        "description": "Attributes describing routes from an origin to a destination returned in distance route response.",
        "properties": {
          "bounds": {
            "$ref": "#/components/schemas/Bounds"
          },
          "legs": {
            "description": "Legs part of the route response",
            "items": {
              "$ref": "#/components/schemas/DistanceLeg"
            },
            "type": "array"
          },
          "notice": {
            "description": "Some noticeable information about the route",
            "example": "Has toll segments",
            "type": "string"
          },
          "overview_polyline": {
            "$ref": "#/components/schemas/EncodedPolyline"
          }
        },
        "title": "DistanceRouteElementsResponse",
        "type": "object"
      },
      "DistanceRouteResponse": {
        "description": "Attributes describing a distance route response.",
        "example": {
          "routes": [
            {
              "bounds": {
                "northeast": {
                  "lat": 49.315678,
                  "lng": 4.15292
                },
                "southwest": {
                  "lat": 49.31073,
                  "lng": 4.145162
                }
              },
              "legs": [
                {
                  "distance": {
                    "text": "1 km",
                    "value": 1038
                  },
                  "duration": {
                    "text": "1 min",
                    "value": 75
                  },
                  "end_address": "D 30",
                  "end_location": {
                    "lat": 49.31344,
                    "lng": 4.15293
                  },
                  "end_waypoint": 1,
                  "start_address": "D 151",
                  "start_location": {
                    "lat": 49.31067,
                    "lng": 4.14525
                  },
                  "start_waypoint": 0,
                  "steps": [
                    {
                      "distance": "676 m",
                      "duration": "1 min",
                      "end_location": {
                        "lat": 49.315679,
                        "lng": 4.149621
                      },
                      "instructions": {
                        "action": 2,
                        "summary": "Drive northeast on D 151.",
                        "verbal_after": "Continue for 700 meters.",
                        "verbal_before": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_succint": "Drive northeast. Then Enter the roundabout and take the 2nd exit onto D 30."
                      },
                      "polyline": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?Q",
                      "start_location": {
                        "lat": 49.31073,
                        "lng": 4.145163
                      },
                      "travel_mode": "DRIVING"
                    },
                    {
                      "distance": "22 m",
                      "duration": "1 min",
                      "end_location": {
                        "lat": 49.31563,
                        "lng": 4.149905
                      },
                      "instructions": {
                        "action": 26,
                        "summary": "Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_alert": "Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_before": "Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_succint": "Enter the roundabout and take the 2nd exit."
                      },
                      "polyline": "}}~kHcniXBIBU?W",
                      "start_location": {
                        "lat": 49.315679,
                        "lng": 4.149621
                      },
                      "travel_mode": "DRIVING"
                    },
                    {
                      "distance": "198 m",
                      "duration": "1 min",
                      "end_location": {
                        "lat": 49.314292,
                        "lng": 4.151623
                      },
                      "instructions": {
                        "action": 27,
                        "summary": "Exit the roundabout onto D 30.",
                        "verbal_after": "Continue for 200 meters.",
                        "verbal_before": "Exit the roundabout onto D 30.",
                        "verbal_succint": "Exit the roundabout."
                      },
                      "polyline": "u}~kH{oiXFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELC",
                      "start_location": {
                        "lat": 49.31563,
                        "lng": 4.149905
                      },
                      "travel_mode": "DRIVING"
                    },
                    {
                      "distance": "46 m",
                      "duration": "1 min",
                      "end_location": {
                        "lat": 49.314041,
                        "lng": 4.151976
                      },
                      "instructions": {
                        "action": 26,
                        "summary": "Enter the roundabout and take the 1st exit onto D 30.",
                        "verbal_alert": "Enter the roundabout and take the 1st exit onto D 30.",
                        "verbal_before": "Enter the roundabout and take the 1st exit onto D 30.",
                        "verbal_succint": "Enter the roundabout and take the 1st exit."
                      },
                      "polyline": "iu~kHsziXJBJAHGFIDMBSAS",
                      "start_location": {
                        "lat": 49.314292,
                        "lng": 4.151623
                      },
                      "travel_mode": "DRIVING"
                    },
                    {
                      "distance": "96 m",
                      "duration": "1 min",
                      "end_location": {
                        "lat": 49.313434,
                        "lng": 4.152921
                      },
                      "instructions": {
                        "action": 27,
                        "summary": "Exit the roundabout onto D 30.",
                        "verbal_after": "Continue for 100 meters.",
                        "verbal_before": "Exit the roundabout onto D 30. Then, in 100 meters, You will arrive at your destination.",
                        "verbal_succint": "Exit the roundabout. Then, in 100 meters, You will arrive at your destination."
                      },
                      "polyline": "ws~kHy|iXBKDILURa@LWt@eAHQ",
                      "start_location": {
                        "lat": 49.314041,
                        "lng": 4.151976
                      },
                      "travel_mode": "DRIVING"
                    },
                    {
                      "distance": "1 m",
                      "duration": "1 min",
                      "end_location": {
                        "lat": 49.313434,
                        "lng": 4.152921
                      },
                      "instructions": {
                        "action": 4,
                        "summary": "You have arrived at your destination.",
                        "verbal_alert": "You will arrive at your destination.",
                        "verbal_before": "You have arrived at your destination."
                      },
                      "polyline": "}o~kHwbjX",
                      "start_location": {
                        "lat": 49.313434,
                        "lng": 4.152921
                      },
                      "travel_mode": "DRIVING"
                    }
                  ]
                }
              ],
              "notice": "",
              "overview_polyline": {
                "points": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?QBIBU?WFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELCJBJAHGFIDMBSASBKDILURa@LWt@eAHQ"
              }
            }
          ],
          "status": "OK"
        },
        "properties": {
          "routes": {
            "description": "Contains an array of routes from origin to destination (only one if alternatives is not specified)",
            "items": {
              "$ref": "#/components/schemas/DistanceRouteElementsResponse"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          }
        },
        "title": "DistanceRouteResponse",
        "type": "object"
      },
      "DistanceStatus": {
        "description": "Returns more info on if the request was successful or not.\n  * `OK` indicates the response contains a valid result.\n  * `INVALID_REQUEST` indicates that the provided request was invalid (e.g. wrong URL syntax).\n  * `MAX_ELEMENTS_EXCEEDED` indicates that the product of origins and destinations exceeds the per-query limit (fixed at 200 elts/q).\n  * `MAX_ROUTE_LENGTH_EXCEEDED` indicates that at least one of requested route is too long and the matrix cannot be processed (\u003e500km).\n  * `REQUEST_DENIED` indicates that the service denied use of the Distance API service (e.g. wrong API Key, wrong/no referer, …).\n  * `BACKEND_ERROR` indicates a Distance API request could not be processed due to a server error. This may indicate that the origin and/or destination of this pairing could not be matched to the network. The request may or may not succeed if you try again.\n  * `OVER_QUERY_LIMIT` (associated to a 429 status code) indicates that the number of queries per second (QPS) or the number of elements per second (EPS) exceed the [usage limits](https://developers.woosmap.com/products/distance-api/distance-matrix-endpoint/#usage-limits)\n",
        "enum": [
          "OK",
          "INVALID_REQUEST",
          "MAX_ELEMENTS_EXCEEDED",
          "MAX_ROUTE_LENGTH_EXCEEDED",
          "REQUEST_DENIED",
          "BACKEND_ERROR",
          "OVER_QUERY_LIMIT"
        ],
        "title": "DistanceStatus",
        "type": "string"
      },
      "DistanceStep": {
        "description": "step in a leg",
        "example": {
          "distance": "46 m",
          "duration": "1 min",
          "end_location": {
            "lat": 49.314041,
            "lng": 4.151976
          },
          "polyline": "iu~kHsziXJBJAHGFIDMBSAS",
          "start_location": {
            "lat": 49.314292,
            "lng": 4.151623
          },
          "travel_mode": "DRIVING"
        },
        "properties": {
          "distance": {
            "description": "the distance as text covered by this step until the next step.",
            "example": "2.8 km",
            "type": "string"
          },
          "duration": {
            "description": "the typical time as text required to perform the step, until the next step",
            "example": "5 minutes",
            "type": "string"
          },
          "end_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "instructions": {
            "$ref": "#/components/schemas/DistanceInstructions"
          },
          "polyline": {
            "description": "the polyline representation of the step (encoded with the [poyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)",
            "example": "_igoHa~hYgApBMHOEKO",
            "type": "string"
          },
          "start_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "travel_mode": {
            "description": "the type of travel mode used",
            "example": "driving",
            "type": "string"
          }
        },
        "title": "DistanceStep",
        "type": "object"
      },
      "DistanceValue": {
        "description": "The total distance expressed in meters (value) and as text. The textual value uses the unit system specified with the units parameter of the original request.",
        "example": {
          "text": "2.8 km",
          "value": 2775.1
        },
        "properties": {
          "text": {
            "description": "The readable distance using the unit system specified.",
            "example": "2.8 km",
            "type": "string"
          },
          "value": {
            "description": "The distance in meters.",
            "example": 2775.1,
            "type": "number"
          }
        },
        "title": "DistanceValue",
        "type": "object"
      },
      "Duration": {
        "properties": {
          "text": {
            "description": "Duration as text based response with unit type",
            "title": "Text",
            "type": "string"
          },
          "value": {
            "description": "Duration in seconds",
            "title": "Value",
            "type": "number"
          }
        },
        "required": [
          "value",
          "text"
        ],
        "title": "Duration",
        "type": "object"
      },
      "DurationValue": {
        "description": "The total duration to travel this route/leg, expressed in seconds (value) and as text. The textual value gives a structured string for duration in the specified language (if available).",
        "example": {
          "text": "5 mins",
          "value": 272.5
        },
        "properties": {
          "text": {
            "description": "The readable duration value",
            "example": "5 mins",
            "type": "string"
          },
          "value": {
            "description": "The duration in seconds",
            "example": 272.5,
            "type": "number"
          }
        },
        "title": "DurationValue",
        "type": "object"
      },
      "EncodedPolyline": {
        "description": "The polyline of the route (encoded with the [poyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)).",
        "example": {
          "points": "a_jyHfol@aAfEzGlIfER~JqV_KqLu@pDiHv@bAfEeCfE"
        },
        "properties": {
          "points": {
            "description": "The encoded string value for points of the polyline",
            "example": "a_jyHfol@aAfEzGlIfER~JqV_KqLu@pDiHv@bAfEeCfE",
            "type": "string"
          }
        },
        "title": "EncodedPolyline",
        "type": "object"
      },
      "Error400": {
        "description": "The request is invalid",
        "properties": {
          "status": {
            "description": "the status of the 400 response",
            "example": "error",
            "type": "string"
          },
          "value": {
            "description": "the value of request causing the Error",
            "example": "The request is invalid, the data is not a valid JSON.",
            "type": "string"
          }
        },
        "title": "Error400",
        "type": "object"
      },
      "Error401": {
        "description": "Authentication credentials are incorrect",
        "properties": {
          "detail": {
            "description": "Details for the credentials error",
            "example": "Incorrect authentication credentials. Please check or use a valid API Key",
            "type": "string"
          }
        },
        "title": "Error401",
        "type": "object"
      },
      "Error403": {
        "description": "API Request is authenticated but API Key don't have permission to access the resources",
        "properties": {
          "detail": {
            "description": "Details for the forbidden error message",
            "example": "This Woosmap API is not enabled for this project.",
            "type": "string"
          }
        },
        "title": "Error403",
        "type": "object"
      },
      "Error429": {
        "description": "Over Query Limit. Check the API Documentation for available QPS.",
        "properties": {
          "detail": {
            "description": "Details for the Over Query Limit error message",
            "example": "The rate limit for this endpoint has been exceeded",
            "type": "string"
          }
        },
        "title": "Error429",
        "type": "object"
      },
      "ErrorResponseSchema": {
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "required": [
          "detail"
        ],
        "title": "ErrorResponseSchema",
        "type": "object"
      },
      "FormattedAddress": {
        "description": "Contains the readable text description of the result.",
        "example": "London, England, United Kingdom",
        "title": "FormattedAddress",
        "type": "string"
      },
      "GeoJsonCoordinatesResponse": {
        "example": {
          "features": [
            {
              "bbox": [
                2.294494,
                48.85829,
                2.294535,
                48.858317
              ],
              "geometry": {
                "coordinates": [
                  2.294514,
                  48.858304
                ],
                "type": "Point"
              },
              "properties": {
                "country": "FR",
                "language": "en",
                "map": "https://w3w.co/couch.spotted.amended",
                "nearestPlace": "Paris",
                "words": "couch.spotted.amended"
              },
              "type": "Feature"
            }
          ],
          "type": "FeatureCollection"
        },
        "properties": {
          "features": {
            "description": "GeoJSON Features",
            "items": {
              "$ref": "#/components/schemas/GeoJsonFeature"
            },
            "title": "Features",
            "type": "array"
          },
          "type": {
            "description": "GeoJSON Type",
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "features",
          "type"
        ],
        "title": "GeoJsonCoordinatesResponse",
        "type": "object"
      },
      "GeoJsonFeature": {
        "properties": {
          "bbox": {
            "description": "Bounding Box",
            "items": {
              "type": "number"
            },
            "maxItems": 4,
            "minItems": 4,
            "title": "Bbox",
            "type": "array"
          },
          "geometry": {
            "description": "Geometry",
            "title": "Geometry",
            "type": "object"
          },
          "properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Properties"
              }
            ],
            "description": "Feature Properties"
          },
          "type": {
            "description": "GeoJSON type",
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "bbox",
          "geometry",
          "type",
          "properties"
        ],
        "title": "GeoJsonFeature",
        "type": "object"
      },
      "GeoJsonPoint": {
        "description": "GeoJSon Point Geometry",
        "example": {
          "coordinates": [
            -0.14408,
            51.5088
          ],
          "type": "Point"
        },
        "properties": {
          "coordinates": {
            "$ref": "#/components/schemas/LatLngArrayString"
          },
          "type": {
            "description": "the geometry type",
            "enum": [
              "Point"
            ],
            "type": "string"
          }
        },
        "title": "GeoJsonPoint",
        "type": "object"
      },
      "GeolocationResponse": {
        "description": "A successful geolocation request will return a JSON-formatted response defining a location and radius.",
        "example": {
          "accuracy": 5,
          "city": "Alexandria",
          "continent": "North America",
          "country_code": "US",
          "country_name": "United States",
          "latitude": 38.7304,
          "longitude": -77.0634,
          "postal_code": "22308",
          "region_state": "Virginia",
          "timezone": "America/New_York",
          "viewport": {
            "northeast": {
              "lat": 38.77531576420598,
              "lng": -77.00582296106178
            },
            "southwest": {
              "lat": 38.68548423579403,
              "lng": -77.12097703893822
            }
          }
        },
        "properties": {
          "accuracy": {
            "description": "The accuracy of the estimated location, in meters. This represents the radius of a circle around the given `location` where the IP address is likely to be. If your Geolocation response shows a low value in the `accuracy` field (\u003c=50), the IP has strong chance to be correctly located.",
            "example": 5,
            "type": "number"
          },
          "city": {
            "description": "City name when available",
            "example": "Alexandria",
            "type": "string"
          },
          "continent": {
            "description": "Continent name",
            "example": "North America",
            "type": "string"
          },
          "country_code": {
            "description": "ISO 3166-1 Alpha-2 compatible country code",
            "example": "US",
            "nullable": true,
            "type": "string"
          },
          "country_name": {
            "description": "Country name",
            "example": "United States",
            "type": "string"
          },
          "latitude": {
            "description": "Approximate latitude of the geographical area associated with the IP address",
            "example": 38.719,
            "type": "number"
          },
          "longitude": {
            "description": "Approximate longitude of the geographical area associated with the IP address",
            "example": -77.1067,
            "type": "number"
          },
          "postal_code": {
            "description": "A postal code close to the user's location, when available",
            "example": "22309",
            "type": "string"
          },
          "region_state": {
            "description": "Region name when available",
            "example": "Virginia",
            "type": "string"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          }
        },
        "title": "GeolocationResponse",
        "type": "object"
      },
      "GeolocationStoresResponse": {
        "description": "JSON-formatted response defining a location, radius, and stores if accuracy of geocoded IP is 20km or less.",
        "example": {
          "accuracy": 5,
          "city": "Alexandria",
          "continent": "North America",
          "country_code": "US",
          "country_name": "United States",
          "latitude": 38.7304,
          "longitude": -77.0634,
          "postal_code": "22308",
          "region_state": "Virginia",
          "stores": {
            "features": [
              {
                "geometry": {
                  "coordinates": [
                    -77.1067,
                    38.719
                  ],
                  "type": "Point"
                },
                "properties": {
                  "address": {
                    "city": "London",
                    "country_code": "UK",
                    "lines": [
                      "Building Centre",
                      "26 Store Street"
                    ],
                    "zipcode": "WC1E 7BT"
                  },
                  "contact": {
                    "email": "contact@woosmap.com",
                    "phone": "+44 20 7693 4000",
                    "website": "https://www.woosmap.com"
                  },
                  "distance": 3972.39013285,
                  "last_updated": "2023-03-03T09:06:24.421371+00:00",
                  "name": "My Cool Store",
                  "open": {
                    "current_slice": {
                      "end": "22:00",
                      "start": "08:30"
                    },
                    "open_hours": [
                      {
                        "end": "22:00",
                        "start": "08:30"
                      }
                    ],
                    "open_now": true,
                    "week_day": 5
                  },
                  "opening_hours": {
                    "special": {
                      "2015-02-07": [
                        {
                          "end": "23:00",
                          "start": "08:00"
                        }
                      ]
                    },
                    "timezone": "Europe/London",
                    "usual": {
                      "1": [],
                      "default": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ]
                    }
                  },
                  "store_id": "STORE_ID_123456",
                  "tags": [
                    "wifi",
                    "covered_parking"
                  ],
                  "types": [
                    "drive",
                    "click_and_collect"
                  ],
                  "user_properties": {
                    "some_user_properties": "associated user value"
                  },
                  "weekly_opening": {
                    "1": {
                      "hours": [],
                      "isSpecial": false
                    },
                    "2": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "3": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "4": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "5": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "6": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "7": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "timezone": "Europe/London"
                  }
                },
                "type": "Feature"
              }
            ],
            "pagination": {
              "page": 1,
              "pageCount": 2
            },
            "type": "FeatureCollection"
          },
          "timezone": "America/New_York",
          "viewport": {
            "northeast": {
              "lat": 38.77531576420598,
              "lng": -77.00582296106178
            },
            "southwest": {
              "lat": 38.68548423579403,
              "lng": -77.12097703893822
            }
          }
        },
        "properties": {
          "accuracy": {
            "description": "The accuracy of the estimated location, in meters. This represents the radius of a circle around the given `location` where the IP address is likely to be. If your Geolocation response shows a low value in the `accuracy` field (\u003c=50), the IP has strong chance to be correctly located.",
            "example": 5,
            "type": "number"
          },
          "city": {
            "description": "City name when available",
            "example": "Alexandria",
            "type": "string"
          },
          "continent": {
            "description": "Continent name",
            "example": "North America",
            "type": "string"
          },
          "country_code": {
            "description": "ISO 3166-1 Alpha-2 compatible country code",
            "example": "US",
            "nullable": true,
            "type": "string"
          },
          "country_name": {
            "description": "Country name",
            "example": "United States",
            "type": "string"
          },
          "latitude": {
            "description": "Approximate latitude of the geographical area associated with the IP address",
            "example": 38.719,
            "type": "number"
          },
          "longitude": {
            "description": "Approximate longitude of the geographical area associated with the IP address",
            "example": -77.1067,
            "type": "number"
          },
          "postal_code": {
            "description": "A postal code close to the user's location, when available",
            "example": "22309",
            "type": "string"
          },
          "region_state": {
            "description": "Region name when available",
            "example": "Virginia",
            "type": "string"
          },
          "stores": {
            "$ref": "#/components/schemas/AssetFeatureCollectionResponse"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          }
        },
        "title": "GeolocationStoresResponse",
        "type": "object"
      },
      "GeometryCollection": {
        "description": "GeometryCollection Model",
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox"
          },
          "geometries": {
            "items": {
              "discriminator": {
                "mapping": {
                  "GeometryCollection": "#/components/schemas/GeometryCollection",
                  "LineString": "#/components/schemas/LineString",
                  "MultiLineString": "#/components/schemas/MultiLineString",
                  "MultiPoint": "#/components/schemas/MultiPoint",
                  "MultiPolygon": "#/components/schemas/MultiPolygon",
                  "Point": "#/components/schemas/Point",
                  "Polygon": "#/components/schemas/Polygon"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Point"
                },
                {
                  "$ref": "#/components/schemas/MultiPoint"
                },
                {
                  "$ref": "#/components/schemas/LineString"
                },
                {
                  "$ref": "#/components/schemas/MultiLineString"
                },
                {
                  "$ref": "#/components/schemas/Polygon"
                },
                {
                  "$ref": "#/components/schemas/MultiPolygon"
                },
                {
                  "$ref": "#/components/schemas/GeometryCollection"
                }
              ]
            },
            "title": "Geometries",
            "type": "array"
          },
          "type": {
            "const": "GeometryCollection",
            "title": "Type"
          }
        },
        "required": [
          "type",
          "geometries"
        ],
        "title": "GeometryCollection",
        "type": "object"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "IndoorFeatureSchema": {
        "properties": {
          "distance": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Distance"
          },
          "duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration"
          },
          "geometry": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "GeometryCollection": "#/components/schemas/GeometryCollection",
                    "LineString": "#/components/schemas/LineString",
                    "MultiLineString": "#/components/schemas/MultiLineString",
                    "MultiPoint": "#/components/schemas/MultiPoint",
                    "MultiPolygon": "#/components/schemas/MultiPolygon",
                    "Point": "#/components/schemas/Point",
                    "Polygon": "#/components/schemas/Polygon"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Point"
                  },
                  {
                    "$ref": "#/components/schemas/MultiPoint"
                  },
                  {
                    "$ref": "#/components/schemas/LineString"
                  },
                  {
                    "$ref": "#/components/schemas/MultiLineString"
                  },
                  {
                    "$ref": "#/components/schemas/Polygon"
                  },
                  {
                    "$ref": "#/components/schemas/MultiPolygon"
                  },
                  {
                    "$ref": "#/components/schemas/GeometryCollection"
                  }
                ]
              },
              {
                "$ref": "#/components/schemas/GeometryCollection"
              }
            ],
            "description": "GeoJSON Geometry or Geometry Collection",
            "title": "Geometry"
          },
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "properties": {
            "description": "Additional properties associated with this feature",
            "title": "Properties",
            "type": "object"
          },
          "type": {
            "const": "Feature",
            "default": "Feature",
            "title": "Type"
          }
        },
        "required": [
          "properties",
          "geometry"
        ],
        "title": "IndoorFeatureSchema",
        "type": "object"
      },
      "Instruction": {
        "properties": {
          "instruction_type": {
            "title": "Instruction Type",
            "type": "string"
          },
          "summary": {
            "title": "Summary",
            "type": "string"
          }
        },
        "required": [
          "summary",
          "instruction_type"
        ],
        "title": "Instruction",
        "type": "object"
      },
      "JsonCoordinatesResponse": {
        "example": {
          "coordinates": {
            "lat": 48.858304,
            "lng": 2.294514
          },
          "country": "FR",
          "language": "en",
          "map": "https://w3w.co/couch.spotted.amended",
          "nearestPlace": "Paris",
          "square": {
            "northeast": {
              "lat": 48.858317,
              "lng": 2.294535
            },
            "southwest": {
              "lat": 48.85829,
              "lng": 2.294494
            }
          },
          "words": "couch.spotted.amended"
        },
        "properties": {
          "coordinates": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coordinates"
              }
            ],
            "description": "Lat Lng coordinate"
          },
          "country": {
            "description": "Country Code",
            "title": "Country",
            "type": "string"
          },
          "language": {
            "description": "Language Code",
            "title": "Language",
            "type": "string"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Language Locale",
            "title": "Locale"
          },
          "map": {
            "description": "Link to what3words address on a map",
            "title": "Map",
            "type": "string"
          },
          "nearestPlace": {
            "description": "Nearest Place",
            "title": "Nearestplace",
            "type": "string"
          },
          "square": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Square"
              }
            ],
            "description": "Lat Lng coordinate Square"
          },
          "words": {
            "description": "The what3words address",
            "title": "Words",
            "type": "string"
          }
        },
        "required": [
          "country",
          "nearestPlace",
          "words",
          "language",
          "map",
          "square",
          "coordinates"
        ],
        "title": "JsonCoordinatesResponse",
        "type": "object"
      },
      "LatLngArrayString": {
        "description": "An array of comma separated {latitude,longitude} strings.",
        "example": [
          43.4,
          -2.1
        ],
        "items": {
          "type": "number"
        },
        "maxItems": 2,
        "minItems": 2,
        "title": "LatLngArrayString",
        "type": "array"
      },
      "LatLngLevel": {
        "properties": {
          "lat": {
            "title": "Lat",
            "type": "number"
          },
          "level": {
            "title": "Level",
            "type": "integer"
          },
          "lng": {
            "title": "Lng",
            "type": "number"
          }
        },
        "required": [
          "lat",
          "lng",
          "level"
        ],
        "title": "LatLngLevel",
        "type": "object"
      },
      "LatLngLiteral": {
        "description": "An object describing a specific location with Latitude and Longitude in decimal degrees.",
        "example": {
          "lat": 43.3,
          "lng": 3.46
        },
        "properties": {
          "lat": {
            "description": "Latitude in decimal degrees",
            "example": 42.3,
            "type": "number"
          },
          "lng": {
            "description": "Longitude in decimal degrees",
            "example": 3.46,
            "type": "number"
          }
        },
        "required": [
          "lat",
          "lng"
        ],
        "title": "LatLngLiteral",
        "type": "object"
      },
      "Leg": {
        "properties": {
          "distance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Distance"
              }
            ],
            "description": "Distance of this Leg"
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ],
            "description": "Duration of this Leg"
          },
          "end_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LatLngLevel"
              }
            ],
            "description": "End Location of this Leg, as a Lat,Lng pair with a floor level number."
          },
          "start_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LatLngLevel"
              }
            ],
            "description": "Starting Location of this Leg, as a Lat,Lng pair with a floor level number."
          },
          "steps": {
            "description": "List of different steps of this Leg",
            "items": {
              "$ref": "#/components/schemas/Step"
            },
            "title": "Steps",
            "type": "array"
          }
        },
        "required": [
          "distance",
          "duration",
          "start_location",
          "end_location",
          "steps"
        ],
        "title": "Leg",
        "type": "object"
      },
      "Level": {
        "properties": {
          "bbox": {
            "description": "Bounding Box of floor level",
            "items": {
              "type": "number"
            },
            "title": "Bbox",
            "type": "array"
          },
          "level": {
            "description": "Floor level as a number",
            "title": "Level",
            "type": "integer"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the floor level",
            "title": "Name"
          },
          "ref": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Reference to identify floor level",
            "title": "Ref"
          }
        },
        "required": [
          "level",
          "bbox"
        ],
        "title": "Level",
        "type": "object"
      },
      "LineString": {
        "description": "LineString Model",
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox"
          },
          "coordinates": {
            "items": {
              "anyOf": [
                {
                  "maxItems": 2,
                  "minItems": 2,
                  "prefixItems": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "type": "array"
                },
                {
                  "maxItems": 3,
                  "minItems": 3,
                  "prefixItems": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "type": "array"
                }
              ]
            },
            "minItems": 2,
            "title": "Coordinates",
            "type": "array"
          },
          "type": {
            "const": "LineString",
            "title": "Type"
          }
        },
        "required": [
          "type",
          "coordinates"
        ],
        "title": "LineString",
        "type": "object"
      },
      "LiteAddressResponse": {
        "example": {
          "results": [
            {
              "description": "Radway House, Alfred Road, London, W2 5ER",
              "public_id": "",
              "status": null,
              "sub_buildings": [
                {
                  "description": "Flat 1, Radway House, Alfred Road, London, W2 5ER",
                  "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9faitia1pNNURnOWYvQmRjMUdweXl5SjdLZUZnPQ=="
                },
                {
                  "description": "Flat 2, Radway House, Alfred Road, London, W2 5ER",
                  "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fbTRoZVpxYkhBYVVXSytqek04UGtGQ1VLTVI0PQ=="
                }
              ],
              "types": [
                "address"
              ]
            },
            {
              "description": "Astley House, Alfred Road, London, W2 5EX",
              "public_id": "",
              "status": "not_yet_built",
              "sub_buildings": [
                {
                  "description": "Flat 1, Astley House, Alfred Road, London, W2 5EX",
                  "public_id": "N3VCclhUODduWjJxd2NCSUdFclJ6SnRseGxrPV9fSTBKM1YxOFBBWEJjRVNKb1J0T3hNTFNiLzhFPQ=="
                },
                {
                  "description": "Flat 2, Astley House, Alfred Road, London, W2 5EX",
                  "public_id": "N3VCclhUODduWjJxd2NCSUdFclJ6SnRseGxrPV9fN3VCclhUODduWjJxd2NCSUdFclJ6SnRseGxrPQ=="
                }
              ],
              "types": [
                "address"
              ]
            },
            {
              "description": "65 Alfred Road, London, W2 5EU",
              "public_id": "",
              "status": null,
              "sub_buildings": [
                {
                  "description": "Blaiz Ltd, 65 Alfred Road, London, W2 5EU",
                  "public_id": "MUVBZWttTlo4OUYxL2dQWmJteDdFV2VidmVvPV9fMUVBZWttTlo4OUYxL2dQWmJteDdFV2VidmVvPQ=="
                },
                {
                  "description": "Carnot Ltd, 65 Alfred Road, London, W2 5EU",
                  "public_id": "MUVBZWttTlo4OUYxL2dQWmJteDdFV2VidmVvPV9fRDRPb0VLd0UvNEZYMlpLR21EMC9xRGQvMUZJPQ=="
                }
              ],
              "types": [
                "address"
              ]
            }
          ]
        },
        "properties": {
          "results": {
            "description": "Results",
            "items": {
              "$ref": "#/components/schemas/LiteAddressResult"
            },
            "title": "Results",
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "title": "LiteAddressResponse",
        "type": "object"
      },
      "LiteAddressResult": {
        "properties": {
          "description": {
            "description": "Human readable address",
            "title": "Description",
            "type": "string"
          },
          "public_id": {
            "description": "Public ID of the POI",
            "title": "Public Id",
            "type": "string"
          },
          "status": {
            "anyOf": [
              {
                "const": "not_yet_built"
              },
              {
                "type": "null"
              }
            ],
            "description": "Address Status",
            "title": "Status"
          },
          "sub_buildings": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AddressSummary"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "list of specific addresses at that location",
            "title": "Sub Buildings"
          },
          "types": {
            "description": "Address Types",
            "items": {
              "enum": [
                "address",
                "route",
                "locality",
                "postal_code"
              ],
              "type": "string"
            },
            "title": "Types",
            "type": "array"
          }
        },
        "required": [
          "types",
          "description",
          "public_id"
        ],
        "title": "LiteAddressResult",
        "type": "object"
      },
      "LocalitiesAddressGeometry": {
        "description": "The location of the result, in latitude and longitude. Accuracy is also provided.",
        "example": {
          "location": {
            "lat": 48.829405,
            "lng": 2.367944
          },
          "location_type": "GEOMETRIC_CENTER"
        },
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "location_type": {
            "description": "Specifies additional data about the geocoded location. The following values are currently supported: \n  - `ROOFTOP` result is a precise geocode for which we have location information accurate down to street address precision.\n  - `RANGE_INTERPOLATED` result reflects an approximation (usually on a road) interpolated between two precise points (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n  - `GEOMETRIC_CENTER` result is the geometric center of a result such as a polyline (for example, a street) or polygon (city, region, …).\n  - `APPROXIMATE` result is approximate (usually when no other above value applies)\n  - `POSTAL_CODE` Address has inherited from the location of the postal code it is part of (for NYB addresses)\n  - `DISTRICT` Address has inherited from the location of the district it is part of (for NYB addresses)\n",
            "enum": [
              "ROOFTOP",
              "RANGE_INTERPOLATED",
              "GEOMETRIC_CENTER",
              "APPROXIMATE",
              "POSTAL_CODE",
              "DISTRICT"
            ],
            "type": "string"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          }
        },
        "title": "LocalitiesAddressGeometry",
        "type": "object"
      },
      "LocalitiesAddressSummary": {
        "description": "A short description of an address",
        "example": {
          "description": "Flat 1, Radway House, Alfred Road, London, W2 5ER",
          "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9faitia1pNNURnOWYvQmRjMUdweXl5SjdLZUZnPQ=="
        },
        "properties": {
          "description": {
            "description": "A human readable description of the address",
            "example": "Flat 1, Radway House, Alfred Road, London, W2 5ER",
            "type": "string"
          },
          "public_id": {
            "description": "The public_id of the address can be used to gather details on that specific address",
            "example": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9faitia1pNNURnOWYvQmRjMUdweXl5SjdLZUZnPQ==",
            "type": "string"
          }
        },
        "required": [
          "public_id",
          "description"
        ],
        "title": "LocalitiesAddressSummary",
        "type": "object"
      },
      "LocalitiesAutocompleteCollectionResponse": {
        "description": "Localities Collection Response containing Localities",
        "example": {
          "localities": [
            {
              "description": "London, City of London, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "length": 4,
                    "offset": 0
                  },
                  {
                    "length": 4,
                    "offset": 16
                  }
                ]
              },
              "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
              "type": "locality"
            },
            {
              "description": "Londonderry/Derry, Derry City and Strabane, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "length": 4,
                    "offset": 0
                  }
                ]
              },
              "public_id": "m/T2C4YI2LgszkKXrELBC+9dfC8=",
              "type": "locality"
            },
            {
              "description": "London Apprentice, Cornwall, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "length": 4,
                    "offset": 0
                  }
                ]
              },
              "public_id": "52MnrbHVWH21CLWH8VY/YWKhqeM=",
              "type": "locality"
            },
            {
              "description": "Londesborough, East Riding of Yorkshire, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "length": 4,
                    "offset": 0
                  }
                ]
              },
              "public_id": "VOBREUi72/VtnsYgE6aI8HNYcxg=",
              "type": "locality"
            },
            {
              "description": "Long Stratton, Norfolk, United Kingdom",
              "public_id": "Js0mQmmeI46X3hiqRj/R4pvb8mQ=",
              "type": "locality"
            }
          ]
        },
        "properties": {
          "localities": {
            "items": {
              "$ref": "#/components/schemas/LocalitiesAutocompleteResponse"
            },
            "type": "array"
          }
        },
        "title": "LocalitiesAutocompleteCollectionResponse",
        "type": "object"
      },
      "LocalitiesAutocompleteMatchedFields": {
        "description": "Contains a set of substrings in the `description` field that match elements in the `input`. It can be used to highlight those substrings. Each substring is identified by an `offset` and a `length`.`",
        "properties": {
          "description": {
            "description": "match substrings for localities `description`",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            },
            "type": "array"
          }
        },
        "title": "LocalitiesAutocompleteMatchedFields",
        "type": "object"
      },
      "LocalitiesAutocompleteRelated": {
        "description": "Contains a set of related elements to the locality suggestion.",
        "properties": {
          "postal_codes": {
            "description": "Postal codes related to the locality suggestion.",
            "properties": {
              "description": {
                "description": "Formated description for the related Postal Code.",
                "type": "string"
              },
              "public_id": {
                "description": "Public ID of a related Postal Code.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "title": "LocalitiesAutocompleteRelated",
        "type": "object"
      },
      "LocalitiesAutocompleteResponse": {
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "example": {
          "description": "London, City of London, United Kingdom",
          "matched_substrings": {
            "description": [
              {
                "length": 6,
                "offset": 0
              },
              {
                "length": 6,
                "offset": 16
              }
            ]
          },
          "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
          "type": "locality"
        },
        "properties": {
          "description": {
            "description": "Concatenation of `name`, `admin_1`, `admin_0` to be used as suggestion in drop down list if needed. The description can vary depending on the type requested.",
            "example": "20121, Milano, Italy",
            "type": "string"
          },
          "has_addresses": {
            "description": "On the specific territory of United Kingdom, Localities autocomplete request can return the additional attribute `has_addresses` for a postal code, which indicates if a postal code bears addresses. When `has_addresses` is `true`, it is possible to display a list of the available addresses by requesting `details` with the Localities `public_id`. To get the details of an address you will need to request again `/details` endpoint passing in the dedicated address `public_id`.\n",
            "example": true,
            "type": "boolean"
          },
          "matched_substrings": {
            "$ref": "#/components/schemas/LocalitiesAutocompleteMatchedFields"
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID if you need to give us feedbacks on results. This ID is also required to perform Localities Details request.",
            "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo=",
            "type": "string"
          },
          "related": {
            "$ref": "#/components/schemas/LocalitiesAutocompleteRelated"
          },
          "type": {
            "$ref": "#/components/schemas/LocalitiesTypes"
          }
        },
        "title": "LocalitiesAutocompleteResponse",
        "type": "object"
      },
      "LocalitiesDetailsAddressResponse": {
        "description": "Attributes describing. Not all attributes will be available for all locality types.",
        "example": {
          "result": {
            "address_components": [
              {
                "long_name": "United Kingdom",
                "short_name": "GB",
                "types": [
                  "country",
                  "administrative_area_level_0"
                ]
              },
              {
                "long_name": "City of London",
                "short_name": "City of London",
                "types": [
                  "administrative_area_level_1"
                ]
              },
              {
                "long_name": "London",
                "short_name": "London",
                "types": [
                  "locality"
                ]
              },
              {
                "long_name": "SW1A 0AA",
                "short_name": "SW1A 0AA",
                "types": [
                  "postal_codes"
                ]
              },
              {
                "long_name": "Houses Of Parliament",
                "short_name": "Houses Of Parliament",
                "types": [
                  "premise"
                ]
              },
              {
                "long_name": "House Of Commons",
                "short_name": "House Of Commons",
                "types": [
                  "organisation"
                ]
              }
            ],
            "formatted_address": "House Of Commons, Houses Of Parliament, London, SW1A 0AA",
            "geometry": {
              "accuracy": "ROOFTOP",
              "location": {
                "lat": 51.4998415,
                "lng": -0.1246375
              }
            },
            "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ==",
            "types": [
              "address"
            ]
          }
        },
        "properties": {
          "result": {
            "description": "The Root Node for Localities Details",
            "properties": {
              "address_components": {
                "$ref": "#/components/schemas/AddressComponents"
              },
              "formatted_address": {
                "$ref": "#/components/schemas/FormattedAddress"
              },
              "geometry": {
                "description": "The location of the result, in latitude and longitude, eventually associated with a Viewport. Accuracy is also provided for locality of type Address.",
                "example": {
                  "accuracy": "ROOFTOP",
                  "location": {
                    "lat": 51.4998415,
                    "lng": -0.1246375
                  }
                },
                "properties": {
                  "accuracy": {
                    "description": "This accuracy represents the type of address returned - `DISTRICT` and `POSTAL_CODE` are for UK only.",
                    "enum": [
                      "ROOFTOP",
                      "ROUTE",
                      "DISTRICT",
                      "POSTAL_CODE"
                    ],
                    "type": "string"
                  },
                  "location": {
                    "$ref": "#/components/schemas/LatLngLiteral"
                  },
                  "viewport": {
                    "$ref": "#/components/schemas/Bounds"
                  }
                },
                "type": "object"
              },
              "public_id": {
                "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
                "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo=",
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/LocalitiesStatus"
              },
              "types": {
                "description": "available localities types",
                "items": {
                  "$ref": "#/components/schemas/LocalitiesTypes"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "title": "LocalitiesDetailsAddressResponse",
        "type": "object"
      },
      "LocalitiesDetailsPostalCodeResponse": {
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "example": {
          "result": {
            "address_components": [
              {
                "long_name": "United Kingdom",
                "short_name": "GB",
                "types": [
                  "country",
                  "administrative_area_level_0"
                ]
              },
              {
                "long_name": "City of London",
                "short_name": "City of London",
                "types": [
                  "administrative_area_level_1"
                ]
              }
            ],
            "addresses": {
              "list": [
                {
                  "description": "House Of Commons, Houses Of Parliament, London, SW1A 0AA",
                  "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ=="
                }
              ],
              "pagination": {
                "address_count": 1,
                "addresses_per_page": 1,
                "page": 1,
                "page_count": 1
              }
            },
            "formatted_address": "SW1A 0AA, City of London",
            "geometry": {
              "location": {
                "lat": 51.49984,
                "lng": -0.124663
              }
            },
            "name": "SW1A 0AA",
            "public_id": "QaCU+fBtigK65ztSrqHqUoUDwZw=",
            "types": [
              "postal_code"
            ]
          }
        },
        "properties": {
          "result": {
            "description": "The Root Node for Localities Details",
            "properties": {
              "address_components": {
                "$ref": "#/components/schemas/AddressComponents"
              },
              "addresses": {
                "description": "UK Only. List of addresses attached to this Postal Code.",
                "properties": {
                  "list": {
                    "description": "List of addresses",
                    "items": {
                      "$ref": "#/components/schemas/LocalitiesAddressSummary"
                    },
                    "type": "array"
                  },
                  "pagination": {
                    "deprecated": true,
                    "description": "The pagination part of the response is deprecated as all the addresses are now automatically returned in the response. It will be turned off at some point. From now on, the pagination will systematically return `page=1`, `pages_count=1`, `addresses_per_page=total addresses count` and `address_count=total addresses count`.",
                    "properties": {
                      "address_count": {
                        "deprecated": true,
                        "description": "the number of available addresses",
                        "type": "integer"
                      },
                      "addresses_per_page": {
                        "deprecated": true,
                        "description": "the number of available addresses per page",
                        "type": "integer"
                      },
                      "page": {
                        "deprecated": true,
                        "description": "the request page",
                        "type": "integer"
                      },
                      "page_count": {
                        "deprecated": true,
                        "description": "the number of available pages",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "formatted_address": {
                "$ref": "#/components/schemas/FormattedAddress"
              },
              "geometry": {
                "description": "The location of the PostalCode, in latitude and longitude, eventually associated with a Viewport.",
                "example": {
                  "location": {
                    "lat": 51.49984,
                    "lng": -0.124663
                  }
                },
                "properties": {
                  "location": {
                    "$ref": "#/components/schemas/LatLngLiteral"
                  },
                  "viewport": {
                    "$ref": "#/components/schemas/Bounds"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "The postal code name",
                "example": "SW1A 0AA",
                "type": "string"
              },
              "public_id": {
                "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
                "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo=",
                "type": "string"
              },
              "types": {
                "description": "available localities types",
                "items": {
                  "$ref": "#/components/schemas/LocalitiesTypes"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "title": "LocalitiesDetailsPostalCodeResponse",
        "type": "object"
      },
      "LocalitiesGeocodeCollectionResponse": {
        "description": "Localities Geocode Collection Response. Contains one or more detailed Localities or Addresses in FR or in the UK, with coordinates (default to one result for reverse geocoding)",
        "example": {
          "results": [
            {
              "address_components": [
                {
                  "long_name": "France",
                  "short_name": "FR",
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ]
                },
                {
                  "long_name": "Paris",
                  "short_name": "Paris",
                  "types": [
                    "locality"
                  ]
                },
                {
                  "long_name": "75013",
                  "short_name": "75013",
                  "types": [
                    "postal_codes"
                  ]
                },
                {
                  "long_name": "Place Jeanne D'Arc",
                  "short_name": "Place Jeanne D'Arc",
                  "types": [
                    "route"
                  ]
                }
              ],
              "formatted_address": "Place Jeanne D'Arc, 75013, Paris",
              "geometry": {
                "location": {
                  "lat": 48.829405,
                  "lng": 2.367944
                },
                "location_type": "GEOMETRIC_CENTER"
              },
              "public_id": "MCtGVFlkLzFNc2lCU3hMQUtxKy9GaXl5K3VNPV9f",
              "types": [
                "route"
              ]
            }
          ]
        },
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/LocalitiesGeocodeResponse"
            },
            "type": "array"
          }
        },
        "title": "LocalitiesGeocodeCollectionResponse",
        "type": "object"
      },
      "LocalitiesGeocodeResponse": {
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "properties": {
          "address_components": {
            "$ref": "#/components/schemas/AddressComponents"
          },
          "distance": {
            "description": "When reverse geocoding, this field represents the distance (in meter) to the requested latlng",
            "example": 5.234,
            "type": "number"
          },
          "formatted_address": {
            "$ref": "#/components/schemas/FormattedAddress"
          },
          "geometry": {
            "$ref": "#/components/schemas/LocalitiesAddressGeometry"
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. `public_id` will be empty for interpolated locations. Please use this ID to give feedbacks on results.",
            "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo=",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/LocalitiesStatus"
          },
          "sub_buildings": {
            "description": "When reverse geocoding with `list_sub_buildings=true`, this field will contain a list of precise addresses that can be found at that location, i.e. all flats within a building.",
            "items": {
              "$ref": "#/components/schemas/LocalitiesAddressSummary"
            },
            "type": "array"
          },
          "types": {
            "description": "An array containing the types of the result",
            "items": {
              "$ref": "#/components/schemas/LocalitiesGeocodeTypes"
            },
            "type": "array"
          }
        },
        "title": "LocalitiesGeocodeResponse",
        "type": "object"
      },
      "LocalitiesGeocodeTypes": {
        "description": "Contains the type of the geocoded suggestion.",
        "enum": [
          "locality",
          "postal_code",
          "route",
          "address"
        ],
        "title": "LocalitiesGeocodeTypes",
        "type": "string"
      },
      "LocalitiesStatus": {
        "description": "This optional field is only available for UK addresses referenced as not yey built by Royal Mail. Only one value yet.",
        "enum": [
          "not_yet_built"
        ],
        "title": "LocalitiesStatus",
        "type": "string"
      },
      "LocalitiesTypes": {
        "description": "Contains the type of the localities suggestion.",
        "enum": [
          "locality",
          "postal_code",
          "admin_level",
          "airport",
          "train_station",
          "metro_station",
          "shopping",
          "museum",
          "zoo",
          "amusement_park",
          "art_gallery",
          "tourist_attraction",
          "country",
          "address",
          "route"
        ],
        "title": "LocalitiesTypes",
        "type": "string"
      },
      "MatchedSubstring": {
        "example": {
          "length": 4,
          "offset": 0
        },
        "properties": {
          "length": {
            "description": "Length of the matched substring in the prediction result text.",
            "type": "number"
          },
          "offset": {
            "description": "Start location of the matched substring in the prediction result text.",
            "type": "number"
          }
        },
        "title": "MatchedSubstring",
        "type": "object"
      },
      "MerchantsBrandClean": {
        "description": "Attributes describing each Merchant Brand cleaned",
        "properties": {
          "clean_name": {
            "description": "a clean name for the above merchant.",
            "example": "Apple",
            "type": "string"
          },
          "country": {
            "description": "The merchant’s country.",
            "example": "IE",
            "type": "string"
          },
          "custom_id": {
            "description": "Provided in request and returned if specified.",
            "example": "mobile app transaction",
            "type": "string"
          },
          "dirty_name": {
            "description": "The dirty name is the unique merchant identifier which is provided on transactions by a payment provider.",
            "example": "APPLE.COM/BILL",
            "type": "string"
          },
          "logo": {
            "description": "This is a hash generated for the logo based on the image.",
            "example": "5eb75a5239b76287f44021f8e6e1bd41",
            "type": "string"
          },
          "logo_url": {
            "description": "The logo image with content-type `image/png`.",
            "example": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
            "type": "string"
          },
          "status": {
            "description": "Status Code for Logo.\n  * OK when there is a clean name or a clean name and a logo.\n  * NOT_FOUND when there is no clean name or clean name and logo for the specified dirty merchant.\n",
            "enum": [
              "OK",
              "NOT_FOUND"
            ],
            "example": "OK"
          }
        },
        "title": "MerchantsBrandClean",
        "type": "object"
      },
      "MerchantsBrandDirty": {
        "description": "Attributes describing each Merchant Brand in dirty transaction",
        "properties": {
          "country": {
            "description": "The country field is not mandatory but strongly suggested in order to refine and be able to differentiate logos from one country to another. The API accepts ISO-3166-1-alpha2 country codes only.",
            "example": "IE",
            "type": "string"
          },
          "custom_id": {
            "description": "This optional field allows integrators to send a value of their choosing and receive it in the body of the response.",
            "example": "mobile app transaction",
            "type": "string"
          },
          "description": {
            "description": "The description is provided to you by the payment provider and is the transaction description attached to any payment.",
            "example": "APPLE.COM/BILL ITUNES.COM IE WEB 2232445* BR11",
            "type": "string"
          },
          "dirty_name": {
            "description": "The dirty name is the unique merchant identifier which is provided on transactions by a payment provider.",
            "example": "APPLE.COM/BILL",
            "type": "string"
          }
        },
        "required": [
          "dirty_name"
        ],
        "title": "MerchantsBrandDirty",
        "type": "object"
      },
      "MerchantsBrandRequest": {
        "description": "Attributes describing a Merchant Brand request",
        "example": {
          "merchants": [
            {
              "country": "GB",
              "dirty_name": "MCDO UK 2231 EP"
            },
            {
              "country": "IT",
              "dirty_name": "Zara Fashion Retail, S.A."
            },
            {
              "country": "IN",
              "dirty_name": "APOLLO PHARMACY BANGALORE IN"
            },
            {
              "dirty_name": "PIZZA HUT - SHOP 157"
            },
            {
              "country": "FR",
              "dirty_name": "CARREFOUR CITY 3112846"
            },
            {
              "country": "IE",
              "dirty_name": "ITUNES.COM/BILL"
            },
            {
              "country": "ES",
              "dirty_name": "Pepa SL Gracia"
            }
          ]
        },
        "properties": {
          "merchants": {
            "description": "The list of dirty transactions to clean",
            "items": {
              "$ref": "#/components/schemas/MerchantsBrandDirty"
            },
            "type": "array"
          }
        },
        "required": [
          "merchants"
        ],
        "title": "MerchantsBrandRequest",
        "type": "object"
      },
      "MerchantsBrandResponse": {
        "description": "Attributes describing a Merchant Brand response",
        "example": {
          "merchants": [
            {
              "clean_name": "Apple",
              "country": "",
              "dirty_name": "APPLE.COM%2FBILL",
              "logo": "a0e920d9f5de2e17d7a9c38a65ca6943",
              "logo_url": "https://api.woosmap.com/merchants/logos/a0e920d9f5de2e17d7a9c38a65ca6943.png",
              "status": "OK"
            }
          ]
        },
        "properties": {
          "merchants": {
            "description": "The list of cleaned transactions (only one element is returned when using GET method)",
            "items": {
              "$ref": "#/components/schemas/MerchantsBrandClean"
            },
            "type": "array"
          }
        },
        "title": "MerchantsBrandResponse",
        "type": "object"
      },
      "MerchantsPlaceClean": {
        "description": "Attributes describing each Merchant Brand cleaned",
        "properties": {
          "clean_name": {
            "description": "a clean name for the above merchant.",
            "example": "Apple",
            "type": "string"
          },
          "country": {
            "description": "The merchant’s country.",
            "example": "IE",
            "type": "string"
          },
          "custom_id": {
            "description": "Provided in request and returned if specified.",
            "example": "mobile app transaction",
            "type": "string"
          },
          "dirty_name": {
            "description": "The dirty name is the unique merchant identifier which is provided on transactions by a payment provider.",
            "example": "APPLE.COM/BILL",
            "type": "string"
          },
          "logo": {
            "description": "This is a hash generated for the logo based on the image.",
            "example": "5eb75a5239b76287f44021f8e6e1bd41",
            "type": "string"
          },
          "logo_url": {
            "description": "The logo image with content-type `image/png`.",
            "example": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
            "type": "string"
          },
          "merchant_id": {
            "description": "Textual identifier for Merchant",
            "example": "1070060999900835",
            "type": "string"
          },
          "place_id": {
            "description": "The [Google Maps Place ID](https://developers.google.com/maps/documentation/places/web-service/place-id)",
            "example": "ChIJgUbEo8cfqokR5lP9_Wh_DaM",
            "type": "string"
          },
          "status": {
            "description": "Status Code for Logo.\n  * OK when there is a clean name or a clean name and a logo.\n  * NOT_FOUND when there is no clean name or clean name and logo for the specified dirty merchant.\n",
            "enum": [
              "OK",
              "NOT_FOUND"
            ],
            "example": "OK"
          }
        },
        "title": "MerchantsPlaceClean",
        "type": "object"
      },
      "MerchantsPlaceDirty": {
        "description": "Attributes describing each Merchant Brand to get the Place.",
        "properties": {
          "city": {
            "description": "The merchant’s city.",
            "example": "Cork",
            "type": "string"
          },
          "country": {
            "description": "The country field is not mandatory but strongly suggested in order to refine and be able to differentiate logos from one country to another. The API accepts ISO-3166-1-alpha2 country codes only.",
            "example": "IE",
            "type": "string"
          },
          "custom_id": {
            "description": "This optional field allows integrators to send a value of their choosing and receive it in the body of the response.",
            "example": "mobile app transaction",
            "type": "string"
          },
          "description": {
            "description": "The description is provided to you by the payment provider and is the transaction description attached to any payment.",
            "example": "APPLE.COM/BILL ITUNES.COM IE WEB 2232445* BR11",
            "type": "string"
          },
          "dirty_name": {
            "description": "The dirty name is the unique merchant identifier which is provided on transactions by a payment provider.",
            "example": "APPLE.COM/BILL",
            "type": "string"
          },
          "merchant_id": {
            "description": "Textual identifier for Merchant",
            "example": "1070060999900835",
            "type": "string"
          },
          "position": {
            "description": "The geographic coordinates where the transaction occurred. Sending in a position will significantly increase the possibility of finding a Place ID.\n",
            "example": {
              "lat": 41.3,
              "lng": -2.46
            },
            "properties": {
              "lat": {
                "description": "Latitude where the transaction occurred.",
                "example": 41.3,
                "type": "number"
              },
              "lng": {
                "description": "Longitude where the transaction occurred.",
                "example": -2.46,
                "type": "number"
              }
            },
            "type": "object"
          },
          "state": {
            "description": "The merchant’s state.",
            "example": "Munster",
            "type": "string"
          },
          "street": {
            "description": "The merchant’s street, typically found in the raw transaction.",
            "example": "Hollyhill Ln, Hollyhill Industrial Estate",
            "type": "string"
          },
          "zipcode": {
            "description": "The merchant’s zipcode.",
            "example": "T23 YK84",
            "type": "string"
          }
        },
        "required": [
          "dirty_name",
          "merchant_id",
          "country"
        ],
        "title": "MerchantsPlaceDirty",
        "type": "object"
      },
      "MerchantsPlaceRequest": {
        "description": "Attributes describing a Merchant Place request",
        "example": {
          "merchants": [
            {
              "country": "GB",
              "dirty_name": "MCDO UK 2231 EP",
              "merchant_id": "234482729011"
            },
            {
              "country": "IT",
              "dirty_name": "Zara Fashion Retail, S.A.",
              "merchant_id": "*44532UY2T33219"
            },
            {
              "country": "FR",
              "dirty_name": "CARREFOUR CITY 3112846",
              "merchant_id": "9651781125"
            },
            {
              "country": "IE",
              "dirty_name": "ITUNES.COM/BILL",
              "merchant_id": "2070070200925"
            },
            {
              "country": "ES",
              "dirty_name": "Pepa SL Gracia",
              "merchant_id": "34J21189"
            }
          ]
        },
        "properties": {
          "merchants": {
            "description": "The list of dirty transactions to clean",
            "items": {
              "$ref": "#/components/schemas/MerchantsPlaceDirty"
            },
            "type": "array"
          }
        },
        "required": [
          "merchants"
        ],
        "title": "MerchantsPlaceRequest",
        "type": "object"
      },
      "MerchantsPlaceResponse": {
        "description": "Attributes describing a Merchant Place Response",
        "example": {
          "merchants": [
            {
              "clean_name": "McDonald's",
              "country": "GB",
              "dirty_name": "MCDO UK 2231 EP",
              "logo": "419b279b6609768a3106ce5a5b4dd70b",
              "logo_url": "https://api.woosmap.com/merchants/logos/419b279b6609768a3106ce5a5b4dd70b.png",
              "merchant_id": "234482729011",
              "place_id": "ChIJGS7Sga0cdkgR46nd-S661TM",
              "status": "OK"
            },
            {
              "clean_name": "Zara",
              "country": "IT",
              "dirty_name": "Zara Fashion Retail, S.A.",
              "logo": "72fc39033e0d9e923a0236cb874c9309",
              "logo_url": "https://api.woosmap.com/merchants/logos/72fc39033e0d9e923a0236cb874c9309.png",
              "merchant_id": "*44532UY2T33219",
              "place_id": "ChIJF2vQecLGhkcR83Zbpwpej3I",
              "status": "OK"
            },
            {
              "clean_name": "Carrefour City",
              "country": "FR",
              "dirty_name": "CARREFOUR CITY 3112846",
              "logo": "08ee8a3cecbcd3b7d9103bcf0e04db7e",
              "logo_url": "https://api.woosmap.com/merchants/logos/08ee8a3cecbcd3b7d9103bcf0e04db7e.png",
              "merchant_id": "9651781125",
              "place_id": "ChIJJ7ZEZDUnVQ0Ru5gudUqdvKM",
              "status": "OK"
            },
            {
              "clean_name": "Apple",
              "country": "IE",
              "dirty_name": "ITUNES.COM/BILL",
              "logo": "5eb75a5239b76287f44021f8e6e1bd41",
              "logo_url": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
              "merchant_id": "2070070200925",
              "place_id": "",
              "status": "OK"
            },
            {
              "clean_name": "",
              "country": "ES",
              "dirty_name": "Pepa SL Gracia",
              "logo": "",
              "logo_url": "",
              "merchant_id": "34J21189",
              "place_id": "ChIJZ9fQvb2ipBIRyaZy8wUqRGQ",
              "status": "OK"
            }
          ]
        },
        "properties": {
          "merchants": {
            "description": "The list of cleaned transactions",
            "items": {
              "$ref": "#/components/schemas/MerchantsPlaceClean"
            },
            "type": "array"
          }
        },
        "title": "MerchantsPlaceResponse",
        "type": "object"
      },
      "MultiLineString": {
        "description": "MultiLineString Model",
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox"
          },
          "coordinates": {
            "items": {
              "items": {
                "anyOf": [
                  {
                    "maxItems": 2,
                    "minItems": 2,
                    "prefixItems": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "type": "array"
                  },
                  {
                    "maxItems": 3,
                    "minItems": 3,
                    "prefixItems": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "type": "array"
                  }
                ]
              },
              "minItems": 2,
              "type": "array"
            },
            "title": "Coordinates",
            "type": "array"
          },
          "type": {
            "const": "MultiLineString",
            "title": "Type"
          }
        },
        "required": [
          "type",
          "coordinates"
        ],
        "title": "MultiLineString",
        "type": "object"
      },
      "MultiPoint": {
        "description": "MultiPoint Model",
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox"
          },
          "coordinates": {
            "items": {
              "anyOf": [
                {
                  "maxItems": 2,
                  "minItems": 2,
                  "prefixItems": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "type": "array"
                },
                {
                  "maxItems": 3,
                  "minItems": 3,
                  "prefixItems": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "type": "array"
                }
              ]
            },
            "title": "Coordinates",
            "type": "array"
          },
          "type": {
            "const": "MultiPoint",
            "title": "Type"
          }
        },
        "required": [
          "type",
          "coordinates"
        ],
        "title": "MultiPoint",
        "type": "object"
      },
      "MultiPolygon": {
        "description": "MultiPolygon Model",
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox"
          },
          "coordinates": {
            "items": {
              "items": {
                "items": {
                  "anyOf": [
                    {
                      "maxItems": 2,
                      "minItems": 2,
                      "prefixItems": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "type": "array"
                    },
                    {
                      "maxItems": 3,
                      "minItems": 3,
                      "prefixItems": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "type": "array"
                    }
                  ]
                },
                "minItems": 4,
                "type": "array"
              },
              "type": "array"
            },
            "title": "Coordinates",
            "type": "array"
          },
          "type": {
            "const": "MultiPolygon",
            "title": "Type"
          }
        },
        "required": [
          "type",
          "coordinates"
        ],
        "title": "MultiPolygon",
        "type": "object"
      },
      "Origins": {
        "description": "The starting point for calculating travel distance. You can supply one or more locations separated by the pipe character, in the form of latitude/longitude coordinates. They are used unchanged to calculate distance. Ensure that no space exists between the latitude and longitude values. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n",
        "example": "48.709,2.403",
        "title": "Origins",
        "type": "string"
      },
      "Pagination": {
        "description": "Pagination to reach all returned assets. max 300 assets par page.",
        "properties": {
          "page": {
            "description": "the request page",
            "example": 1,
            "type": "integer"
          },
          "pageCount": {
            "description": "the number of available pages",
            "example": 10,
            "type": "integer"
          }
        },
        "title": "Pagination",
        "type": "object"
      },
      "PaginationSchema": {
        "properties": {
          "page": {
            "description": "Current page number",
            "title": "Page",
            "type": "integer"
          },
          "page_count": {
            "description": "Total number of pages",
            "title": "Page Count",
            "type": "integer"
          },
          "per_page": {
            "description": "Number of items per page",
            "title": "Per Page",
            "type": "integer"
          },
          "total": {
            "description": "Total number of items",
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_count",
          "total",
          "per_page"
        ],
        "title": "PaginationSchema",
        "type": "object"
      },
      "Place": {
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Position"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "type",
          "location"
        ],
        "title": "Place",
        "type": "object"
      },
      "Point": {
        "description": "Point Model",
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox"
          },
          "coordinates": {
            "anyOf": [
              {
                "maxItems": 2,
                "minItems": 2,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 3,
                "minItems": 3,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              }
            ],
            "title": "Coordinates"
          },
          "type": {
            "const": "Point",
            "title": "Type"
          }
        },
        "required": [
          "type",
          "coordinates"
        ],
        "title": "Point",
        "type": "object"
      },
      "Polygon": {
        "description": "Polygon Model",
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "maxItems": 6,
                "minItems": 6,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bbox"
          },
          "coordinates": {
            "items": {
              "items": {
                "anyOf": [
                  {
                    "maxItems": 2,
                    "minItems": 2,
                    "prefixItems": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "type": "array"
                  },
                  {
                    "maxItems": 3,
                    "minItems": 3,
                    "prefixItems": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "type": "array"
                  }
                ]
              },
              "minItems": 4,
              "type": "array"
            },
            "title": "Coordinates",
            "type": "array"
          },
          "type": {
            "const": "Polygon",
            "title": "Type"
          }
        },
        "required": [
          "type",
          "coordinates"
        ],
        "title": "Polygon",
        "type": "object"
      },
      "Position": {
        "properties": {
          "lat": {
            "maximum": 90,
            "minimum": -90,
            "title": "Lat",
            "type": "number"
          },
          "lng": {
            "maximum": 180,
            "minimum": -180,
            "title": "Lng",
            "type": "number"
          }
        },
        "required": [
          "lat",
          "lng"
        ],
        "title": "Position",
        "type": "object"
      },
      "PredictionSchema": {
        "properties": {
          "building": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Building the Feature is in",
            "title": "Building"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Catagory of the Feature",
            "title": "Category"
          },
          "distance": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "If from location provided, is the distance in metres from that location",
            "title": "Distance"
          },
          "duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "If from location provided, is the duration in seconds from that location",
            "title": "Duration"
          },
          "id": {
            "description": "ID of the Feature",
            "title": "Id",
            "type": "integer"
          },
          "level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Level of the Feature",
            "title": "Level"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Name of the Feature",
            "title": "Name"
          },
          "ref": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Reference of the Feature",
            "title": "Ref"
          }
        },
        "required": [
          "id"
        ],
        "title": "PredictionSchema",
        "type": "object"
      },
      "Properties": {
        "properties": {
          "country": {
            "description": "Country Code",
            "title": "Country",
            "type": "string"
          },
          "language": {
            "description": "Language Code",
            "title": "Language",
            "type": "string"
          },
          "locale": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Language Locale",
            "title": "Locale"
          },
          "map": {
            "description": "Link to what3words address on a map",
            "title": "Map",
            "type": "string"
          },
          "nearestPlace": {
            "description": "Nearest Place",
            "title": "Nearestplace",
            "type": "string"
          },
          "words": {
            "description": "The what3words address",
            "title": "Words",
            "type": "string"
          }
        },
        "required": [
          "country",
          "nearestPlace",
          "words",
          "language",
          "map"
        ],
        "title": "Properties",
        "type": "object"
      },
      "Route": {
        "properties": {
          "bounds": {
            "description": "Bounding box of the route",
            "maxItems": 4,
            "minItems": 4,
            "prefixItems": [
              {
                "type": "number"
              },
              {
                "type": "number"
              },
              {
                "type": "number"
              },
              {
                "type": "number"
              }
            ],
            "title": "Bounds",
            "type": "array"
          },
          "legs": {
            "description": "List of different legs of the journey",
            "items": {
              "$ref": "#/components/schemas/Leg"
            },
            "title": "Legs",
            "type": "array"
          }
        },
        "required": [
          "bounds",
          "legs"
        ],
        "title": "Route",
        "type": "object"
      },
      "RouteCollection": {
        "example": {
          "routes": [
            {
              "bounds": [
                -0.12493997331,
                51.498230882255,
                -0.12456220772511746,
                51.49992534993494
              ],
              "legs": [
                {
                  "distance": {
                    "text": "217 meters",
                    "value": 217.48
                  },
                  "duration": {
                    "text": "218 seconds",
                    "value": 218
                  },
                  "end_location": {
                    "lat": 51.499924944345,
                    "level": 1,
                    "lng": -0.12461392044974706
                  },
                  "start_location": {
                    "lat": 51.498230882255,
                    "level": 1,
                    "lng": -0.12456220772511746
                  },
                  "steps": [
                    {
                      "bearing_end": -84.2851734177303,
                      "bearing_start": -84.2851734177303,
                      "distance": {
                        "text": "2 meters",
                        "value": 2.07
                      },
                      "duration": {
                        "text": "2 seconds",
                        "value": 2
                      },
                      "end_location": {
                        "lat": 51.4982349155,
                        "level": 1,
                        "lng": -0.12461111274
                      },
                      "instruction": {
                        "instruction_type": "walk_straight_walk_past",
                        "summary": "Walk straight past Toilets"
                      },
                      "poi_id": 3623024,
                      "polyline": [
                        [
                          -0.12458141958,
                          51.49823306561
                        ],
                        [
                          -0.12461111274,
                          51.4982349155
                        ]
                      ],
                      "routing_profiles": [],
                      "start_location": {
                        "lat": 51.49823306561,
                        "level": 1,
                        "lng": -0.12458141958
                      }
                    },
                    {
                      "bearing_end": -81.48387948754326,
                      "bearing_start": -84.28520875361633,
                      "distance": {
                        "text": "1 meters",
                        "value": 1.47
                      },
                      "duration": {
                        "text": "2 seconds",
                        "value": 2
                      },
                      "end_location": {
                        "lat": 51.49823646981,
                        "level": 1,
                        "lng": -0.12463215818
                      },
                      "instruction": {
                        "instruction_type": "walk_straight_walk_past",
                        "summary": "Walk straight past Lord Chamberlain's Private Office"
                      },
                      "poi_id": 3624060,
                      "polyline": [
                        [
                          -0.12461111274,
                          51.4982349155
                        ],
                        [
                          -0.12462429286,
                          51.49823573662
                        ],
                        [
                          -0.12463215818,
                          51.49823646981
                        ]
                      ],
                      "routing_profiles": [],
                      "start_location": {
                        "lat": 51.4982349155,
                        "level": 1,
                        "lng": -0.12461111274
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "status": "ok"
        },
        "properties": {
          "routes": {
            "items": {
              "$ref": "#/components/schemas/Route"
            },
            "title": "Routes",
            "type": "array"
          },
          "status": {
            "const": "ok",
            "default": "ok",
            "title": "Status"
          }
        },
        "required": [
          "routes"
        ],
        "title": "RouteCollection",
        "type": "object"
      },
      "SearchKeyInputSchema": {
        "properties": {
          "advanced_filter": {
            "description": "Filter by complex queries on properties (ex: indoor:=\"room\" OR door:=\"yes\").",
            "title": "Advanced Filter",
            "type": "string"
          },
          "building": {
            "description": "Filter by building (use `undefined` to find POIs not associated with a building.).",
            "title": "Building",
            "type": "string"
          },
          "category": {
            "description": "Filter by category.",
            "title": "Category",
            "type": "string"
          },
          "extended": {
            "description": "Option to search even not searchable pois (extended=full)",
            "example": "full",
            "title": "Extended",
            "type": "string"
          },
          "from_location": {
            "description": "A string with the format lat,lng,level",
            "example": "48.8818546,2.3572283,0",
            "title": "From Location",
            "type": "string"
          },
          "id": {
            "description": "Filter by a comma seperated list of POI IDs.",
            "example": "1234,4321,9876",
            "title": "Id",
            "type": "string"
          },
          "items_by_page": {
            "default": 0,
            "description": "Number of items per page. A value of 0 means no pagination.",
            "title": "Items By Page",
            "type": "integer"
          },
          "language": {
            "default": "en",
            "description": "A supported language as an ISO 639-1 2 letter code.",
            "title": "Language",
            "type": "string"
          },
          "level": {
            "description": "Filter by level.",
            "title": "Level",
            "type": "integer"
          },
          "page": {
            "default": 0,
            "description": "Page number. 0 being the first page.",
            "title": "Page",
            "type": "integer"
          },
          "q": {
            "description": "Search string. If not passed then all features will be listed alphabetically",
            "title": "Q",
            "type": "string"
          },
          "ref": {
            "description": "Filter by a comma seperated list of POI Refs.",
            "example": "ref:main_entrance,ref:side_entrance",
            "title": "Ref",
            "type": "string"
          }
        },
        "title": "SearchKeyInputSchema",
        "type": "object"
      },
      "SearchPagination": {
        "example": {
          "features": [
            {
              "distance": null,
              "duration": null,
              "geometry": {
                "bbox": null,
                "coordinates": [
                  [
                    [
                      -0.12419943632,
                      51.49927414881
                    ],
                    [
                      -0.12419342215,
                      51.49930532278
                    ],
                    [
                      -0.12419141597,
                      51.49931625597
                    ],
                    [
                      -0.12419943632,
                      51.49927414881
                    ]
                  ]
                ],
                "type": "Polygon"
              },
              "id": 3623459,
              "properties": {
                "building:ref": "Palace of Westminster",
                "indoor": "area",
                "level": "1",
                "name": "Painted Chamber",
                "room": "office",
                "woosmap:cover": "https://woosmap-indoor-img.s3.amazonaws.com/Westminster/paintedchamber.png",
                "woosmap:label_id": 3623458,
                "woosmap:logo": "https://woosmap-indoor-img.s3.amazonaws.com/Westminster/logo.png",
                "woosmap:zoom_icon_min": "16",
                "woosmap:zoom_polygon_min": "16"
              },
              "type": "Feature"
            }
          ],
          "pagination": {
            "page": 0,
            "page_count": 1,
            "per_page": 0,
            "total": 1
          }
        },
        "properties": {
          "features": {
            "default": [],
            "description": "List of Indoor features",
            "items": {
              "$ref": "#/components/schemas/IndoorFeatureSchema"
            },
            "title": "Features",
            "type": "array"
          },
          "pagination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationSchema"
              }
            ],
            "description": "Pagination Information"
          }
        },
        "required": [
          "pagination"
        ],
        "title": "SearchPagination",
        "type": "object"
      },
      "SingleIndoorFeatureSchema": {
        "example": {
          "distance": null,
          "duration": null,
          "geometry": {
            "bbox": null,
            "coordinates": [
              [
                [
                  -0.12419943632,
                  51.49927414881
                ],
                [
                  -0.12419342215,
                  51.49930532278
                ],
                [
                  -0.12419141597,
                  51.49931625597
                ],
                [
                  -0.12419943632,
                  51.49927414881
                ]
              ]
            ],
            "type": "Polygon"
          },
          "id": 3623459,
          "properties": {
            "building:ref": "Palace of Westminster",
            "indoor": "area",
            "level": "1",
            "name": "Painted Chamber",
            "room": "office",
            "woosmap:cover": "https://woosmap-indoor-img.s3.amazonaws.com/Westminster/paintedchamber.png",
            "woosmap:label_id": 3623458,
            "woosmap:logo": "https://woosmap-indoor-img.s3.amazonaws.com/Westminster/logo.png",
            "woosmap:zoom_icon_min": "16",
            "woosmap:zoom_polygon_min": "16"
          },
          "type": "Feature"
        },
        "properties": {
          "geometry": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": {
                    "GeometryCollection": "#/components/schemas/GeometryCollection",
                    "LineString": "#/components/schemas/LineString",
                    "MultiLineString": "#/components/schemas/MultiLineString",
                    "MultiPoint": "#/components/schemas/MultiPoint",
                    "MultiPolygon": "#/components/schemas/MultiPolygon",
                    "Point": "#/components/schemas/Point",
                    "Polygon": "#/components/schemas/Polygon"
                  },
                  "propertyName": "type"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Point"
                  },
                  {
                    "$ref": "#/components/schemas/MultiPoint"
                  },
                  {
                    "$ref": "#/components/schemas/LineString"
                  },
                  {
                    "$ref": "#/components/schemas/MultiLineString"
                  },
                  {
                    "$ref": "#/components/schemas/Polygon"
                  },
                  {
                    "$ref": "#/components/schemas/MultiPolygon"
                  },
                  {
                    "$ref": "#/components/schemas/GeometryCollection"
                  }
                ]
              },
              {
                "$ref": "#/components/schemas/GeometryCollection"
              }
            ],
            "description": "GeoJSON Geometry or Geometry Collection",
            "title": "Geometry"
          },
          "id": {
            "description": "ID of the feature",
            "title": "Id",
            "type": "integer"
          },
          "properties": {
            "description": "Additional properties associated with this feature",
            "title": "Properties",
            "type": "object"
          },
          "type": {
            "const": "Feature",
            "default": "Feature",
            "title": "Type"
          }
        },
        "required": [
          "properties",
          "geometry",
          "id"
        ],
        "title": "SingleIndoorFeatureSchema",
        "type": "object"
      },
      "Square": {
        "properties": {
          "northeast": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coordinates"
              }
            ],
            "description": "Lat Lng coordinate"
          },
          "southwest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Coordinates"
              }
            ],
            "description": "Lat Lng coordinate"
          }
        },
        "required": [
          "southwest",
          "northeast"
        ],
        "title": "Square",
        "type": "object"
      },
      "Step": {
        "properties": {
          "bearing_end": {
            "description": "TODO",
            "title": "Bearing End",
            "type": "number"
          },
          "bearing_start": {
            "description": "TODO",
            "title": "Bearing Start",
            "type": "number"
          },
          "distance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Distance"
              }
            ],
            "description": "Distance of this Step"
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Duration"
              }
            ],
            "description": "Duration of this Step"
          },
          "end_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LatLngLevel"
              }
            ],
            "description": "End Location of this Step, as a Lat,Lng pair with a floor level number."
          },
          "instruction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Instruction"
              },
              {
                "type": "null"
              }
            ],
            "description": "A text based instruction for this step"
          },
          "poi_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "If a POI exists, its ID is given.",
            "title": "Poi Id"
          },
          "polyline": {
            "description": "TODO",
            "items": {
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "type": "array"
            },
            "title": "Polyline",
            "type": "array"
          },
          "routing_profiles": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Routing Profiles",
            "type": "array"
          },
          "start_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LatLngLevel"
              }
            ],
            "description": "Starting Location of this Step, as a Lat,Lng pair with a floor level number."
          }
        },
        "required": [
          "distance",
          "duration",
          "bearing_start",
          "bearing_end",
          "start_location",
          "end_location",
          "polyline"
        ],
        "title": "Step",
        "type": "object"
      },
      "Success": {
        "description": "Message returned to a success request",
        "properties": {
          "status": {
            "description": "the status of the 200 response",
            "example": "success",
            "type": "string"
          },
          "value": {
            "description": "The value of request for this 200 response",
            "example": "129 stores",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "title": "Success",
        "type": "object"
      },
      "SuccessZones": {
        "description": "Message returned to a success Zones request",
        "properties": {
          "message": {
            "description": "message returned with the 2OO Zones request",
            "example": "Zones successfully updated.",
            "type": "string"
          },
          "status": {
            "description": "the status of the 2OO Zones response",
            "example": "success",
            "type": "string"
          }
        },
        "title": "SuccessZones",
        "type": "object"
      },
      "Timezone": {
        "description": "Timezone for the Opening Hours of an Asset. It is used to compute the `open_now` property of an asset. see \u003chttps://en.wikipedia.org/wiki/List_of_tz_database_time_zones\u003e",
        "example": "Europe/London",
        "title": "Timezone",
        "type": "string"
      },
      "TrafficDistanceLeg": {
        "description": "Leg in a route",
        "example": {
          "distance": {
            "text": "1.1 km",
            "value": 1073.570921248021
          },
          "duration_with_traffic": {
            "text": "2 mins",
            "value": 100
          },
          "duration_without_traffic": {
            "text": "1 min",
            "value": 88
          },
          "end_location": {
            "lat": 49.3134,
            "lng": 4.15297
          },
          "start_location": {
            "lat": 49.310753,
            "lng": 4.1451221
          }
        },
        "properties": {
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          },
          "duration_with_traffic": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "duration_without_traffic": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "end_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "start_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          }
        },
        "title": "TrafficDistanceLeg",
        "type": "object"
      },
      "TrafficDistanceMatrixElementResponse": {
        "description": "Attributes describing an element of origin and destination returned in Traffic Distance Matrix response.",
        "properties": {
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          },
          "duration_with_traffic": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "status": {
            "description": "Status returned for Distance Matrix Element Response.\n  - `OK` indicates the response contains a valid result.\n  - `NOT_FOUND` indicates that the origin and/or destination of this pairing could not be matched to the network.\n  - `ZERO_RESULTS` indicates no route could be found between the origin and destination.\n",
            "enum": [
              "OK",
              "NOT_FOUND",
              "ZERO_RESULTS"
            ],
            "type": "string"
          }
        },
        "title": "TrafficDistanceMatrixElementResponse",
        "type": "object"
      },
      "TrafficDistanceMatrixElementsResponse": {
        "description": "Attributes describing elements of origin and destination returned in Traffic Distance Matrix response.",
        "example": {
          "elements": [
            {
              "distance": {
                "text": "10.6 km",
                "value": 10583
              },
              "duration_with_traffic": {
                "text": "24 mins",
                "value": 1424
              },
              "status": "OK"
            },
            {
              "distance": {
                "text": "10.2 km",
                "value": 10185
              },
              "duration_with_traffic": {
                "text": "19 mins",
                "value": 1161
              },
              "status": "OK"
            }
          ]
        },
        "properties": {
          "elements": {
            "description": "the route element",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceMatrixElementResponse"
            },
            "type": "array"
          }
        },
        "title": "TrafficDistanceMatrixElementsResponse",
        "type": "object"
      },
      "TrafficDistanceMatrixRequest": {
        "description": "Attributes describing a Traffic Distance Matrix request",
        "example": {
          "departure_time": "now",
          "destinations": "48.83534,2.368308",
          "origins": "48.73534,2.368308|48.73534,2.368308",
          "routing": "fastest",
          "units": "imperial"
        },
        "properties": {
          "departure_time": {
            "description": "Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\n",
            "example": "1600799173",
            "type": "string"
          },
          "destinations": {
            "$ref": "#/components/schemas/Destinations"
          },
          "language": {
            "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or “en”.\n",
            "example": "en",
            "type": "string"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "routing": {
            "description": "Specifies what to base the cost calculation on. If not specified default is `fastest`.\n  * `fastest` will include traffic and optimise the route based on the smallest travel time.\n  * `shortest` will optimise based on travel distance.\n",
            "enum": [
              "fastest",
              "shortest"
            ],
            "example": "fastest",
            "type": "string"
          },
          "units": {
            "$ref": "#/components/schemas/Units"
          }
        },
        "required": [
          "origins",
          "destinations"
        ],
        "title": "TrafficDistanceMatrixRequest",
        "type": "object"
      },
      "TrafficDistanceMatrixResponse": {
        "description": "Attributes describing a Traffic Distance Matrix response.",
        "example": {
          "rows": [
            {
              "elements": [
                {
                  "distance": {
                    "text": "10.7 km",
                    "value": 10731
                  },
                  "duration_with_traffic": {
                    "text": "27 mins",
                    "value": 1626
                  },
                  "status": "OK"
                },
                {
                  "distance": {
                    "text": "10.2 km",
                    "value": 10185
                  },
                  "duration_with_traffic": {
                    "text": "21 mins",
                    "value": 1288
                  },
                  "status": "OK"
                }
              ]
            }
          ],
          "status": "OK"
        },
        "properties": {
          "rows": {
            "description": "Contains an array of elements for each pair of origin and destination",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceMatrixElementsResponse"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          }
        },
        "title": "TrafficDistanceMatrixResponse",
        "type": "object"
      },
      "TrafficDistanceRouteElementsResponse": {
        "description": "Attributes describing routes from an origin to a destination returned in traffic distance route response.",
        "properties": {
          "bounds": {
            "$ref": "#/components/schemas/Bounds"
          },
          "legs": {
            "description": "Legs part of the route response",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceLeg"
            },
            "type": "array"
          },
          "overview_polyline": {
            "$ref": "#/components/schemas/EncodedPolyline"
          },
          "summary": {
            "description": "A short name for the route.",
            "example": "Route from A to Z",
            "type": "string"
          }
        },
        "title": "TrafficDistanceRouteElementsResponse",
        "type": "object"
      },
      "TrafficDistanceRouteResponse": {
        "description": "Attributes describing a traffic distance route response.",
        "example": {
          "routes": [
            {
              "bounds": {
                "northeast": {
                  "lat": 49.31575,
                  "lng": 4.15297
                },
                "southwest": {
                  "lat": 49.310753,
                  "lng": 4.145122
                }
              },
              "legs": [
                {
                  "distance": {
                    "text": "1.1 km",
                    "value": 1073.570921248021
                  },
                  "duration_with_traffic": {
                    "text": "2 mins",
                    "value": 97
                  },
                  "duration_without_traffic": {
                    "text": "1 min",
                    "value": 88
                  },
                  "end_location": {
                    "lat": 49.3134,
                    "lng": 4.15297
                  },
                  "start_location": {
                    "lat": 49.310753,
                    "lng": 4.1451221
                  }
                }
              ],
              "overview_polyline": {
                "points": "e_~kH_rhXkBcDsAwBeAaB]c@a@g@c@g@c@a@[[a@_@YS[Ui@Y]O]K_@Gc@Gi@AcBCg@?_@ESCOMMMMUKYI]Ow@FIFMBI@G@O?IAMCMCKjCsDNShBaCDFDDDBF@F?FABADABEBCBKBM@M?KAKCKCG|@kAfA}A"
              },
              "summary": "route_0"
            }
          ],
          "status": "OK"
        },
        "properties": {
          "routes": {
            "description": "Contains an array of routes from origin to destination (only one if alternatives is not specified)",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceRouteElementsResponse"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          }
        },
        "title": "TrafficDistanceRouteResponse",
        "type": "object"
      },
      "Transit": {
        "properties": {
          "routes": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/TransitRoute"
            },
            "title": "Routes",
            "type": "array"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "title": "Transit",
        "type": "object"
      },
      "TransitAttributions": {
        "properties": {
          "href": {
            "title": "Href",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "id",
          "href",
          "text",
          "type"
        ],
        "title": "TransitAttributions",
        "type": "object"
      },
      "TransitLeg": {
        "properties": {
          "attributions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TransitAttributions"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attributions"
          },
          "distance": {
            "title": "Distance",
            "type": "number"
          },
          "duration": {
            "title": "Duration",
            "type": "integer"
          },
          "end_location": {
            "$ref": "#/components/schemas/Place"
          },
          "polyline": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Polyline"
          },
          "start_location": {
            "$ref": "#/components/schemas/Place"
          },
          "transport": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransitTransport"
              },
              {
                "type": "null"
              }
            ]
          },
          "travel_mode": {
            "title": "Travel Mode",
            "type": "string"
          }
        },
        "required": [
          "travel_mode",
          "duration",
          "distance",
          "polyline",
          "start_location",
          "end_location"
        ],
        "title": "TransitLeg",
        "type": "object"
      },
      "TransitRoute": {
        "properties": {
          "duration": {
            "title": "Duration",
            "type": "integer"
          },
          "legs": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/TransitLeg"
            },
            "title": "Legs",
            "type": "array"
          },
          "notice": {
            "default": "",
            "title": "Notice",
            "type": "string"
          }
        },
        "required": [
          "duration"
        ],
        "title": "TransitRoute",
        "type": "object"
      },
      "TransitTransport": {
        "properties": {
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "headsign": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Headsign"
          },
          "long_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Long Name"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "short_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Short Name"
          },
          "text_color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text Color"
          }
        },
        "required": [
          "mode"
        ],
        "title": "TransitTransport",
        "type": "object"
      },
      "UnitSystem": {
        "enum": [
          "metric",
          "imperial"
        ],
        "title": "UnitSystem",
        "type": "string"
      },
      "Units": {
        "description": "Specifies the unit system to use when expressing distance as text. Two different units supported:\n  * `metric` (default) returns distances in kilometers and meters\n  * `imperial` returns distances in miles and feet\n",
        "enum": [
          "imperial",
          "metric"
        ],
        "example": "metric",
        "title": "Units",
        "type": "string"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      },
      "VenueListSchema": {
        "example": [
          {
            "bbox": [
              -0.1258015,
              51.4981306,
              -0.1236527,
              51.5008191
            ],
            "name": "Westminster palace",
            "venue_id": "west_pal"
          },
          {
            "bbox": [
              3.9215275,
              43.6062712,
              3.922097,
              43.606972
            ],
            "name": "Woosmap HQ",
            "venue_id": "woosmap_wgs_office"
          },
          {
            "bbox": [
              2.3537419,
              48.87969358511,
              2.3584085,
              48.8831854
            ],
            "name": "Gare Du Nord",
            "venue_id": "woosmap_gdn"
          }
        ],
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bounding Box of Venue",
            "title": "Bbox"
          },
          "name": {
            "description": "Name of the Venue",
            "title": "Name",
            "type": "string"
          },
          "venue_id": {
            "description": "ID of the Venue",
            "title": "Venue Id",
            "type": "string"
          }
        },
        "required": [
          "venue_id",
          "name",
          "bbox"
        ],
        "title": "VenueListSchema",
        "type": "object"
      },
      "VenueSchema": {
        "example": {
          "bbox": [
            -0.1258015,
            51.4981306,
            -0.1236527,
            51.5008191
          ],
          "buildings": [
            {
              "cover": null,
              "description": null,
              "levels": [
                {
                  "bbox": [
                    -0.1258015,
                    51.4981306,
                    -0.1236527,
                    51.5008191
                  ],
                  "level": 1,
                  "name": "Palace of Westminster",
                  "ref": "Ground"
                }
              ],
              "localized_name": {},
              "logo": null,
              "name": "Palace of Westminster",
              "opening_hours": null,
              "ref": "Palace of Westminster"
            }
          ],
          "categories": [],
          "languages": [],
          "levels": [
            {
              "bbox": [
                -0.1258015,
                51.4981306,
                -0.1236527,
                51.5008191
              ],
              "level": 1,
              "name": "Palace of Westminster",
              "ref": "Ground"
            }
          ],
          "name": "Westminster palace",
          "routing_profiles": [],
          "updated_at": "2023-07-17T13:11:32.267Z",
          "venue_id": "west_pal"
        },
        "properties": {
          "bbox": {
            "anyOf": [
              {
                "maxItems": 4,
                "minItems": 4,
                "prefixItems": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bounding Box of Venue",
            "title": "Bbox"
          },
          "buildings": {
            "default": [],
            "description": "Buildings present at the venue",
            "items": {
              "$ref": "#/components/schemas/Building"
            },
            "title": "Buildings",
            "type": "array"
          },
          "categories": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Categories",
            "type": "array"
          },
          "languages": {
            "description": "Language translations available for the venue",
            "items": {
              "type": "string"
            },
            "title": "Languages",
            "type": "array"
          },
          "levels": {
            "default": [],
            "description": "Information on each level of the venue",
            "items": {
              "$ref": "#/components/schemas/Level"
            },
            "title": "Levels",
            "type": "array"
          },
          "name": {
            "description": "Name of the Venue",
            "title": "Name",
            "type": "string"
          },
          "routing_profiles": {
            "default": [],
            "description": "Available routing profiles for the venue",
            "items": {
              "type": "string"
            },
            "title": "Routing Profiles",
            "type": "array"
          },
          "updated_at": {
            "description": "When this venue was last updated",
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "venue_id": {
            "description": "ID of the Venue",
            "title": "Venue Id",
            "type": "string"
          }
        },
        "required": [
          "venue_id",
          "name",
          "bbox",
          "languages",
          "updated_at"
        ],
        "title": "VenueSchema",
        "type": "object"
      },
      "W3wQuery": {
        "properties": {
          "coordinates": {
            "description": "Coordinates as a comma separated string of latitude and longitude",
            "example": "48.858304,2.294514",
            "title": "Coordinates",
            "type": "string"
          },
          "format": {
            "default": "json",
            "description": "Return data format type; can be either json or geojson",
            "enum": [
              "json",
              "geojson"
            ],
            "title": "Format",
            "type": "string"
          },
          "language": {
            "default": "en",
            "description": "A supported address language as an ISO 639-1 2 letter code.",
            "title": "Language",
            "type": "string"
          }
        },
        "required": [
          "coordinates"
        ],
        "title": "W3wQuery",
        "type": "object"
      },
      "WaypointsIn": {
        "properties": {
          "waypoints": {
            "default": "",
            "description": "A list of points by which the route should pass seperated by `|`. Waypoints can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
            "example": "48.8818546,2.3572283,0|123456|48.8818546,2.3572283,0|ref:main_exit",
            "title": "Waypoints",
            "type": "string"
          }
        },
        "title": "WaypointsIn",
        "type": "object"
      },
      "Zone": {
        "description": "Attributes describing a Zone.",
        "example": {
          "description": "Delivery Zone for Store A",
          "polygon": "POLYGON ((-122.496116 37.7648181, -122.4954079 37.751518, -122.4635648 37.7530788, -122.4618481 37.7514501, -122.4601315 37.7521288, -122.4565266 37.7513144, -122.4540375 37.7566755, -122.4528359 37.7583041, -122.4515485 37.7595934, -122.4546384 37.774656, -122.4718903 37.7731635, -122.472577 37.772485, -122.4755811 37.7725529, -122.4791001 37.7723493, -122.4793576 37.7713995, -122.4784993 37.769839, -122.4783276 37.7680071, -122.4774693 37.766718, -122.4772118 37.7652931, -122.496116 37.7648181))",
          "status": "ok",
          "store_id": "STORE_ID_123456",
          "types": [
            "delivery"
          ],
          "zone_id": "ZoneA"
        },
        "properties": {
          "description": {
            "description": "Textual description of your Zone",
            "example": "Delivery Zone for Store A",
            "type": "string"
          },
          "polygon": {
            "description": "Zone geometry polygon as **Well Known Text**. WKT defines how to represent geometry of one object (cf. https://en.wikipedia.org/wiki/Well-known_text). Your zones could be complex and multipart polygons.",
            "example": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
            "type": "string"
          },
          "status": {
            "description": "the status as string",
            "example": "ok",
            "type": "string"
          },
          "store_id": {
            "$ref": "#/components/schemas/AssetId"
          },
          "types": {
            "description": "Contains an array of types describing the Zone.",
            "example": [
              "delivery",
              "san_francisco_west"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "zone_id": {
            "description": "A textual identifier that uniquely identifies a Zone.",
            "example": "ZoneA",
            "type": "string"
          }
        },
        "required": [
          "store_id",
          "zone_id",
          "polygon"
        ],
        "title": "Zone",
        "type": "object"
      },
      "ZonesCollectionRequest": {
        "description": "A Collection of Woosmap Zones as expected for Data Management Data API.",
        "example": {
          "zones": [
            {
              "description": "Delivery Zone for Store A",
              "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
              "store_id": "STORE_ID_123456",
              "types": [
                "delivery"
              ],
              "zone_id": "ZoneA"
            },
            {
              "description": "Delivery Zone for Store B",
              "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
              "store_id": "STORE_ID_123456",
              "types": [
                "delivery"
              ],
              "zone_id": "ZoneB"
            },
            {
              "description": "Delivery Zone for Store C",
              "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
              "store_id": "STORE_ID_45678",
              "types": [
                "delivery"
              ],
              "zone_id": "ZoneC"
            }
          ]
        },
        "properties": {
          "zones": {
            "description": "The Zones collection",
            "items": {
              "$ref": "#/components/schemas/Zone"
            },
            "type": "array"
          }
        },
        "required": [
          "zones"
        ],
        "title": "ZonesCollectionRequest",
        "type": "object"
      },
      "ZonesCollectionResponse": {
        "description": "A Collection of Woosmap Zones retrieved in response to a get zones list.",
        "example": {
          "status": "ok",
          "zones": [
            {
              "description": "Delivery Zone for Store B",
              "polygon": "POLYGON ((-122.4546384 37.774656, -122.4515485 37.7595934, -122.4354306 37.7602172, -122.4333707 37.7512596, -122.423071 37.7511239, -122.4242726 37.7687665, -122.4259893 37.7691736, -122.4289075 37.7732444, -122.4306241 37.7850483, -122.4472753 37.7830133, -122.445902 37.7759581, -122.4546384 37.774656))",
              "store_id": "STORE_ID_123456",
              "types": [
                "delivery"
              ],
              "zone_id": "ZoneB"
            },
            {
              "description": "Delivery Zone for Store C",
              "polygon": "POLYGON ((-122.4758889 37.7524995, -122.4751594 37.7321718, -122.4688079 37.7299995, -122.4648597 37.7261979, -122.4519851 37.7228035, -122.4483802 37.7215815, -122.4458053 37.726741, -122.4365356 37.7310857, -122.4315574 37.7324433, -122.4246909 37.7312214, -122.4219444 37.731493, -122.423071 37.7511239, -122.4333707 37.7512596, -122.4354306 37.7602172, -122.4515485 37.7595934, -122.4528628 37.7582744, -122.4540375 37.7566755, -122.4565266 37.7513144, -122.4601315 37.7521288, -122.4618481 37.7514501, -122.4635648 37.7530788, -122.4758889 37.7524995))",
              "store_id": "STORE_ID_45678",
              "types": [
                "delivery"
              ],
              "zone_id": "ZoneC"
            }
          ]
        },
        "properties": {
          "status": {
            "description": "the status as string",
            "example": "ok",
            "type": "string"
          },
          "zones": {
            "description": "The Zones collection",
            "items": {
              "$ref": "#/components/schemas/Zone"
            },
            "type": "array"
          }
        },
        "title": "ZonesCollectionResponse",
        "type": "object"
      }
    },
    "securitySchemes": {
      "PrivateApiKeyAuth": {
        "description": "A Private key generated specifically to authenticate API requests on server side. Required for Data management API. See how to [register a Private API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-private-api-key).",
        "in": "query",
        "name": "private_key",
        "type": "apiKey"
      },
      "PrivateApiKeyHeaderAuth": {
        "description": "A Private key to authenticate API requests through the Header instead of Query parameter. Use either PrivateApiKeyHeaderAuth or PrivateApiKeyAuth. See how to [register a Private API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-private-api-key).",
        "in": "header",
        "name": "X-Api-Key",
        "type": "apiKey"
      },
      "PublicApiKeyAuth": {
        "description": "A Public key generated specifically to authenticate API requests on the front side. See how to [register a Public API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-public-api-key).",
        "in": "query",
        "name": "key",
        "type": "apiKey"
      },
      "RefererHeader": {
        "description": "The Referer HTTP request header is mandatory when using PublicApiKeyAuth. In browser environment, the Referer is set by the browser itself and cannot be overridden.",
        "in": "header",
        "name": "Referer",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "name": "Woosmap API"
    },
    "description": "The Woosmap API is a RESTful API built on HTTP. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. You can use your favorite HTTP/REST library for your programming language to use Woosmap's API, or you can use one of our Javascript SDKs for supported APIs:\n  - [Map JS](https://developers.woosmap.com/products/map-api/get-started/) - support All APIs\n  - [Localities JS](https://developers.woosmap.com/products/localities/localities-jsapi/get-started/) - for Localities API\n  - [MultiSearch JS](https://developers.woosmap.com/products/multisearch-lib/js/get-started/) - for Localities API and Store Search API\n\nYou can use Postman to test the API (if you use the `PUBLIC_API_KEY` authentication, don't forget to set the `Referer` Header corresponding to one of your restricted domain name).\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/18437534-dad12f37-6d84-42d1-9889-2f529aee0ab9?action=collection%2Ffork\u0026source=rip_markdown\u0026collection-url=entityId%3D18437534-dad12f37-6d84-42d1-9889-2f529aee0ab9%26entityType%3Dcollection%26workspaceId%3Dff0698d5-c4db-403e-b7c6-b622b68032d3)\n",
    "termsOfService": "https://www.woosmap.com/en/policies/terms/",
    "title": "Woosmap Platform API Reference",
    "version": "1.20.1",
    "x-document-meta-data": {
      "copyright": "© 2023 Woosmap"
    }
  },
  "openapi": "3.0.3",
  "paths": {
    "/address/autocomplete/json": {
      "get": {
        "deprecated": true,
        "description": "Autocomplete on worldwide suggestions for a for text-based geographic searches. It can match on full words as well as substrings.\n",
        "operationId": "addressAutocomplete",
        "parameters": [
          {
            "$ref": "#/components/parameters/address_input"
          },
          {
            "$ref": "#/components/parameters/address_components"
          },
          {
            "$ref": "#/components/parameters/address_location"
          },
          {
            "$ref": "#/components/parameters/address_language"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Autocomplete address results for input `Lond` and components `country:gb`",
                    "value": {
                      "predictions": [
                        {
                          "description": "London, England, United Kingdom",
                          "matched_substring": {
                            "description": [
                              {
                                "length": 4,
                                "offset": 0
                              }
                            ]
                          },
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
                          "type": "locality"
                        },
                        {
                          "description": "Londonderry, Northern Ireland, United Kingdom",
                          "matched_substring": {
                            "description": [
                              {
                                "length": 4,
                                "offset": 0
                              }
                            ]
                          },
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDE5Nzgz",
                          "type": "locality"
                        },
                        {
                          "description": "County Londonderry, Northern Ireland, United Kingdom",
                          "matched_substring": {
                            "description": [
                              {
                                "length": 4,
                                "offset": 7
                              }
                            ]
                          },
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDExMTIz",
                          "type": "admin_level"
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AddressAutocompleteCollectionResponse"
                }
              }
            },
            "description": "Autocompletion Address successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Autocomplete for Addresses",
        "tags": [
          "Address API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/address/autocomplete/json?input=Lond\u0026components=country%3Agb\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/address/autocomplete/json?input=Lond\u0026components=country%3Agb\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/address/autocomplete/json?input=Lond\u0026components=country%3Agb\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/address/details/json": {
      "get": {
        "deprecated": true,
        "description": "Provides details of an address autocomplete suggestion (using the suggestion’s `public_id`).\n",
        "operationId": "addressDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/address_public_id"
          },
          {
            "$ref": "#/components/parameters/address_fields"
          },
          {
            "$ref": "#/components/parameters/address_cc_format"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Address Details for `London, England, United Kingdom`",
                    "value": {
                      "result": {
                        "address_components": [
                          {
                            "long_name": "United Kingdom",
                            "short_name": "GBR",
                            "types": [
                              "country"
                            ]
                          },
                          {
                            "long_name": "England",
                            "short_name": "England",
                            "types": [
                              "state"
                            ]
                          },
                          {
                            "long_name": "London",
                            "short_name": "LDN",
                            "types": [
                              "county"
                            ]
                          },
                          {
                            "long_name": "London",
                            "short_name": "London",
                            "types": [
                              "locality"
                            ]
                          },
                          {
                            "long_name": "SW1A 2",
                            "short_name": "SW1A 2",
                            "types": [
                              "postal_code"
                            ]
                          }
                        ],
                        "formatted_address": "London, England, United Kingdom",
                        "geometry": {
                          "location": {
                            "lat": 51.50643,
                            "lng": -0.12719
                          },
                          "location_type": "GEOMETRIC_CENTER",
                          "viewport": {
                            "northeast": {
                              "lat": 51.68629,
                              "lng": 0.28206
                            },
                            "southwest": {
                              "lat": 51.28043,
                              "lng": -0.56316
                            }
                          }
                        },
                        "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
                        "types": [
                          "locality"
                        ]
                      },
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AddressDetailsResponse"
                }
              }
            },
            "description": "Details Address successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Details of an Address",
        "tags": [
          "Address API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/address/details/json?public_id=aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/address/details/json?public_id=aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/address/details/json?public_id=aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/address/geocode/json": {
      "get": {
        "deprecated": true,
        "description": "Provides details for an address or a geographic position. Either parameter `address` **or** `latlng` is required. Maximum of 25 queries per second (QPS)\n",
        "operationId": "addressGeocode",
        "parameters": [
          {
            "$ref": "#/components/parameters/address_address"
          },
          {
            "$ref": "#/components/parameters/address_latlng"
          },
          {
            "$ref": "#/components/parameters/address_components"
          },
          {
            "$ref": "#/components/parameters/address_language"
          },
          {
            "$ref": "#/components/parameters/address_location"
          },
          {
            "$ref": "#/components/parameters/address_cc_format"
          },
          {
            "$ref": "#/components/parameters/address_limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Geocode Results for address `Place de la Resistance` with components `country:FR`",
                    "value": {
                      "results": [
                        {
                          "address_components": [
                            {
                              "long_name": "France",
                              "short_name": "FRA",
                              "types": [
                                "country"
                              ]
                            },
                            {
                              "long_name": "Ile-de-France",
                              "short_name": "IDF",
                              "types": [
                                "state"
                              ]
                            },
                            {
                              "long_name": "Paris",
                              "short_name": "Paris",
                              "types": [
                                "county"
                              ]
                            },
                            {
                              "long_name": "Paris",
                              "short_name": "Paris",
                              "types": [
                                "locality"
                              ]
                            },
                            {
                              "long_name": "7th Arrondissement",
                              "short_name": "7th Arrondissement",
                              "types": [
                                "district"
                              ]
                            },
                            {
                              "long_name": "Place de la Résistance",
                              "short_name": "Place de la Résistance",
                              "types": [
                                "route"
                              ]
                            },
                            {
                              "long_name": "75007",
                              "short_name": "75007",
                              "types": [
                                "postal_code"
                              ]
                            }
                          ],
                          "formatted_address": "Place de la Résistance, 75007 Paris, France",
                          "geometry": {
                            "location": {
                              "lat": 48.86228,
                              "lng": 2.30346
                            },
                            "location_type": "GEOMETRIC_CENTER",
                            "viewport": {
                              "northeast": {
                                "lat": 48.86231,
                                "lng": 2.30546
                              },
                              "southwest": {
                                "lat": 48.86191,
                                "lng": 2.30147
                              }
                            }
                          },
                          "types": [
                            "route"
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AddressGeocodeCollectionResponse"
                }
              }
            },
            "description": "Request Address Geocode successful"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Geocode an Address or Reverse Geocode a latlng",
        "tags": [
          "Address API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/address/geocode/json?address=Place%20de%20la%20Resistance%20Paris\u0026components=country%3AFR\u0026limit=5\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/address/geocode/json?address=Place%20de%20la%20Resistance%20Paris\u0026components=country%3AFR\u0026limit=5\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/address/geocode/json?address=Place%20de%20la%20Resistance%20Paris\u0026components=country%3AFR\u0026limit=5\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/distance/distancematrix/json": {
      "get": {
        "description": "Get distances and durations for a matrix of origins and destinations, based on the recommended route between start and end points for a specified travel mode.\n",
        "operationId": "getDistanceMatrix",
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origins"
          },
          {
            "$ref": "#/components/parameters/distance_destinations"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_elements"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          },
          {
            "$ref": "#/components/parameters/distance_avoid"
          },
          {
            "$ref": "#/components/parameters/distance_departure_time"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result for driving from origins `48.709,2.403` to destinations `48.709,2.303|48.768,2.338`,",
                    "value": {
                      "rows": [
                        {
                          "elements": [
                            {
                              "distance": {
                                "text": "10.6 km",
                                "value": 10605
                              },
                              "duration": {
                                "text": "16 mins",
                                "value": 937
                              },
                              "status": "OK"
                            },
                            {
                              "distance": {
                                "text": "10.3 km",
                                "value": 10333
                              },
                              "duration": {
                                "text": "15 mins",
                                "value": 907
                              },
                              "status": "OK"
                            }
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DistanceMatrixResponse"
                }
              }
            },
            "description": "Distance Matrix successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Distance Matrix",
        "tags": [
          "Distance API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/distance/distancematrix/json?origins=48.709%2C2.403\u0026destinations=48.709%2C2.303%7C48.768%2C2.338\u0026mode=driving\u0026language=en\u0026elements=duration_distance\u0026method=distance\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/distance/distancematrix/json?origins=48.709%2C2.403\u0026destinations=48.709%2C2.303%7C48.768%2C2.338\u0026mode=driving\u0026language=en\u0026elements=duration_distance\u0026method=distance\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/distance/distancematrix/json?origins=48.709%2C2.403\u0026destinations=48.709%2C2.303%7C48.768%2C2.338\u0026mode=driving\u0026language=en\u0026elements=duration_distance\u0026method=distance\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "post": {
        "description": "Get distances and durations for a matrix of origins and destinations, based on the recommended route between start and end points for a specified travel mode. If the URL size is too short for your origins and destinations, you should request the server using this POST method and passing arguments as json.\n",
        "operationId": "postDistanceMatrix",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Request as a JSON for a distance matrix call",
                  "value": {
                    "departure_time": "now",
                    "destinations": "48.83534,2.368308",
                    "elements": "duration_distance",
                    "method": "distance",
                    "origins": "48.73534,2.368308|48.73534,2.368308",
                    "units": "imperial"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/DistanceMatrixRequest"
              }
            }
          },
          "description": "The request body of Distance Matrix must be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result for driving from origins `48.73534,2.368308|48.73534,2.368308` to destinations `48.83534,2.368308`,",
                    "value": {
                      "rows": [
                        {
                          "elements": [
                            {
                              "distance": {
                                "text": "10.6 km",
                                "value": 10605
                              },
                              "duration": {
                                "text": "16 mins",
                                "value": 937
                              },
                              "status": "OK"
                            },
                            {
                              "distance": {
                                "text": "10.3 km",
                                "value": 10333
                              },
                              "duration": {
                                "text": "15 mins",
                                "value": 907
                              },
                              "status": "OK"
                            }
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DistanceMatrixResponse"
                }
              }
            },
            "description": "Distance Matrix with POST successfully retrieved"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Distance Matrix using POST",
        "tags": [
          "Distance API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X POST 'https://api.woosmap.com/distance/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"elements\": \"duration_distance\",\n  \"method\": \"distance\",\n  \"departure_time\": \"now\"\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/distance/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n    \"destinations\": \"48.83534,2.368308\",\n    \"units\": \"imperial\",\n    \"elements\": \"duration_distance\",\n    \"method\": \"distance\",\n    \"departure_time\": \"now\"\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"elements\": \"duration_distance\",\n  \"method\": \"distance\",\n  \"departure_time\": \"now\"\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/distance/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/distance/isochrone/json": {
      "get": {
        "description": "Find all destinations that can be reached in a specific amount of time or a maximum travel distance\n",
        "operationId": "getIsochrone",
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origin"
          },
          {
            "$ref": "#/components/parameters/distance_value"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Distance Isochrone Result for driving 1km by car from origin `48.709,2.403`",
                    "value": {
                      "isoline": {
                        "distance": {
                          "text": "1 km",
                          "value": 1
                        },
                        "geometry": "s|ihHouuMZ`GdClCsA~QhCnQmBhEvQhWpD|AnHqJ`OwBx@lC|DhAgFnKlBx@v@tHfEvDlBqF{@{NvDgDhAeIbEI~AfL`EnAfHiEiAOE_EuCq@c@cD_FY}C_EqF_@gEoEoKMcCkDsI}@_C}CyG]aG{G[eFoCw@gAiIkDYg@_DwA@",
                        "origin": {
                          "lat": 48.709,
                          "lng": 2.403
                        }
                      },
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DistanceIsochroneResponse"
                }
              }
            },
            "description": "Isochrone successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Isochrone (Early Access)",
        "tags": [
          "Distance API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/distance/isochrone/json?origin=48.709%2C2.403\u0026value=1\u0026mode=driving\u0026language=en\u0026method=distance\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/distance/isochrone/json?origin=48.709%2C2.403\u0026value=1\u0026mode=driving\u0026language=en\u0026method=distance\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/distance/isochrone/json?origin=48.709%2C2.403\u0026value=1\u0026mode=driving\u0026language=en\u0026method=distance\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/distance/route/json": {
      "get": {
        "description": "Get distance, duration and path (as a polyline) for a pair of origin and destination, based on the recommended route between those two points for a specified travel mode.\n",
        "operationId": "getRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origin"
          },
          {
            "$ref": "#/components/parameters/distance_destination"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_alternatives"
          },
          {
            "$ref": "#/components/parameters/distance_waypoints"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          },
          {
            "$ref": "#/components/parameters/distance_details"
          },
          {
            "$ref": "#/components/parameters/distance_avoid"
          },
          {
            "$ref": "#/components/parameters/distance_departure_time"
          },
          {
            "$ref": "#/components/parameters/distance_arrival_time"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Distance Route Result for driving from origin `49.31067,4.14525` to destination `49.31344,4.15293` and retrieving alternatives routes.",
                    "value": {
                      "routes": [
                        {
                          "bounds": {
                            "northeast": {
                              "lat": 49.315678,
                              "lng": 4.15292
                            },
                            "southwest": {
                              "lat": 49.31073,
                              "lng": 4.145162
                            }
                          },
                          "legs": [
                            {
                              "distance": {
                                "text": "1 km",
                                "value": 1038
                              },
                              "duration": {
                                "text": "1 min",
                                "value": 75
                              },
                              "end_address": "D 30",
                              "end_location": {
                                "lat": 49.31344,
                                "lng": 4.15293
                              },
                              "end_waypoint": 1,
                              "start_address": "D 151",
                              "start_location": {
                                "lat": 49.31067,
                                "lng": 4.14525
                              },
                              "start_waypoint": 0,
                              "steps": [
                                {
                                  "distance": "676 m",
                                  "duration": "1 min",
                                  "end_location": {
                                    "lat": 49.315679,
                                    "lng": 4.149621
                                  },
                                  "instructions": {
                                    "action": 2,
                                    "summary": "Drive northeast on D 151.",
                                    "verbal_after": "Continue for 700 meters.",
                                    "verbal_before": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_succint": "Drive northeast. Then Enter the roundabout and take the 2nd exit onto D 30."
                                  },
                                  "polyline": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?Q",
                                  "start_location": {
                                    "lat": 49.31073,
                                    "lng": 4.145163
                                  },
                                  "travel_mode": "DRIVING"
                                },
                                {
                                  "distance": "22 m",
                                  "duration": "1 min",
                                  "end_location": {
                                    "lat": 49.31563,
                                    "lng": 4.149905
                                  },
                                  "instructions": {
                                    "action": 26,
                                    "summary": "Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_alert": "Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_before": "Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_succint": "Enter the roundabout and take the 2nd exit."
                                  },
                                  "polyline": "}}~kHcniXBIBU?W",
                                  "start_location": {
                                    "lat": 49.315679,
                                    "lng": 4.149621
                                  },
                                  "travel_mode": "DRIVING"
                                },
                                {
                                  "distance": "198 m",
                                  "duration": "1 min",
                                  "end_location": {
                                    "lat": 49.314292,
                                    "lng": 4.151623
                                  },
                                  "instructions": {
                                    "action": 27,
                                    "summary": "Exit the roundabout onto D 30.",
                                    "verbal_after": "Continue for 200 meters.",
                                    "verbal_before": "Exit the roundabout onto D 30.",
                                    "verbal_succint": "Exit the roundabout."
                                  },
                                  "polyline": "u}~kH{oiXFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELC",
                                  "start_location": {
                                    "lat": 49.31563,
                                    "lng": 4.149905
                                  },
                                  "travel_mode": "DRIVING"
                                },
                                {
                                  "distance": "46 m",
                                  "duration": "1 min",
                                  "end_location": {
                                    "lat": 49.314041,
                                    "lng": 4.151976
                                  },
                                  "instructions": {
                                    "action": 26,
                                    "summary": "Enter the roundabout and take the 1st exit onto D 30.",
                                    "verbal_alert": "Enter the roundabout and take the 1st exit onto D 30.",
                                    "verbal_before": "Enter the roundabout and take the 1st exit onto D 30.",
                                    "verbal_succint": "Enter the roundabout and take the 1st exit."
                                  },
                                  "polyline": "iu~kHsziXJBJAHGFIDMBSAS",
                                  "start_location": {
                                    "lat": 49.314292,
                                    "lng": 4.151623
                                  },
                                  "travel_mode": "DRIVING"
                                },
                                {
                                  "distance": "96 m",
                                  "duration": "1 min",
                                  "end_location": {
                                    "lat": 49.313434,
                                    "lng": 4.152921
                                  },
                                  "instructions": {
                                    "action": 27,
                                    "summary": "Exit the roundabout onto D 30.",
                                    "verbal_after": "Continue for 100 meters.",
                                    "verbal_before": "Exit the roundabout onto D 30. Then, in 100 meters, You will arrive at your destination.",
                                    "verbal_succint": "Exit the roundabout. Then, in 100 meters, You will arrive at your destination."
                                  },
                                  "polyline": "ws~kHy|iXBKDILURa@LWt@eAHQ",
                                  "start_location": {
                                    "lat": 49.314041,
                                    "lng": 4.151976
                                  },
                                  "travel_mode": "DRIVING"
                                },
                                {
                                  "distance": "1 m",
                                  "duration": "1 min",
                                  "end_location": {
                                    "lat": 49.313434,
                                    "lng": 4.152921
                                  },
                                  "instructions": {
                                    "action": 4,
                                    "summary": "You have arrived at your destination.",
                                    "verbal_alert": "You will arrive at your destination.",
                                    "verbal_before": "You have arrived at your destination."
                                  },
                                  "polyline": "}o~kHwbjX",
                                  "start_location": {
                                    "lat": 49.313434,
                                    "lng": 4.152921
                                  },
                                  "travel_mode": "DRIVING"
                                }
                              ]
                            }
                          ],
                          "notice": "",
                          "overview_polyline": {
                            "points": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?QBIBU?WFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELCJBJAHGFIDMBSASBKDILURa@LWt@eAHQ"
                          }
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DistanceRouteResponse"
                }
              }
            },
            "description": "Route successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Route",
        "tags": [
          "Distance API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/distance/route/json?origin=49.31067%2C4.14525\u0026destination=49.31344%2C4.15293\u0026mode=driving\u0026language=en\u0026alternatives=true\u0026method=distance\u0026details=full\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/distance/route/json?origin=49.31067%2C4.14525\u0026destination=49.31344%2C4.15293\u0026mode=driving\u0026language=en\u0026alternatives=true\u0026method=distance\u0026details=full\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/distance/route/json?origin=49.31067%2C4.14525\u0026destination=49.31344%2C4.15293\u0026mode=driving\u0026language=en\u0026alternatives=true\u0026method=distance\u0026details=full\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/geolocation/position": {
      "get": {
        "description": "The `/position` returns JSON location of your users thanks to IP address of their devices.\n",
        "operationId": "getGeolocationPosition",
        "parameters": [
          {
            "$ref": "#/components/parameters/geolocation_ip_address"
          },
          {
            "$ref": "#/components/parameters/search_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Geolocation position for the IP `173.79.254.254`",
                    "value": {
                      "accuracy": 5,
                      "city": "Alexandria",
                      "continent": "North America",
                      "country_code": "US",
                      "country_name": "United States",
                      "latitude": 38.7304,
                      "longitude": -77.0634,
                      "postal_code": "22308",
                      "region_state": "Virginia",
                      "timezone": "America/New_York",
                      "viewport": {
                        "northeast": {
                          "lat": 38.77531576420598,
                          "lng": -77.00582296106178
                        },
                        "southwest": {
                          "lat": 38.68548423579403,
                          "lng": -77.12097703893822
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/GeolocationResponse"
                }
              }
            },
            "description": "Geolocation successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Geolocation from an IP address",
        "tags": [
          "Geolocation API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/geolocation/position?private_key=YOUR_PRIVATE_API_KEY\u0026ip_address=173.79.254.254'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/geolocation/position?private_key=YOUR_PRIVATE_API_KEY\u0026ip_address=173.79.254.254\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/geolocation/position?private_key=YOUR_PRIVATE_API_KEY\u0026ip_address=173.79.254.254\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/geolocation/stores": {
      "get": {
        "description": "Retrieve the stores nearby an ip location. Stores are returned only if a relevant ip location is found - for an accuracy of 20km or less.\n",
        "operationId": "getStoresFromGeolocationPosition",
        "parameters": [
          {
            "$ref": "#/components/parameters/geolocation_ip_address"
          },
          {
            "$ref": "#/components/parameters/geolocation_limit"
          },
          {
            "$ref": "#/components/parameters/search_query"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Geolocation Position and Stores for the IP `173.79.254.254`",
                    "value": {
                      "accuracy": 5,
                      "city": "Alexandria",
                      "continent": "North America",
                      "country_code": "US",
                      "country_name": "United States",
                      "latitude": 38.7304,
                      "longitude": -77.0634,
                      "postal_code": "22308",
                      "region_state": "Virginia",
                      "stores": {
                        "features": [
                          {
                            "geometry": {
                              "coordinates": [
                                -77.1067,
                                38.719
                              ],
                              "type": "Point"
                            },
                            "properties": {
                              "address": {
                                "city": "London",
                                "country_code": "UK",
                                "lines": [
                                  "Building Centre",
                                  "26 Store Street"
                                ],
                                "zipcode": "WC1E 7BT"
                              },
                              "contact": {
                                "email": "contact@woosmap.com",
                                "phone": "+44 20 7693 4000",
                                "website": "https://www.woosmap.com"
                              },
                              "distance": 3972.39013285,
                              "last_updated": "2023-03-03T09:06:24.421371+00:00",
                              "name": "My Cool Store",
                              "open": {
                                "current_slice": {
                                  "end": "22:00",
                                  "start": "08:30"
                                },
                                "open_hours": [
                                  {
                                    "end": "22:00",
                                    "start": "08:30"
                                  }
                                ],
                                "open_now": true,
                                "week_day": 5
                              },
                              "opening_hours": {
                                "special": {
                                  "2015-02-07": [
                                    {
                                      "end": "23:00",
                                      "start": "08:00"
                                    }
                                  ]
                                },
                                "timezone": "Europe/London",
                                "usual": {
                                  "1": [],
                                  "default": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ]
                                }
                              },
                              "store_id": "STORE_ID_123456",
                              "tags": [
                                "wifi",
                                "covered_parking"
                              ],
                              "types": [
                                "drive",
                                "click_and_collect"
                              ],
                              "user_properties": {
                                "some_user_properties": "associated user value"
                              },
                              "weekly_opening": {
                                "1": {
                                  "hours": [],
                                  "isSpecial": false
                                },
                                "2": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "3": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "4": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "5": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "6": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "7": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "timezone": "Europe/London"
                              }
                            },
                            "type": "Feature"
                          }
                        ],
                        "pagination": {
                          "page": 1,
                          "pageCount": 2
                        },
                        "type": "FeatureCollection"
                      },
                      "timezone": "America/New_York",
                      "viewport": {
                        "northeast": {
                          "lat": 38.77531576420598,
                          "lng": -77.00582296106178
                        },
                        "southwest": {
                          "lat": 38.68548423579403,
                          "lng": -77.12097703893822
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/GeolocationStoresResponse"
                }
              }
            },
            "description": "Geolocation and Stores successufully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Assets nearby a Geolocation",
        "tags": [
          "Geolocation API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/geolocation/stores?private_key=YOUR_PRIVATE_API_KEY\u0026ip_address=173.79.254.254\u0026limit=1'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/geolocation/stores?private_key=YOUR_PRIVATE_API_KEY\u0026ip_address=173.79.254.254\u0026limit=1\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/geolocation/stores?private_key=YOUR_PRIVATE_API_KEY\u0026ip_address=173.79.254.254\u0026limit=1\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/indoor/directions/{venue_id}": {
      "get": {
        "description": "Returns the directions to go from an Origin to a Destination.\nRouting Configuration must be done before this endpoint will work.",
        "operationId": "api_routers_indoor_directions",
        "parameters": [
          {
            "description": "ID of the Venue",
            "in": "path",
            "name": "venue_id",
            "required": true,
            "schema": {
              "description": "ID of the Venue",
              "title": "Venue Id",
              "type": "string"
            }
          },
          {
            "description": "A string defining the origin of the route, in the format of `lat,lng,level`, `poi_id` (identifier of a POI) or `ref:poi_ref` (ref of a poi with starting with 'ref:') ",
            "examples": {
              "lll": {
                "summary": "lat,lng,level",
                "value": "48.8818546,2.3572283,0"
              },
              "poi": {
                "summary": "POI",
                "value": "123456"
              },
              "ref": {
                "summary": "Reference",
                "value": "ref:entrance"
              }
            },
            "in": "query",
            "name": "origin",
            "required": true,
            "schema": {
              "description": "A string defining the origin of the route, in the format of `lat,lng,level`, `poi_id` (identifier of a POI) or `ref:poi_ref` (ref of a poi with starting with 'ref:') ",
              "examples": {
                "lll": {
                  "summary": "lat,lng,level",
                  "value": "48.8818546,2.3572283,0"
                },
                "poi": {
                  "summary": "POI",
                  "value": "123456"
                },
                "ref": {
                  "summary": "Reference",
                  "value": "ref:entrance"
                }
              },
              "title": "Origin",
              "type": "string"
            }
          },
          {
            "description": "A string defining the destination of the route, in the format `lat,lng,level`, `poi_id` (identifier of a poi) or `ref:poi_ref` (ref of a poi with starting with 'ref:')",
            "examples": {
              "lll": {
                "summary": "lat,lng,level",
                "value": "48.8818546,2.3572283,0"
              },
              "poi": {
                "summary": "POI",
                "value": "123456"
              },
              "ref": {
                "summary": "Reference",
                "value": "ref:entrance"
              }
            },
            "in": "query",
            "name": "destination",
            "required": true,
            "schema": {
              "description": "A string defining the destination of the route, in the format `lat,lng,level`, `poi_id` (identifier of a poi) or `ref:poi_ref` (ref of a poi with starting with 'ref:')",
              "examples": {
                "lll": {
                  "summary": "lat,lng,level",
                  "value": "48.8818546,2.3572283,0"
                },
                "poi": {
                  "summary": "POI",
                  "value": "123456"
                },
                "ref": {
                  "summary": "Reference",
                  "value": "ref:entrance"
                }
              },
              "title": "Destination",
              "type": "string"
            }
          },
          {
            "description": "A supported language as an ISO 639-1 2 letter code.",
            "in": "query",
            "name": "language",
            "schema": {
              "default": "en",
              "description": "A supported language as an ISO 639-1 2 letter code.",
              "title": "Language",
              "type": "string"
            }
          },
          {
            "description": "Unit System to use for response",
            "in": "query",
            "name": "units",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "metric",
                    "imperial"
                  ],
                  "title": "UnitSystem",
                  "type": "string"
                }
              ],
              "default": "metric",
              "description": "Unit System to use for response"
            }
          },
          {
            "description": "A list of points by which the route should pass seperated by `|`. Waypoints can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
            "example": "48.8818546,2.3572283,0|123456|48.8818546,2.3572283,0|ref:main_exit",
            "in": "query",
            "name": "waypoints",
            "schema": {
              "default": "",
              "description": "A list of points by which the route should pass seperated by `|`. Waypoints can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
              "example": "48.8818546,2.3572283,0|123456|48.8818546,2.3572283,0|ref:main_exit",
              "title": "Waypoints",
              "type": "string"
            }
          },
          {
            "description": "If true and set with the waypoints parameter. The provided route is optimized by rearranging the waypoints in a more efficient order",
            "in": "query",
            "name": "optimize",
            "schema": {
              "default": false,
              "description": "If true and set with the waypoints parameter. The provided route is optimized by rearranging the waypoints in a more efficient order",
              "title": "Optimize",
              "type": "boolean"
            }
          },
          {
            "description": "The mode to use to calculate the path (depends on the modes which were used to digitize the venue)",
            "in": "query",
            "name": "mode",
            "schema": {
              "description": "The mode to use to calculate the path (depends on the modes which were used to digitize the venue)",
              "title": "Mode",
              "type": "string"
            }
          },
          {
            "description": "A list of Bounding Boxes which the routing should avoid seperated by `|`. A Bounding Box has a format of `level;lat,lng;lat,lng;lat,lng;lat,lng;`",
            "example": "1;48.8818546,2.3572283;48.8818547,2.3572282;48.8818548,2.3572281;48.8818549,2.3572280",
            "in": "query",
            "name": "avoid_in",
            "schema": {
              "description": "A list of Bounding Boxes which the routing should avoid seperated by `|`. A Bounding Box has a format of `level;lat,lng;lat,lng;lat,lng;lat,lng;`",
              "example": "1;48.8818546,2.3572283;48.8818547,2.3572282;48.8818548,2.3572281;48.8818549,2.3572280",
              "title": "Avoid In",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteCollection"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Directions",
        "tags": [
          "Indoor API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/indoor/directions/west_pal?language=en\u0026units=metric\u0026origin=3623024\u0026destination=3625106\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/indoor/directions/west_pal?language=en\u0026units=metric\u0026origin=3623024\u0026destination=3625106\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/indoor/directions/west_pal?language=en\u0026units=metric\u0026origin=3623024\u0026destination=3625106\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/indoor/distancematrix/{venue_id}": {
      "get": {
        "description": "Get distances and durations for a matrix of origins and destinations, based on the recommended route between start and end points for a specified travel mode.\nThe API returns information consisting of rows containing distance and duration values for each pair of start and end point.\nThe returned distances are designed to be used to find and sort multiple assets by road distance.\nDuration values are provided as complementary info.",
        "operationId": "api_routers_indoor_distance_matrix",
        "parameters": [
          {
            "description": "ID of the Venue",
            "in": "path",
            "name": "venue_id",
            "required": true,
            "schema": {
              "description": "ID of the Venue",
              "title": "Venue Id",
              "type": "string"
            }
          },
          {
            "description": "A string with a list of origins seperated by `|`. Origins can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
            "example": "1.2,2.1,1|exit_1|1.3,3.1,2|ref:main_exit",
            "in": "query",
            "name": "origins",
            "required": true,
            "schema": {
              "description": "A string with a list of origins seperated by `|`. Origins can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
              "example": "1.2,2.1,1|exit_1|1.3,3.1,2|ref:main_exit",
              "title": "Origins",
              "type": "string"
            }
          },
          {
            "description": "A string with a list of destinations seperated by `|`. Destinations can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
            "example": "1.2,2.1,1|exit_1|1.3,3.1,2|ref:main_exit",
            "in": "query",
            "name": "destinations",
            "required": true,
            "schema": {
              "description": "A string with a list of destinations seperated by `|`. Destinations can be of the format: `lat,lng,level`, `poi_id`, `ref:poi_ref`",
              "example": "1.2,2.1,1|exit_1|1.3,3.1,2|ref:main_exit",
              "title": "Destinations",
              "type": "string"
            }
          },
          {
            "description": "A supported language as an ISO 639-1 2 letter code.",
            "in": "query",
            "name": "language",
            "schema": {
              "default": "en",
              "description": "A supported language as an ISO 639-1 2 letter code.",
              "title": "Language",
              "type": "string"
            }
          },
          {
            "description": "The routing profile to use to calculate the path (depends on the modes which were used to digitize the venue)",
            "in": "query",
            "name": "routing_profile",
            "schema": {
              "default": "",
              "description": "The routing profile to use to calculate the path (depends on the modes which were used to digitize the venue)",
              "title": "Routing Profile",
              "type": "string"
            }
          },
          {
            "description": "Unit System to use for response",
            "in": "query",
            "name": "units",
            "schema": {
              "allOf": [
                {
                  "enum": [
                    "metric",
                    "imperial"
                  ],
                  "title": "UnitSystem",
                  "type": "string"
                }
              ],
              "default": "metric",
              "description": "Unit System to use for response"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceMatrixCollection"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Distance Matrix",
        "tags": [
          "Indoor API"
        ]
      }
    },
    "/indoor/style": {
      "get": {
        "description": "Returns the style layers.",
        "operationId": "api_routers_indoor_get_indoor_style",
        "parameters": [
          {
            "description": "The theme to apply to customize the style",
            "example": "woosmap_default",
            "in": "query",
            "name": "theme",
            "schema": {
              "description": "The theme to apply to customize the style",
              "example": "woosmap_default",
              "title": "Theme",
              "type": "string"
            }
          },
          {
            "description": "A supported language as an ISO 639-1 2 letter code.",
            "in": "query",
            "name": "language",
            "schema": {
              "default": "en",
              "description": "A supported language as an ISO 639-1 2 letter code.",
              "title": "Language",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Get Indoor Style",
        "tags": [
          "Indoor API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/indoor/style?language=en\u0026theme=woosmap_default\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/indoor/style?language=en\u0026theme=woosmap_default\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/indoor/style?language=en\u0026theme=woosmap_default\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/indoor/venues": {
      "get": {
        "description": "Returns a list of Venues associated with the project of the key used to authenticate the request.",
        "operationId": "api_routers_indoor_get_venues_by_key",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VenueListSchema"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Get Venues By Key",
        "tags": [
          "Indoor API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/indoor/venues?key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/indoor/venues?key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/indoor/venues?key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/indoor/venues/{venue_id}": {
      "get": {
        "description": "Returns a Venue based on the ID given.",
        "operationId": "api_routers_indoor_get_venue_by_key",
        "parameters": [
          {
            "description": "ID of the Venue to retrieve.",
            "in": "path",
            "name": "venue_id",
            "required": true,
            "schema": {
              "description": "ID of the Venue to retrieve.",
              "title": "Venue Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VenueSchema"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Get Venue By Key",
        "tags": [
          "Indoor API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/indoor/venues/west_pal?key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/indoor/venues/west_pal?key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/indoor/venues/west_pal?key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/indoor/venues/{venue_id}/features/{feature_id}": {
      "get": {
        "description": "Returns a single feature using its ID.",
        "operationId": "api_routers_indoor_get_feature_by_key",
        "parameters": [
          {
            "description": "ID of the venue",
            "in": "path",
            "name": "venue_id",
            "required": true,
            "schema": {
              "description": "ID of the venue",
              "title": "Venue Id",
              "type": "string"
            }
          },
          {
            "description": "ID of the feature",
            "in": "path",
            "name": "feature_id",
            "required": true,
            "schema": {
              "description": "ID of the feature",
              "title": "Feature Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleIndoorFeatureSchema"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Get Feature By Key",
        "tags": [
          "Indoor API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/indoor/venues/west_pal/features/3623459?key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/indoor/venues/west_pal/features/3623459?key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/indoor/venues/west_pal/features/3623459?key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/indoor/venues/{venue_id}/pois/autocomplete": {
      "get": {
        "description": "Autocomplete text search of the features of a venue using a name or description",
        "operationId": "api_routers_indoor_autocomplete_venue_pois_by_key",
        "parameters": [
          {
            "description": "ID of the venue",
            "in": "path",
            "name": "venue_id",
            "required": true,
            "schema": {
              "description": "ID of the venue",
              "title": "Venue Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items per page. A value of 0 means no pagination.",
            "in": "query",
            "name": "items_by_page",
            "schema": {
              "default": 0,
              "description": "Number of items per page. A value of 0 means no pagination.",
              "title": "Items By Page",
              "type": "integer"
            }
          },
          {
            "description": "Page number. 0 being the first page.",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 0,
              "description": "Page number. 0 being the first page.",
              "title": "Page",
              "type": "integer"
            }
          },
          {
            "description": "A string with the format lat,lng,level",
            "example": "48.8818546,2.3572283,0",
            "in": "query",
            "name": "from_location",
            "schema": {
              "description": "A string with the format lat,lng,level",
              "example": "48.8818546,2.3572283,0",
              "title": "From Location",
              "type": "string"
            }
          },
          {
            "description": "Search string. If not passed then all features will be listed alphabetically",
            "in": "query",
            "name": "q",
            "schema": {
              "description": "Search string. If not passed then all features will be listed alphabetically",
              "title": "Q",
              "type": "string"
            }
          },
          {
            "description": "Option to search even not searchable pois (extended=full)",
            "example": "full",
            "in": "query",
            "name": "extended",
            "schema": {
              "description": "Option to search even not searchable pois (extended=full)",
              "example": "full",
              "title": "Extended",
              "type": "string"
            }
          },
          {
            "description": "Filter by level.",
            "in": "query",
            "name": "level",
            "schema": {
              "description": "Filter by level.",
              "title": "Level",
              "type": "integer"
            }
          },
          {
            "description": "Filter by building (use `undefined` to find POIs not associated with a building.).",
            "in": "query",
            "name": "building",
            "schema": {
              "description": "Filter by building (use `undefined` to find POIs not associated with a building.).",
              "title": "Building",
              "type": "string"
            }
          },
          {
            "description": "Filter by category.",
            "in": "query",
            "name": "category",
            "schema": {
              "description": "Filter by category.",
              "title": "Category",
              "type": "string"
            }
          },
          {
            "description": "Filter by a comma seperated list of POI Refs.",
            "example": "ref:main_entrance,ref:side_entrance",
            "in": "query",
            "name": "ref",
            "schema": {
              "description": "Filter by a comma seperated list of POI Refs.",
              "example": "ref:main_entrance,ref:side_entrance",
              "title": "Ref",
              "type": "string"
            }
          },
          {
            "description": "A supported language as an ISO 639-1 2 letter code.",
            "in": "query",
            "name": "language",
            "schema": {
              "default": "en",
              "description": "A supported language as an ISO 639-1 2 letter code.",
              "title": "Language",
              "type": "string"
            }
          },
          {
            "description": "Filter by complex queries on properties (ex: indoor:=\"room\" OR door:=\"yes\").",
            "in": "query",
            "name": "advanced_filter",
            "schema": {
              "description": "Filter by complex queries on properties (ex: indoor:=\"room\" OR door:=\"yes\").",
              "title": "Advanced Filter",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompletePagination"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Autocomplete Venue Pois By Key",
        "tags": [
          "Indoor API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/indoor/venues/west_pal/pois/autocomplete?q=cham\u0026language=en\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/indoor/venues/west_pal/pois/autocomplete?q=cham\u0026language=en\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/indoor/venues/west_pal/pois/autocomplete?q=cham\u0026language=en\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/indoor/venues/{venue_id}/pois/search": {
      "get": {
        "description": "Full text search of the features of a venue using name or description",
        "operationId": "api_routers_indoor_search_venue_pois_by_key",
        "parameters": [
          {
            "description": "ID of the Venue",
            "in": "path",
            "name": "venue_id",
            "required": true,
            "schema": {
              "description": "ID of the Venue",
              "title": "Venue Id",
              "type": "string"
            }
          },
          {
            "description": "Number of items per page. A value of 0 means no pagination.",
            "in": "query",
            "name": "items_by_page",
            "schema": {
              "default": 0,
              "description": "Number of items per page. A value of 0 means no pagination.",
              "title": "Items By Page",
              "type": "integer"
            }
          },
          {
            "description": "Page number. 0 being the first page.",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 0,
              "description": "Page number. 0 being the first page.",
              "title": "Page",
              "type": "integer"
            }
          },
          {
            "description": "A string with the format lat,lng,level",
            "example": "48.8818546,2.3572283,0",
            "in": "query",
            "name": "from_location",
            "schema": {
              "description": "A string with the format lat,lng,level",
              "example": "48.8818546,2.3572283,0",
              "title": "From Location",
              "type": "string"
            }
          },
          {
            "description": "Search string. If not passed then all features will be listed alphabetically",
            "in": "query",
            "name": "q",
            "schema": {
              "description": "Search string. If not passed then all features will be listed alphabetically",
              "title": "Q",
              "type": "string"
            }
          },
          {
            "description": "Option to search even not searchable pois (extended=full)",
            "example": "full",
            "in": "query",
            "name": "extended",
            "schema": {
              "description": "Option to search even not searchable pois (extended=full)",
              "example": "full",
              "title": "Extended",
              "type": "string"
            }
          },
          {
            "description": "Filter by level.",
            "in": "query",
            "name": "level",
            "schema": {
              "description": "Filter by level.",
              "title": "Level",
              "type": "integer"
            }
          },
          {
            "description": "Filter by building (use `undefined` to find POIs not associated with a building.).",
            "in": "query",
            "name": "building",
            "schema": {
              "description": "Filter by building (use `undefined` to find POIs not associated with a building.).",
              "title": "Building",
              "type": "string"
            }
          },
          {
            "description": "Filter by category.",
            "in": "query",
            "name": "category",
            "schema": {
              "description": "Filter by category.",
              "title": "Category",
              "type": "string"
            }
          },
          {
            "description": "Filter by a comma seperated list of POI Refs.",
            "example": "ref:main_entrance,ref:side_entrance",
            "in": "query",
            "name": "ref",
            "schema": {
              "description": "Filter by a comma seperated list of POI Refs.",
              "example": "ref:main_entrance,ref:side_entrance",
              "title": "Ref",
              "type": "string"
            }
          },
          {
            "description": "A supported language as an ISO 639-1 2 letter code.",
            "in": "query",
            "name": "language",
            "schema": {
              "default": "en",
              "description": "A supported language as an ISO 639-1 2 letter code.",
              "title": "Language",
              "type": "string"
            }
          },
          {
            "description": "Filter by complex queries on properties (ex: indoor:=\"room\" OR door:=\"yes\").",
            "in": "query",
            "name": "advanced_filter",
            "schema": {
              "description": "Filter by complex queries on properties (ex: indoor:=\"room\" OR door:=\"yes\").",
              "title": "Advanced Filter",
              "type": "string"
            }
          },
          {
            "description": "Filter by a comma seperated list of POI IDs.",
            "example": "1234,4321,9876",
            "in": "query",
            "name": "id",
            "schema": {
              "description": "Filter by a comma seperated list of POI IDs.",
              "example": "1234,4321,9876",
              "title": "Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPagination"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseSchema"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Search Venue Pois By Key",
        "tags": [
          "Indoor API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/indoor/venues/west_pal/pois/search?id=3623459\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/indoor/venues/west_pal/pois/search?id=3623459\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/indoor/venues/west_pal/pois/search?id=3623459\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/indoor/venues/{venue_id}/tiles/{z}/{x}/{y}.pbf": {
      "get": {
        "description": "Returns a tile for the venue.",
        "operationId": "api_routers_indoor_tiles_by_key",
        "parameters": [
          {
            "description": "ID of the venue",
            "in": "path",
            "name": "venue_id",
            "required": true,
            "schema": {
              "description": "ID of the venue",
              "title": "Venue Id",
              "type": "string"
            }
          },
          {
            "description": "X coordinate of the tile",
            "in": "path",
            "name": "x",
            "required": true,
            "schema": {
              "description": "X coordinate of the tile",
              "title": "X",
              "type": "integer"
            }
          },
          {
            "description": "Y coordinate of the tile",
            "in": "path",
            "name": "y",
            "required": true,
            "schema": {
              "description": "Y coordinate of the tile",
              "title": "Y",
              "type": "integer"
            }
          },
          {
            "description": "Zoom level",
            "in": "path",
            "name": "z",
            "required": true,
            "schema": {
              "description": "Zoom level",
              "title": "Z",
              "type": "integer"
            }
          },
          {
            "description": "Filter POI labels by advanced filter.",
            "in": "query",
            "name": "advanced_filter",
            "schema": {
              "description": "Filter POI labels by advanced filter.",
              "title": "Advanced Filter",
              "type": "string"
            }
          },
          {
            "description": "Disable the zoom_min for POIs.",
            "in": "query",
            "name": "disable_zoom_min",
            "schema": {
              "default": false,
              "description": "Disable the zoom_min for POIs.",
              "title": "Disable Zoom Min",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "title": "Response",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          }
        ],
        "summary": "Tiles By Key",
        "tags": [
          "Indoor API"
        ]
      }
    },
    "/localities/autocomplete": {
      "get": {
        "description": "Autocomplete on worldwide suggestions for a for text-based geographic searches. It can match on full words as well as substrings. You can therefore send queries as the user types, to provide on-the-fly addresses, city names, postal codes or suburb name suggestions.\n\u003e⚠️ To retrieve fields marked as  **deprecated** in response schema, please read [Details endpoint](#operation/localitiesDetails)\n",
        "operationId": "localitiesAutocomplete",
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_input"
          },
          {
            "$ref": "#/components/parameters/localities_types"
          },
          {
            "$ref": "#/components/parameters/localities_components"
          },
          {
            "$ref": "#/components/parameters/localities_language"
          },
          {
            "$ref": "#/components/parameters/localities_location"
          },
          {
            "$ref": "#/components/parameters/localities_radius"
          },
          {
            "$ref": "#/components/parameters/localities_data"
          },
          {
            "$ref": "#/components/parameters/localities_extended"
          },
          {
            "$ref": "#/components/parameters/localities_custom_description"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Autocomplete localities results for input `Lond` and components `country:gb`",
                    "value": {
                      "localities": [
                        {
                          "description": "London, City of London, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "length": 4,
                                "offset": 0
                              },
                              {
                                "length": 4,
                                "offset": 16
                              }
                            ]
                          },
                          "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
                          "type": "locality"
                        },
                        {
                          "description": "Londonderry/Derry, Derry City and Strabane, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "length": 4,
                                "offset": 0
                              }
                            ]
                          },
                          "public_id": "m/T2C4YI2LgszkKXrELBC+9dfC8=",
                          "type": "locality"
                        },
                        {
                          "description": "London Apprentice, Cornwall, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "length": 4,
                                "offset": 0
                              }
                            ]
                          },
                          "public_id": "52MnrbHVWH21CLWH8VY/YWKhqeM=",
                          "type": "locality"
                        },
                        {
                          "description": "Londesborough, East Riding of Yorkshire, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "length": 4,
                                "offset": 0
                              }
                            ]
                          },
                          "public_id": "VOBREUi72/VtnsYgE6aI8HNYcxg=",
                          "type": "locality"
                        },
                        {
                          "description": "Long Stratton, Norfolk, United Kingdom",
                          "public_id": "Js0mQmmeI46X3hiqRj/R4pvb8mQ=",
                          "type": "locality"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LocalitiesAutocompleteCollectionResponse"
                }
              }
            },
            "description": "Autocompletion Localities successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Autocomplete for Localities",
        "tags": [
          "Localities API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/localities/autocomplete/?input=Lond\u0026components=country%3Agb\u0026no_deprecated_fields=true\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/localities/autocomplete/?input=Lond\u0026components=country%3Agb\u0026no_deprecated_fields=true\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/localities/autocomplete/?input=Lond\u0026components=country%3Agb\u0026no_deprecated_fields=true\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/localities/details": {
      "get": {
        "description": "Provides details of an autocomplete suggestion (using the suggestion’s `public_id`).\n",
        "operationId": "localitiesDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_public_id"
          },
          {
            "$ref": "#/components/parameters/localities_language"
          },
          {
            "$ref": "#/components/parameters/localities_fields"
          },
          {
            "$ref": "#/components/parameters/address_cc_format"
          },
          {
            "$ref": "#/components/parameters/localities_page"
          },
          {
            "$ref": "#/components/parameters/localities_addresses_per_page"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Address": {
                    "summary": "Localities Address details from a `public_id` retrieved using Localities autocomplete",
                    "value": {
                      "result": {
                        "address_components": [
                          {
                            "long_name": "United Kingdom",
                            "short_name": "GB",
                            "types": [
                              "country",
                              "administrative_area_level_0"
                            ]
                          },
                          {
                            "long_name": "City of London",
                            "short_name": "City of London",
                            "types": [
                              "administrative_area_level_1"
                            ]
                          },
                          {
                            "long_name": "London",
                            "short_name": "London",
                            "types": [
                              "locality"
                            ]
                          },
                          {
                            "long_name": "SW1A 0AA",
                            "short_name": "SW1A 0AA",
                            "types": [
                              "postal_codes"
                            ]
                          },
                          {
                            "long_name": "Houses Of Parliament",
                            "short_name": "Houses Of Parliament",
                            "types": [
                              "premise"
                            ]
                          },
                          {
                            "long_name": "House Of Commons",
                            "short_name": "House Of Commons",
                            "types": [
                              "organisation"
                            ]
                          }
                        ],
                        "formatted_address": "House Of Commons, Houses Of Parliament, London, SW1A 0AA",
                        "geometry": {
                          "accuracy": "ROOFTOP",
                          "location": {
                            "lat": 51.4998415,
                            "lng": -0.1246375
                          }
                        },
                        "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ==",
                        "types": [
                          "address"
                        ]
                      }
                    }
                  },
                  "PostalCode": {
                    "summary": "Localities Postal Code details from a `public_id` retrieved using Localities autocomplete",
                    "value": {
                      "result": {
                        "address_components": [
                          {
                            "long_name": "United Kingdom",
                            "short_name": "GB",
                            "types": [
                              "country",
                              "administrative_area_level_0"
                            ]
                          },
                          {
                            "long_name": "City of London",
                            "short_name": "City of London",
                            "types": [
                              "administrative_area_level_1"
                            ]
                          }
                        ],
                        "addresses": {
                          "list": [
                            {
                              "description": "House Of Commons, Houses Of Parliament, London, SW1A 0AA",
                              "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ=="
                            }
                          ],
                          "pagination": {
                            "address_count": 1,
                            "addresses_per_page": 1,
                            "page": 1,
                            "page_count": 1
                          }
                        },
                        "formatted_address": "SW1A 0AA, City of London",
                        "geometry": {
                          "location": {
                            "lat": 51.49984,
                            "lng": -0.124663
                          }
                        },
                        "name": "SW1A 0AA",
                        "public_id": "QaCU+fBtigK65ztSrqHqUoUDwZw=",
                        "types": [
                          "postal_code"
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LocalitiesDetailsAddressResponse"
                    },
                    {
                      "$ref": "#/components/schemas/LocalitiesDetailsPostalCodeResponse"
                    }
                  ]
                }
              }
            },
            "description": "Details Localities successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Details of a Locality",
        "tags": [
          "Localities API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/localities/details?public_id=TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ%3D%3D\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/localities/details?public_id=TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ%3D%3D\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/localities/details?public_id=TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ%3D%3D\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/localities/geocode": {
      "get": {
        "description": "Provides details for an address or a geographic position. Either parameter `address` **or** `latlng` is required.\n",
        "operationId": "localitiesGeocode",
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_address"
          },
          {
            "$ref": "#/components/parameters/localities_latlng"
          },
          {
            "$ref": "#/components/parameters/localities_list_sub_buildings"
          },
          {
            "$ref": "#/components/parameters/localities_components"
          },
          {
            "$ref": "#/components/parameters/localities_language"
          },
          {
            "$ref": "#/components/parameters/localities_fields"
          },
          {
            "$ref": "#/components/parameters/localities_data"
          },
          {
            "$ref": "#/components/parameters/localities_cc_format"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "geocode": {
                    "summary": "Geocode Results for address `Place Jeanne-d'Arc` with components `country:FR`",
                    "value": {
                      "results": [
                        {
                          "address_components": [
                            {
                              "long_name": "France",
                              "short_name": "FR",
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ]
                            },
                            {
                              "long_name": "Paris",
                              "short_name": "Paris",
                              "types": [
                                "locality"
                              ]
                            },
                            {
                              "long_name": "75013",
                              "short_name": "75013",
                              "types": [
                                "postal_codes"
                              ]
                            },
                            {
                              "long_name": "Place Jeanne D'Arc",
                              "short_name": "Place Jeanne D'Arc",
                              "types": [
                                "route"
                              ]
                            }
                          ],
                          "formatted_address": "Place Jeanne D'Arc, 75013, Paris",
                          "geometry": {
                            "location": {
                              "lat": 48.829405,
                              "lng": 2.367944
                            },
                            "location_type": "GEOMETRIC_CENTER"
                          },
                          "public_id": "MCtGVFlkLzFNc2lCU3hMQUtxKy9GaXl5K3VNPV9f",
                          "types": [
                            "route"
                          ]
                        }
                      ]
                    }
                  },
                  "reverse": {
                    "summary": "Reverse Geocode Results for latlng `51.52089223979333, -0.195460973340401` with list_sub_buildings `true`",
                    "value": {
                      "results": [
                        {
                          "address_components": [
                            {
                              "long_name": "United Kingdom",
                              "short_name": "GB",
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ]
                            },
                            {
                              "long_name": "City of London",
                              "short_name": "City of London",
                              "types": [
                                "administrative_area_level_1"
                              ]
                            },
                            {
                              "long_name": "London W",
                              "short_name": "London W",
                              "types": [
                                "district"
                              ]
                            },
                            {
                              "long_name": "City of London",
                              "short_name": "City of London",
                              "types": [
                                "county"
                              ]
                            },
                            {
                              "long_name": "London",
                              "short_name": "London",
                              "types": [
                                "locality"
                              ]
                            },
                            {
                              "long_name": "W2 5ER",
                              "short_name": "W2 5ER",
                              "types": [
                                "postal_codes"
                              ]
                            },
                            {
                              "long_name": "Alfred Road",
                              "short_name": "Alfred Road",
                              "types": [
                                "route"
                              ]
                            },
                            {
                              "long_name": "Radway House",
                              "short_name": "Radway House",
                              "types": [
                                "premise"
                              ]
                            }
                          ],
                          "distance": 28.62347934634507,
                          "formatted_address": "Radway House, Alfred Road, London, W2 5ER",
                          "geometry": {
                            "location": {
                              "lat": 51.5211258,
                              "lng": -0.1956346
                            },
                            "location_type": "ROOFTOP"
                          },
                          "public_id": "",
                          "sub_buildings": [
                            {
                              "description": "Flat 1, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9faitia1pNNURnOWYvQmRjMUdweXl5SjdLZUZnPQ=="
                            },
                            {
                              "description": "Flat 2, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fbTRoZVpxYkhBYVVXSytqek04UGtGQ1VLTVI0PQ=="
                            },
                            {
                              "description": "Flat 3, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fcmY1MHV6aE5kVytLWWZLV3JabzFzR2lnbThzPQ=="
                            },
                            {
                              "description": "Flat 4, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fajlaWXJJUDFKSmI1Y0dpNElDanBQejF2YUg4PQ=="
                            },
                            {
                              "description": "Flat 5, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fbkdEZTNOODZNL0VlWGtoR0pSa2tBS1NMYndVPQ=="
                            },
                            {
                              "description": "Flat 6, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fTGxlWUlKN2NhU1JXcTBuSEs1RExiamliNlpNPQ=="
                            },
                            {
                              "description": "Flat 7, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9feVZXa05ISjhzVGNHK2NQUHFpNlFIUWgvSnpJPQ=="
                            },
                            {
                              "description": "Flat 8, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fTVc5NldSeWpuOENUS2xST21vZzdnNGxGQldrPQ=="
                            },
                            {
                              "description": "Flat 9, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fN3RkdE9HeHBwT2M5R1hQMUFwNDJUc3NwRklZPQ=="
                            },
                            {
                              "description": "Flat 10, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fR2RVRHpoYll4a2RlTldjLzF3NVNFTXNZYzlFPQ=="
                            },
                            {
                              "description": "Flat 11, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fL3FXbnVZU2h4bjAwMDNKK3hJeU9OL3lnemFzPQ=="
                            },
                            {
                              "description": "Flat 12, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fVVVCUWhpNVJQWWk2eTl1WFBTVTRmK3Zma3VBPQ=="
                            },
                            {
                              "description": "Flat 13, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fV2hSUDNadnFMN3ZzaWJ6UFd2MWM3aW1qT3hBPQ=="
                            },
                            {
                              "description": "Flat 14, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fcWxGbFRlcE1TVStZVElodzFSdVhiTGxZTXl3PQ=="
                            },
                            {
                              "description": "Flat 15, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fYjR5VHRXMmZTQ0FOMGwwZHJNaFh5TFRnVHlnPQ=="
                            },
                            {
                              "description": "Flat 16, Radway House, Alfred Road, London, W2 5ER",
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fNmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PQ=="
                            }
                          ],
                          "types": [
                            "address"
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LocalitiesGeocodeCollectionResponse"
                }
              }
            },
            "description": "Request Localities Geocode successful"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Geocode a locality or Reverse Geocode a latlng",
        "tags": [
          "Localities API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/localities/geocode?address=Place%20Jeanne-d'\\''Arc\u0026components=country%3AFR\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/localities/geocode?address=Place%20Jeanne-d'Arc\u0026components=country%3AFR\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/localities/geocode?address=Place%20Jeanne-d'Arc\u0026components=country%3AFR\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/merchants/brand": {
      "get": {
        "description": "Retrieve clean name and logo in response for a single dirty transaction.\n",
        "operationId": "getMerchantsBrand",
        "parameters": [
          {
            "$ref": "#/components/parameters/merchants_dirty_name"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Merchant Clean name for dirty_name `APPLE.COM%2FBILL`",
                    "value": {
                      "merchants": [
                        {
                          "clean_name": "Apple",
                          "country": "",
                          "dirty_name": "APPLE.COM%2FBILL",
                          "logo": "a0e920d9f5de2e17d7a9c38a65ca6943",
                          "logo_url": "https://api.woosmap.com/merchants/logos/a0e920d9f5de2e17d7a9c38a65ca6943.png",
                          "status": "OK"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/MerchantsBrandResponse"
                }
              }
            },
            "description": "Request Merchants successful"
          },
          "400": {
            "description": "dirty_name was not provided"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Get Merchant Clean Name",
        "tags": [
          "Merchants API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/merchants/brand?dirty_name=APPLE.COM%252FBILL\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/merchants/brand?dirty_name=APPLE.COM%252FBILL\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\n\nvar config = {\n  method: 'get',\n  url: 'https://api.woosmap.com/merchants/brand?dirty_name=APPLE.COM%252FBILL\u0026key=YOUR_PUBLIC_API_KEY',\n  headers: { \n    'Referer': 'http://localhost'\n  }\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      },
      "post": {
        "description": "Retrieve clean names and logos in response to a dirty transactions POST.\n",
        "operationId": "getMerchantsBrandPost",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Merchant Clean name body request as JSON",
                  "value": {
                    "merchants": [
                      {
                        "country": "GB",
                        "dirty_name": "MCDO UK 2231 EP"
                      },
                      {
                        "country": "IT",
                        "dirty_name": "Zara Fashion Retail, S.A."
                      },
                      {
                        "country": "IN",
                        "dirty_name": "APOLLO PHARMACY BANGALORE IN"
                      },
                      {
                        "dirty_name": "PIZZA HUT - SHOP 157"
                      },
                      {
                        "country": "FR",
                        "dirty_name": "CARREFOUR CITY 3112846"
                      },
                      {
                        "country": "IE",
                        "dirty_name": "ITUNES.COM/BILL"
                      },
                      {
                        "country": "ES",
                        "dirty_name": "Pepa SL Gracia"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/MerchantsBrandRequest"
              }
            }
          },
          "description": "The request body of Merchants Brand must be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Merchant Clean names for various dirty names such as `MCDO UK 2231 EP`",
                    "value": {
                      "merchants": [
                        {
                          "clean_name": "McDonald's",
                          "country": "GB",
                          "dirty_name": "MCDO UK 2231 EP",
                          "logo": "419b279b6609768a3106ce5a5b4dd70b",
                          "logo_url": "https://api.woosmap.com/merchants/logos/419b279b6609768a3106ce5a5b4dd70b.png",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Zara",
                          "country": "IT",
                          "dirty_name": "Zara Fashion Retail, S.A.",
                          "logo": "72fc39033e0d9e923a0236cb874c9309",
                          "logo_url": "https://api.woosmap.com/merchants/logos/72fc39033e0d9e923a0236cb874c9309.png",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Apollo Pharmacy",
                          "country": "IN",
                          "dirty_name": "APOLLO PHARMACY BANGALORE IN",
                          "logo": "40793cc756be14ca9a268f19704422eb",
                          "logo_url": "https://api.woosmap.com/merchants/logos/40793cc756be14ca9a268f19704422eb.png",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Pizza Hut",
                          "country": "",
                          "dirty_name": "PIZZA HUT - SHOP 157",
                          "logo": "ab3abe56460ab7cb8b3ebff61de8f032",
                          "logo_url": "https://api.woosmap.com/merchants/logos/ab3abe56460ab7cb8b3ebff61de8f032.png",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Carrefour City",
                          "country": "FR",
                          "dirty_name": "CARREFOUR CITY 3112846",
                          "logo": "08ee8a3cecbcd3b7d9103bcf0e04db7e",
                          "logo_url": "https://api.woosmap.com/merchants/logos/08ee8a3cecbcd3b7d9103bcf0e04db7e.png",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Apple",
                          "country": "IE",
                          "dirty_name": "ITUNES.COM/BILL",
                          "logo": "5eb75a5239b76287f44021f8e6e1bd41",
                          "logo_url": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
                          "status": "OK"
                        },
                        {
                          "clean_name": "",
                          "country": "ES",
                          "dirty_name": "Pepa SL Gracia",
                          "logo": "",
                          "logo_url": "",
                          "status": "NOT_FOUND"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/MerchantsBrandResponse"
                }
              }
            },
            "description": "Merchants Brand successfully retrieved"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Get Merchants Clean Names using POST",
        "tags": [
          "Merchants API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X POST 'https://api.woosmap.com/merchants/brand?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"merchants\": [\n    {\n      \"dirty_name\": \"MCDO UK 2231 EP\",\n      \"country\": \"GB\"\n    },\n    {\n      \"dirty_name\": \"Zara Fashion Retail, S.A.\",\n      \"country\": \"IT\"\n    },\n    {\n      \"dirty_name\": \"APOLLO PHARMACY BANGALORE IN\",\n      \"country\": \"IN\"\n    },\n    {\n      \"dirty_name\": \"PIZZA HUT - SHOP 157\"\n    },\n    {\n      \"dirty_name\": \"CARREFOUR CITY 3112846\",\n      \"country\": \"FR\"\n    },\n    {\n      \"dirty_name\": \"ITUNES.COM/BILL\",\n      \"country\": \"IE\"\n    },\n    {\n      \"dirty_name\": \"Pepa SL Gracia\",\n      \"country\": \"ES\"\n    }\n  ]\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/merchants/brand?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"merchants\": [\n        {\n            \"dirty_name\": \"MCDO UK 2231 EP\",\n            \"country\": \"GB\"\n        },\n        {\n            \"dirty_name\": \"Zara Fashion Retail, S.A.\",\n            \"country\": \"IT\"\n        },\n        {\n            \"dirty_name\": \"APOLLO PHARMACY BANGALORE IN\",\n            \"country\": \"IN\"\n        },\n        {\n            \"dirty_name\": \"PIZZA HUT - SHOP 157\"\n        },\n        {\n            \"dirty_name\": \"CARREFOUR CITY 3112846\",\n            \"country\": \"FR\"\n        },\n        {\n            \"dirty_name\": \"ITUNES.COM/BILL\",\n            \"country\": \"IE\"\n        },\n        {\n            \"dirty_name\": \"Pepa SL Gracia\",\n            \"country\": \"ES\"\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"merchants\": [\n    {\n      \"dirty_name\": \"MCDO UK 2231 EP\",\n      \"country\": \"GB\"\n    },\n    {\n      \"dirty_name\": \"Zara Fashion Retail, S.A.\",\n      \"country\": \"IT\"\n    },\n    {\n      \"dirty_name\": \"APOLLO PHARMACY BANGALORE IN\",\n      \"country\": \"IN\"\n    },\n    {\n      \"dirty_name\": \"PIZZA HUT - SHOP 157\"\n    },\n    {\n      \"dirty_name\": \"CARREFOUR CITY 3112846\",\n      \"country\": \"FR\"\n    },\n    {\n      \"dirty_name\": \"ITUNES.COM/BILL\",\n      \"country\": \"IE\"\n    },\n    {\n      \"dirty_name\": \"Pepa SL Gracia\",\n      \"country\": \"ES\"\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/merchants/brand?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/merchants/place": {
      "post": {
        "description": "Retrieve clean names, logos and Google Place ID of given dirty merchants name.\n",
        "operationId": "getMerchantsPlace",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Merchant Clean name body request as JSON",
                  "value": {
                    "merchants": [
                      {
                        "country": "GB",
                        "dirty_name": "MCDO UK 2231 EP",
                        "merchant_id": "234482729011"
                      },
                      {
                        "country": "IT",
                        "dirty_name": "Zara Fashion Retail, S.A.",
                        "merchant_id": "*44532UY2T33219"
                      },
                      {
                        "country": "FR",
                        "dirty_name": "CARREFOUR CITY 3112846",
                        "merchant_id": "9651781125"
                      },
                      {
                        "country": "IE",
                        "dirty_name": "ITUNES.COM/BILL",
                        "merchant_id": "2070070200925"
                      },
                      {
                        "country": "ES",
                        "dirty_name": "Pepa SL Gracia",
                        "merchant_id": "34J21189"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/MerchantsPlaceRequest"
              }
            }
          },
          "description": "The request body of Merchants Placemust be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Merchant Clean names with google place_id for various dirty names such as `MCDO UK 2231 EP`",
                    "value": {
                      "merchants": [
                        {
                          "clean_name": "McDonald's",
                          "country": "GB",
                          "dirty_name": "MCDO UK 2231 EP",
                          "logo": "419b279b6609768a3106ce5a5b4dd70b",
                          "logo_url": "https://api.woosmap.com/merchants/logos/419b279b6609768a3106ce5a5b4dd70b.png",
                          "merchant_id": "234482729011",
                          "place_id": "ChIJGS7Sga0cdkgR46nd-S661TM",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Zara",
                          "country": "IT",
                          "dirty_name": "Zara Fashion Retail, S.A.",
                          "logo": "72fc39033e0d9e923a0236cb874c9309",
                          "logo_url": "https://api.woosmap.com/merchants/logos/72fc39033e0d9e923a0236cb874c9309.png",
                          "merchant_id": "*44532UY2T33219",
                          "place_id": "ChIJF2vQecLGhkcR83Zbpwpej3I",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Carrefour City",
                          "country": "FR",
                          "dirty_name": "CARREFOUR CITY 3112846",
                          "logo": "08ee8a3cecbcd3b7d9103bcf0e04db7e",
                          "logo_url": "https://api.woosmap.com/merchants/logos/08ee8a3cecbcd3b7d9103bcf0e04db7e.png",
                          "merchant_id": "9651781125",
                          "place_id": "ChIJJ7ZEZDUnVQ0Ru5gudUqdvKM",
                          "status": "OK"
                        },
                        {
                          "clean_name": "Apple",
                          "country": "IE",
                          "dirty_name": "ITUNES.COM/BILL",
                          "logo": "5eb75a5239b76287f44021f8e6e1bd41",
                          "logo_url": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
                          "merchant_id": "2070070200925",
                          "place_id": "",
                          "status": "OK"
                        },
                        {
                          "clean_name": "",
                          "country": "ES",
                          "dirty_name": "Pepa SL Gracia",
                          "logo": "",
                          "logo_url": "",
                          "merchant_id": "34J21189",
                          "place_id": "ChIJZ9fQvb2ipBIRyaZy8wUqRGQ",
                          "status": "OK"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/MerchantsPlaceResponse"
                }
              }
            },
            "description": "Merchants Place successfully retrieved"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Get Merchants Place",
        "tags": [
          "Merchants API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X POST 'https://api.woosmap.com/merchants/place?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"merchants\": [\n    {\n      \"dirty_name\": \"MCDO UK 2231 EP\",\n      \"country\": \"GB\",\n      \"merchant_id\": \"234482729011\"\n    },\n    {\n      \"dirty_name\": \"Zara Fashion Retail, S.A.\",\n      \"country\": \"IT\",\n      \"merchant_id\": \"*44532UY2T33219\"\n    },\n    {\n      \"dirty_name\": \"CARREFOUR CITY 3112846\",\n      \"country\": \"FR\",\n      \"merchant_id\": \"9651781125\"\n    },\n    {\n      \"dirty_name\": \"ITUNES.COM/BILL\",\n      \"country\": \"IE\",\n      \"merchant_id\": \"2070070200925\"\n    },\n    {\n      \"dirty_name\": \"Pepa SL Gracia\",\n      \"country\": \"ES\",\n      \"merchant_id\": \"34J21189\"\n    }\n  ]\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/merchants/place?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"merchants\": [\n        {\n            \"dirty_name\": \"MCDO UK 2231 EP\",\n            \"country\": \"GB\",\n            \"merchant_id\": \"234482729011\"\n        },\n        {\n            \"dirty_name\": \"Zara Fashion Retail, S.A.\",\n            \"country\": \"IT\",\n            \"merchant_id\": \"*44532UY2T33219\"\n        },\n        {\n            \"dirty_name\": \"CARREFOUR CITY 3112846\",\n            \"country\": \"FR\",\n            \"merchant_id\": \"9651781125\"\n        },\n        {\n            \"dirty_name\": \"ITUNES.COM/BILL\",\n            \"country\": \"IE\",\n            \"merchant_id\": \"2070070200925\"\n        },\n        {\n            \"dirty_name\": \"Pepa SL Gracia\",\n            \"country\": \"ES\",\n            \"merchant_id\": \"34J21189\"\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"merchants\": [\n    {\n      \"dirty_name\": \"MCDO UK 2231 EP\",\n      \"country\": \"GB\",\n      \"merchant_id\": \"234482729011\"\n    },\n    {\n      \"dirty_name\": \"Zara Fashion Retail, S.A.\",\n      \"country\": \"IT\",\n      \"merchant_id\": \"*44532UY2T33219\"\n    },\n    {\n      \"dirty_name\": \"CARREFOUR CITY 3112846\",\n      \"country\": \"FR\",\n      \"merchant_id\": \"9651781125\"\n    },\n    {\n      \"dirty_name\": \"ITUNES.COM/BILL\",\n      \"country\": \"IE\",\n      \"merchant_id\": \"2070070200925\"\n    },\n    {\n      \"dirty_name\": \"Pepa SL Gracia\",\n      \"country\": \"ES\",\n      \"merchant_id\": \"34J21189\"\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/merchants/place?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/stores": {
      "delete": {
        "description": "Used to delete one or more assets. The `storeId` specified in `query` parameter is the id of the asset to delete. To delete several assets, use the comma as a separator. To delete all project assets, omit the `query` parameter.\n",
        "operationId": "deleteStores",
        "parameters": [
          {
            "description": "The query to target assets ID to delete",
            "example": "idstore:[{storeId1},{storeId2}]",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Success response for Stores deleted",
                    "value": {
                      "status": "success",
                      "value": 2
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            },
            "description": "Assets successfully deleted"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Delete the Assets",
        "tags": [
          "Data Management API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X DELETE 'https://api.woosmap.com/stores/?private_key=YOUR_PRIVATE_API_KEY'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\n\nvar config = {\n  method: 'delete',\n  url: 'https://api.woosmap.com/stores/?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { }\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      },
      "post": {
        "description": "Used to batch create Assets to a specific project identified with the `private_key` parameter.\n",
        "operationId": "createStores",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Stores data to create as JSON",
                  "value": {
                    "stores": [
                      {
                        "address": {
                          "city": "London",
                          "countryCode": "UK",
                          "lines": [
                            "Building Centre",
                            "26 Store Street"
                          ],
                          "zipcode": "WC1E 7BT"
                        },
                        "contact": {
                          "email": "contact@woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "website": "https://www.woosmap.com"
                        },
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "name": "My Cool Store",
                        "openingHours": {
                          "special": {
                            "2015-02-07": [
                              {
                                "end": "23:00",
                                "start": "08:00"
                              }
                            ]
                          },
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "end": "22:00",
                                "start": "08:30"
                              }
                            ]
                          }
                        },
                        "storeId": "STORE_ID_123456",
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        }
                      },
                      {
                        "address": {
                          "city": "Alexandria",
                          "countryCode": "US",
                          "lines": [
                            "1805-1899",
                            "Orchard St"
                          ],
                          "zipcode": "22309"
                        },
                        "contact": {
                          "email": "contact@woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "website": "https://www.woosmap.com"
                        },
                        "location": {
                          "lat": 38.5239,
                          "lng": -77.0157
                        },
                        "name": "My Cool Store 2",
                        "openingHours": {
                          "timezone": "America/New_York",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "end": "22:00",
                                "start": "08:30"
                              }
                            ]
                          }
                        },
                        "storeId": "STORE_ID_45678",
                        "tags": [
                          "covered_parking"
                        ],
                        "types": [
                          "drive"
                        ],
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        }
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              }
            }
          },
          "description": "The request body must of Stores Creation be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Success response for Stores Created",
                    "value": {
                      "status": "success",
                      "value": "2 stores"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            },
            "description": "Assets successfully created"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Create your Assets",
        "tags": [
          "Data Management API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X POST 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"stores\": [\n        {\n            \"types\": [\n                \"drive\",\n                \"click_and_collect\"\n            ],\n            \"tags\": [\n                \"wifi\",\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.719,\n                \"lng\": -77.1067\n            },\n            \"storeId\": \"STORE_ID_123456\",\n            \"name\": \"My Cool Store\",\n            \"address\": {\n                \"lines\": [\n                    \"Building Centre\",\n                    \"26 Store Street\"\n                ],\n                \"countryCode\": \"UK\",\n                \"city\": \"London\",\n                \"zipcode\": \"WC1E 7BT\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"Europe/London\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                },\n                \"special\": {\n                    \"2015-02-07\": [\n                        {\n                            \"start\": \"08:00\",\n                            \"end\": \"23:00\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"types\": [\n                \"drive\"\n            ],\n            \"tags\": [\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.5239,\n                \"lng\": -77.0157\n            },\n            \"storeId\": \"STORE_ID_45678\",\n            \"name\": \"My Cool Store 2\",\n            \"address\": {\n                \"lines\": [\n                    \"1805-1899\",\n                    \"Orchard St\"\n                ],\n                \"countryCode\": \"US\",\n                \"city\": \"Alexandria\",\n                \"zipcode\": \"22309\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"America/New_York\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      },
      "put": {
        "description": "Used to update assets in batch. `storeId` must exists when using `PUT` method, if one asset does not exists, the batch will be refused.",
        "operationId": "updateStores",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Stores data to update as JSON",
                  "value": {
                    "stores": [
                      {
                        "address": {
                          "city": "Alexandria",
                          "countryCode": "US",
                          "lines": [
                            "698-500",
                            " Lloyds Ln"
                          ],
                          "zipcode": "VA 22302"
                        },
                        "contact": {
                          "email": "contact@woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "website": "https://www.woosmap.com"
                        },
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "name": "My Cool Store",
                        "openingHours": {
                          "special": {
                            "2015-02-07": [
                              {
                                "end": "23:00",
                                "start": "08:00"
                              }
                            ]
                          },
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "end": "22:00",
                                "start": "08:30"
                              }
                            ]
                          }
                        },
                        "storeId": "STORE_ID_123456",
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        }
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              }
            }
          },
          "description": "The request body of Stores Update must be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Success response for Stores updated",
                    "value": {
                      "status": "success",
                      "value": "1 stores"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            },
            "description": "Assets successfully updated"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Update the Assets",
        "tags": [
          "Data Management API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X PUT 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"698-500\",\n          \" Lloyds Ln\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"VA 22302\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"stores\": [\n        {\n            \"types\": [\n                \"drive\",\n                \"click_and_collect\"\n            ],\n            \"tags\": [\n                \"wifi\",\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.719,\n                \"lng\": -77.1067\n            },\n            \"storeId\": \"STORE_ID_123456\",\n            \"name\": \"My Cool Store\",\n            \"address\": {\n                \"lines\": [\n                    \"698-500\",\n                    \" Lloyds Ln\"\n                ],\n                \"countryCode\": \"US\",\n                \"city\": \"Alexandria\",\n                \"zipcode\": \"VA 22302\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"Europe/London\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                },\n                \"special\": {\n                    \"2015-02-07\": [\n                        {\n                            \"start\": \"08:00\",\n                            \"end\": \"23:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"698-500\",\n          \" Lloyds Ln\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"VA 22302\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n});\n\nvar config = {\n  method: 'put',\n  url: 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/stores/autocomplete": {
      "get": {
        "description": "Autocomplete on `localizedNames` with highlighted results on asset name. Use the field `localized` in your query parameter to search for localized names.\n",
        "operationId": "storeAutocomplete",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/search_language"
          },
          {
            "$ref": "#/components/parameters/search_limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Autocomplete on stores in localized names nearby a latlng and specifying a radius",
                    "value": {
                      "predictions": [
                        {
                          "highlighted": "Sun \u003cb\u003eStreet\u003c/b\u003e",
                          "matched_substrings": [
                            {
                              "length": 6,
                              "offset": 4
                            }
                          ],
                          "name": "Sun Street",
                          "store_id": "2670",
                          "types": [
                            "Coffee shop"
                          ]
                        },
                        {
                          "highlighted": "7th \u003cb\u003eStreet\u003c/b\u003e",
                          "matched_substrings": [
                            {
                              "length": 6,
                              "offset": 4
                            }
                          ],
                          "name": "7th Street",
                          "store_id": "16069",
                          "types": [
                            "Coffee shop"
                          ]
                        },
                        {
                          "highlighted": "The \u003cb\u003eStreet\u003c/b\u003e",
                          "matched_substrings": [
                            {
                              "length": 6,
                              "offset": 4
                            }
                          ],
                          "name": "The Street",
                          "store_id": "1013873",
                          "types": [
                            "Coffee shop"
                          ]
                        },
                        {
                          "highlighted": "12th \u003cb\u003eStreet\u003c/b\u003e",
                          "matched_substrings": [
                            {
                              "length": 6,
                              "offset": 5
                            }
                          ],
                          "name": "12th Street",
                          "store_id": "1008896",
                          "types": [
                            "Coffee shop"
                          ]
                        },
                        {
                          "highlighted": "Doha \u003cb\u003eStreet\u003c/b\u003e",
                          "matched_substrings": [
                            {
                              "length": 6,
                              "offset": 5
                            }
                          ],
                          "name": "Doha Street",
                          "store_id": "1023565",
                          "types": [
                            "Coffee shop"
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AssetAutocompleteResponse"
                }
              }
            },
            "description": "Assets Successfully Replaced"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Autocomplete for assets",
        "tags": [
          "Store Search API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/autocomplete/?language=en\u0026query=localized%3Astreet\u0026limit=3\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/autocomplete/?language=en\u0026query=localized%3Astreet\u0026limit=3\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/autocomplete/?language=en\u0026query=localized%3Astreet\u0026limit=3\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/stores/replace": {
      "post": {
        "description": "To replace all your Assets. This endpoint will delete all previous assets and import assets in request body. During the operation previous assets could always be displayed on map. If the import failed previous assets are not deleted.",
        "operationId": "replaceStores",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Stores Data to replace as JSON",
                  "value": {
                    "stores": [
                      {
                        "address": {
                          "city": "London",
                          "countryCode": "UK",
                          "lines": [
                            "Building Centre",
                            "26 Store Street"
                          ],
                          "zipcode": "WC1E 7BT"
                        },
                        "contact": {
                          "email": "contact@woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "website": "https://www.woosmap.com"
                        },
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "name": "My Cool Store",
                        "openingHours": {
                          "special": {
                            "2015-02-07": [
                              {
                                "end": "23:00",
                                "start": "08:00"
                              }
                            ]
                          },
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "end": "22:00",
                                "start": "08:30"
                              }
                            ]
                          }
                        },
                        "storeId": "STORE_ID_123456",
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        }
                      },
                      {
                        "address": {
                          "city": "Alexandria",
                          "countryCode": "US",
                          "lines": [
                            "1805-1899",
                            "Orchard St"
                          ],
                          "zipcode": "22309"
                        },
                        "contact": {
                          "email": "contact@woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "website": "https://www.woosmap.com"
                        },
                        "location": {
                          "lat": 38.5239,
                          "lng": -77.0157
                        },
                        "name": "My Cool Store 2",
                        "openingHours": {
                          "timezone": "America/New_York",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "end": "22:00",
                                "start": "08:30"
                              }
                            ]
                          }
                        },
                        "storeId": "STORE_ID_45678",
                        "tags": [
                          "covered_parking"
                        ],
                        "types": [
                          "drive"
                        ],
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        }
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              }
            }
          },
          "description": "The request body of Stores Replace must be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Success response for Stores replaced",
                    "value": {
                      "status": "success",
                      "value": "2 stores deleted, 2 stores created"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            },
            "description": "Assets successfully replaced"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Replace all assets",
        "tags": [
          "Data Management API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X POST 'https://api.woosmap.com/stores/replace?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/stores/replace?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"stores\": [\n        {\n            \"types\": [\n                \"drive\",\n                \"click_and_collect\"\n            ],\n            \"tags\": [\n                \"wifi\",\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.719,\n                \"lng\": -77.1067\n            },\n            \"storeId\": \"STORE_ID_123456\",\n            \"name\": \"My Cool Store\",\n            \"address\": {\n                \"lines\": [\n                    \"Building Centre\",\n                    \"26 Store Street\"\n                ],\n                \"countryCode\": \"UK\",\n                \"city\": \"London\",\n                \"zipcode\": \"WC1E 7BT\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"Europe/London\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                },\n                \"special\": {\n                    \"2015-02-07\": [\n                        {\n                            \"start\": \"08:00\",\n                            \"end\": \"23:00\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"types\": [\n                \"drive\"\n            ],\n            \"tags\": [\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.5239,\n                \"lng\": -77.0157\n            },\n            \"storeId\": \"STORE_ID_45678\",\n            \"name\": \"My Cool Store 2\",\n            \"address\": {\n                \"lines\": [\n                    \"1805-1899\",\n                    \"Orchard St\"\n                ],\n                \"countryCode\": \"US\",\n                \"city\": \"Alexandria\",\n                \"zipcode\": \"22309\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"America/New_York\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/stores/replace?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/stores/search": {
      "get": {
        "description": "Used to retrieve assets from query.\n",
        "operationId": "storeSearch",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/search_lat"
          },
          {
            "$ref": "#/components/parameters/search_lng"
          },
          {
            "$ref": "#/components/parameters/search_radius"
          },
          {
            "$ref": "#/components/parameters/search_encoded_polyline"
          },
          {
            "$ref": "#/components/parameters/search_stores_by_page"
          },
          {
            "$ref": "#/components/parameters/search_page"
          },
          {
            "$ref": "#/components/parameters/search_zone"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Search stores nearby a latlng and given a radius",
                    "value": {
                      "features": [
                        {
                          "geometry": {
                            "coordinates": [
                              -0.14408,
                              51.5088
                            ],
                            "type": "Point"
                          },
                          "properties": {
                            "address": {
                              "city": "London",
                              "country_code": "GB",
                              "lines": [
                                "27 Berkeley St",
                                "London, ENG W1X 5AD"
                              ],
                              "zipcode": "W1X 5AD"
                            },
                            "contact": {
                              "phone": "02076295779",
                              "website": "https://www.starbucks.com/store-locator/store/2354/berkeley-street-berkeley-square-27-berkeley-st-berkeley-square-london-eng-w-1-x-5-"
                            },
                            "distance": 135.28682936,
                            "last_updated": "2022-11-10T13:23:53.564829+00:00",
                            "name": "Berkeley Street/Berkeley Square",
                            "open": {
                              "current_slice": {
                                "end": "18:00",
                                "start": "06:30"
                              },
                              "open_hours": [
                                {
                                  "end": "18:00",
                                  "start": "06:30"
                                }
                              ],
                              "open_now": true,
                              "week_day": 5
                            },
                            "opening_hours": {
                              "special": {},
                              "timezone": "Europe/London",
                              "usual": {
                                "1": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "2": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "3": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "4": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "5": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "6": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ],
                                "7": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ]
                              }
                            },
                            "store_id": "2354",
                            "tags": [
                              "WA",
                              "WF",
                              "CD",
                              "DR",
                              "XO"
                            ],
                            "types": [
                              "Coffee shop"
                            ],
                            "user_properties": {
                              "take_away": "available"
                            },
                            "weekly_opening": {
                              "1": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "2": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "3": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "4": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "5": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "6": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "7": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "timezone": "Europe/London"
                            }
                          },
                          "type": "Feature"
                        }
                      ],
                      "pagination": {
                        "page": 1,
                        "pageCount": 1
                      },
                      "type": "FeatureCollection"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AssetFeatureCollectionResponse"
                }
              }
            },
            "description": "Assets successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Search for assets",
        "tags": [
          "Store Search API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/search/?lat=51.50976\u0026lng=-0.145276\u0026radius=300\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/search/?lat=51.50976\u0026lng=-0.145276\u0026radius=300\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/search/?lat=51.50976\u0026lng=-0.145276\u0026radius=300\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/stores/search/bounds": {
      "get": {
        "description": "Used to retrieve Bounds for assets.\n",
        "operationId": "storesBounds",
        "parameters": [
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/search_lat"
          },
          {
            "$ref": "#/components/parameters/search_lng"
          },
          {
            "$ref": "#/components/parameters/search_radius"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Retrieve Bounds nearby a latlng and given a radius",
                    "value": {
                      "bounds": {
                        "east": -0.14408,
                        "north": 51.5088,
                        "south": 51.5088,
                        "west": -0.14408
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/BoundsResponse"
                }
              }
            },
            "description": "Bounds successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Bounds for assets",
        "tags": [
          "Store Search API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/search/bounds?lat=51.50976\u0026lng=-0.145276\u0026radius=300\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/search/bounds?lat=51.50976\u0026lng=-0.145276\u0026radius=300\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/search/bounds?lat=51.50976\u0026lng=-0.145276\u0026radius=300\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/stores/{storeId}": {
      "get": {
        "description": "Used to retrieve an asset from his `storeId`\n",
        "operationId": "getStore",
        "parameters": [
          {
            "description": "ID of the asset to get",
            "example": "STORE_ID_123456",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Get a store from its store_id",
                    "value": {
                      "geometry": {
                        "coordinates": [
                          -122.712924,
                          38.41244
                        ],
                        "type": "Point"
                      },
                      "properties": {
                        "address": {
                          "city": "Santa Rosa",
                          "country_code": "US",
                          "lines": [
                            "2688 Santa Rosa Ave",
                            "Santa Rosa, CA 95407"
                          ],
                          "zipcode": "954077625"
                        },
                        "contact": {
                          "phone": "707-527-1006",
                          "website": "https://www.starbucks.com/store-locator/store/10031/santa-rosa-yolanda-2688-santa-rosa-ave-santa-rosa-ca-954077625-us"
                        },
                        "last_updated": "2022-11-10T13:26:55.066524+00:00",
                        "name": "Santa Rosa \u0026 Yolanda",
                        "open": {
                          "current_slice": {
                            "end": "20:00",
                            "start": "05:00"
                          },
                          "open_hours": [
                            {
                              "end": "20:00",
                              "start": "05:00"
                            }
                          ],
                          "open_now": true,
                          "week_day": 5
                        },
                        "opening_hours": {
                          "special": {},
                          "timezone": "America/Los_Angeles",
                          "usual": {
                            "1": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "2": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "3": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "4": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "5": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "6": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "7": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ]
                          }
                        },
                        "store_id": "10031",
                        "tags": [
                          "DT",
                          "WA",
                          "CD",
                          "DR",
                          "LB",
                          "GO",
                          "XO",
                          "MX",
                          "NB",
                          "BE",
                          "LU"
                        ],
                        "types": [
                          "Coffee shop"
                        ],
                        "user_properties": {
                          "take_away": "available"
                        },
                        "weekly_opening": {
                          "1": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "2": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "3": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "4": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "5": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "6": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "7": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "timezone": "America/Los_Angeles"
                        }
                      },
                      "type": "Feature"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AssetFeatureResponse"
                }
              }
            },
            "description": "Asset successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "404": {
            "description": "Not Found - `storeId` do not exist."
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Get Asset from ID",
        "tags": [
          "Data Management API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/10031/?key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/10031/?key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/10031/?key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/traffic/distancematrix/json": {
      "get": {
        "deprecated": true,
        "description": "Get distances and durations (including traffic) for a matrix of origins and destinations, based on the recommended routes between start and end points for a specified travel mode.\n",
        "operationId": "getTrafficDistanceMatrix",
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origins"
          },
          {
            "$ref": "#/components/parameters/distance_destinations"
          },
          {
            "$ref": "#/components/parameters/traffic_routing"
          },
          {
            "$ref": "#/components/parameters/traffic_departure_time"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result (including traffic) for driving from origins `48.709,2.403` to destinations `48.709,2.303|48.768,2.338`,",
                    "value": {
                      "rows": [
                        {
                          "elements": [
                            {
                              "distance": {
                                "text": "10.7 km",
                                "value": 10731
                              },
                              "duration_with_traffic": {
                                "text": "27 mins",
                                "value": 1626
                              },
                              "status": "OK"
                            },
                            {
                              "distance": {
                                "text": "10.2 km",
                                "value": 10185
                              },
                              "duration_with_traffic": {
                                "text": "21 mins",
                                "value": 1288
                              },
                              "status": "OK"
                            }
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TrafficDistanceMatrixResponse"
                }
              }
            },
            "description": "Traffic Distance Matrix successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Traffic Distance Matrix",
        "tags": [
          "Traffic API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/traffic/distancematrix/json?origins=48.709%2C2.403\u0026destinations=48.709%2C2.303%7C48.768%2C2.338\u0026routing=shortest\u0026language=en\u0026departure_time=now\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/traffic/distancematrix/json?origins=48.709%2C2.403\u0026destinations=48.709%2C2.303%7C48.768%2C2.338\u0026routing=shortest\u0026language=en\u0026departure_time=now\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/traffic/distancematrix/json?origins=48.709%2C2.403\u0026destinations=48.709%2C2.303%7C48.768%2C2.338\u0026routing=shortest\u0026language=en\u0026departure_time=now\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "post": {
        "deprecated": true,
        "description": "Get distances and durations (including traffic) for a matrix of origins and destinations, based on the recommended routes between start and end points. If the URL size is too short for your origins and destinations, you should request the server using this POST method and passing arguments as json.\n",
        "operationId": "postTrafficDistanceMatrix",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Request as a JSON for a distance matrix (including traffic) call",
                  "value": {
                    "departure_time": "now",
                    "destinations": "48.83534,2.368308",
                    "origins": "48.73534,2.368308|48.73534,2.368308",
                    "routing": "fastest",
                    "units": "imperial"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TrafficDistanceMatrixRequest"
              }
            }
          },
          "description": "The request body of Traffic Distance Matrix must be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result (including traffic) for driving from origins `48.73534,2.368308|48.73534,2.368308` to destinations `48.83534,2.368308`,",
                    "value": {
                      "rows": [
                        {
                          "elements": [
                            {
                              "distance": {
                                "text": "10.7 km",
                                "value": 10731
                              },
                              "duration_with_traffic": {
                                "text": "27 mins",
                                "value": 1626
                              },
                              "status": "OK"
                            },
                            {
                              "distance": {
                                "text": "10.2 km",
                                "value": 10185
                              },
                              "duration_with_traffic": {
                                "text": "21 mins",
                                "value": 1288
                              },
                              "status": "OK"
                            }
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TrafficDistanceMatrixResponse"
                }
              }
            },
            "description": "Traffic Distance Matrix with POST successfully retrieved"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Traffic Distance Matrix using POST",
        "tags": [
          "Traffic API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X POST 'https://api.woosmap.com/traffic/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"routing\": \"fastest\",\n  \"departure_time\": \"now\"\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/traffic/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n    \"destinations\": \"48.83534,2.368308\",\n    \"units\": \"imperial\",\n    \"routing\": \"fastest\",\n    \"departure_time\": \"now\"\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"routing\": \"fastest\",\n  \"departure_time\": \"now\"\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/traffic/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/traffic/route/json": {
      "get": {
        "deprecated": true,
        "description": "Get distance, duration and path (as a polyline) for a pair of origin and destination, based on the recommended route between those two points, while taking traffic into account.\n",
        "operationId": "getTrafficRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origin"
          },
          {
            "$ref": "#/components/parameters/distance_destination"
          },
          {
            "$ref": "#/components/parameters/traffic_routing"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_alternatives"
          },
          {
            "$ref": "#/components/parameters/traffic_waypoints"
          },
          {
            "$ref": "#/components/parameters/traffic_departure_time"
          },
          {
            "$ref": "#/components/parameters/traffic_arrival_time"
          },
          {
            "$ref": "#/components/parameters/traffic_avoid"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Distance Route Result (including traffic) for driving from origin `49.31067,4.14525` to destination `49.31344,4.15293` and retrieving alternatives routes with `departure_time=now`.",
                    "value": {
                      "routes": [
                        {
                          "bounds": {
                            "northeast": {
                              "lat": 49.31575,
                              "lng": 4.15297
                            },
                            "southwest": {
                              "lat": 49.310753,
                              "lng": 4.145122
                            }
                          },
                          "legs": [
                            {
                              "distance": {
                                "text": "1.1 km",
                                "value": 1073.570921248021
                              },
                              "duration_with_traffic": {
                                "text": "2 mins",
                                "value": 97
                              },
                              "duration_without_traffic": {
                                "text": "1 min",
                                "value": 88
                              },
                              "end_location": {
                                "lat": 49.3134,
                                "lng": 4.15297
                              },
                              "start_location": {
                                "lat": 49.310753,
                                "lng": 4.1451221
                              }
                            }
                          ],
                          "overview_polyline": {
                            "points": "e_~kH_rhXkBcDsAwBeAaB]c@a@g@c@g@c@a@[[a@_@YS[Ui@Y]O]K_@Gc@Gi@AcBCg@?_@ESCOMMMMUKYI]Ow@FIFMBI@G@O?IAMCMCKjCsDNShBaCDFDDDBF@F?FABADABEBCBKBM@M?KAKCKCG|@kAfA}A"
                          },
                          "summary": "route_0"
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TrafficDistanceRouteResponse"
                }
              }
            },
            "description": "Traffic Route successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Traffic Route",
        "tags": [
          "Traffic API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/traffic/route/json?origin=49.31067%2C4.14525\u0026destination=49.31344%2C4.15293\u0026routing=shortest\u0026language=en\u0026alternatives=true\u0026departure_time=now\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/traffic/route/json?origin=49.31067%2C4.14525\u0026destination=49.31344%2C4.15293\u0026routing=shortest\u0026language=en\u0026alternatives=true\u0026departure_time=now\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/traffic/route/json?origin=49.31067%2C4.14525\u0026destination=49.31344%2C4.15293\u0026routing=shortest\u0026language=en\u0026alternatives=true\u0026departure_time=now\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/transit/route": {
      "get": {
        "operationId": "transit_route_transit_route_get",
        "parameters": [
          {
            "description": "DateTime with or without timezone, if not set the default datetime is the current one",
            "in": "query",
            "name": "departure_time",
            "schema": {
              "anyOf": [
                {
                  "format": "date-time",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "DateTime with or without timezone, if not set the default datetime is the current one",
              "examples": [
                "2024-01-01T12:00:00%2B01:00"
              ],
              "title": "Departure Time"
            }
          },
          {
            "description": "DateTime with or without timezone, if departure_time is defined this parameter is ignored",
            "in": "query",
            "name": "arrival_time",
            "schema": {
              "anyOf": [
                {
                  "format": "date-time",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "DateTime with or without timezone, if departure_time is defined this parameter is ignored",
              "examples": [
                "2024-01-01T14:00:00%2B01:00"
              ],
              "title": "Arrival Time"
            }
          },
          {
            "description": "WGS84 coordinates as format lat,lng",
            "in": "query",
            "name": "origin",
            "required": true,
            "schema": {
              "description": "WGS84 coordinates as format lat,lng",
              "examples": [
                "lat,lng"
              ],
              "title": "Position",
              "type": "string"
            }
          },
          {
            "description": "WGS84 coordinates as format lat,lng",
            "in": "query",
            "name": "destination",
            "required": true,
            "schema": {
              "description": "WGS84 coordinates as format lat,lng",
              "examples": [
                "lat,lng"
              ],
              "title": "Position",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transit"
                }
              }
            },
            "description": "Successful Response"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            },
            "description": "Unable to locate credentials."
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            },
            "description": "Out of free credits."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            },
            "description": "Credentials found, but not matching."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "summary": "Transit Route",
        "tags": [
          "Transit API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/transit/route?origin=48.73534,2.368308\u0026destination=48.83534,2.368308\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/transit/route?origin=48.73534,2.368308\u0026destination=48.83534,2.368308\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/transit/route?origin=48.73534,2.368308\u0026destination=48.83534,2.368308\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/what3words/autosuggest": {
      "get": {
        "description": "AutoSuggest can take a slightly incorrect 3 word address and suggest a list of valid 3 word addresses.\nIt has powerful features that can, for example, optionally limit results to a country or area,\nand prioritise results that are near the user.",
        "operationId": "what3words_api_views_autosuggest",
        "parameters": [
          {
            "description": "The full or partial 3 word address to obtain suggestions for. At minimum this must be the first two complete words plus at least one character from the third word.",
            "example": "couch.spotted.a",
            "in": "query",
            "name": "input",
            "required": true,
            "schema": {
              "description": "The full or partial 3 word address to obtain suggestions for. At minimum this must be the first two complete words plus at least one character from the third word.",
              "example": "couch.spotted.a",
              "title": "Input",
              "type": "string"
            }
          },
          {
            "description": "This is a location, specified as latitude,longitude (often where the user making the query is). If specified, the results will be weighted to give preference to those near the focus.",
            "example": "48.861026,2.335853",
            "in": "query",
            "name": "focus",
            "schema": {
              "description": "This is a location, specified as latitude,longitude (often where the user making the query is). If specified, the results will be weighted to give preference to those near the focus.",
              "example": "48.861026,2.335853",
              "title": "Focus",
              "type": "string"
            }
          },
          {
            "description": "Restricts AutoSuggest to only return results inside the countries specified by comma-separated list of ISO 3166-1 alpha-2 country codes.",
            "example": "FR",
            "in": "query",
            "name": "clip-to-country",
            "schema": {
              "description": "Restricts AutoSuggest to only return results inside the countries specified by comma-separated list of ISO 3166-1 alpha-2 country codes.",
              "example": "FR",
              "title": "Clip-To-Country",
              "type": "string"
            }
          },
          {
            "description": "Restrict AutoSuggest results to a bounding box, specified by coordinates.south_lat,west_lng,north_lat,east_lng, where: south_lat less than or equal to north_lat, west_lng less than or equal to east_lng.",
            "example": "48.624314,1.804429,49.058148,2.908555",
            "in": "query",
            "name": "clip-to-bounding-box",
            "schema": {
              "description": "Restrict AutoSuggest results to a bounding box, specified by coordinates.south_lat,west_lng,north_lat,east_lng, where: south_lat less than or equal to north_lat, west_lng less than or equal to east_lng.",
              "example": "48.624314,1.804429,49.058148,2.908555",
              "title": "Clip-To-Bounding-Box",
              "type": "string"
            }
          },
          {
            "description": "Restrict AutoSuggest results to a circle, specified by lat, lng, kilometres, where kilometres is the radius of the circle.",
            "example": "48.839701,2.291878,20",
            "in": "query",
            "name": "clip-to-circle",
            "schema": {
              "description": "Restrict AutoSuggest results to a circle, specified by lat, lng, kilometres, where kilometres is the radius of the circle.",
              "example": "48.839701,2.291878,20",
              "title": "Clip-To-Circle",
              "type": "string"
            }
          },
          {
            "description": "Restrict AutoSuggest results to a polygon, specified by a comma-separated list of lat, lng pairs. The polygon should be closed, i.e. the first element should be repeated as the last element; also the list should contain at least 4 pairs. The API is currently limited to accepting up to 25 pairs.",
            "example": "48.823547,2.199174,48.823547,2.199174,48.922216,2.328709,48.888626,2.473673,48.819279,2.445513,48.784865,2.330668,48.823547,2.199174",
            "in": "query",
            "name": "clip-to-polygon",
            "schema": {
              "description": "Restrict AutoSuggest results to a polygon, specified by a comma-separated list of lat, lng pairs. The polygon should be closed, i.e. the first element should be repeated as the last element; also the list should contain at least 4 pairs. The API is currently limited to accepting up to 25 pairs.",
              "example": "48.823547,2.199174,48.823547,2.199174,48.922216,2.328709,48.888626,2.473673,48.819279,2.445513,48.784865,2.330668,48.823547,2.199174",
              "title": "Clip-To-Polygon",
              "type": "string"
            }
          },
          {
            "description": "For power users, used to specify voice input mode.",
            "in": "query",
            "name": "input-type",
            "schema": {
              "default": "text",
              "description": "For power users, used to specify voice input mode.",
              "enum": [
                "text",
                "vocon-hybrid",
                "nmdp-asr",
                "generic-voice"
              ],
              "title": "Input-Type",
              "type": "string"
            }
          },
          {
            "description": "Makes AutoSuggest prefer results on land to those in the sea.",
            "in": "query",
            "name": "prefer-land",
            "schema": {
              "default": true,
              "description": "Makes AutoSuggest prefer results on land to those in the sea.",
              "title": "Prefer-Land",
              "type": "boolean"
            }
          },
          {
            "description": "For normal text input, specifies a fallback language, which will help guide AutoSuggest if the input is particularly messy. A supported address language as an ISO 639-1 2 letter code.",
            "example": "fr",
            "in": "query",
            "name": "language",
            "schema": {
              "description": "For normal text input, specifies a fallback language, which will help guide AutoSuggest if the input is particularly messy. A supported address language as an ISO 639-1 2 letter code.",
              "example": "fr",
              "title": "Language",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoSuggestResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error Code",
                      "title": "Code",
                      "type": "string"
                    },
                    "message": {
                      "description": "Error Message",
                      "title": "Message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message",
                    "code"
                  ],
                  "title": "W3WErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "summary": "Autosuggest",
        "tags": [
          "Woosmap for what3words API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/what3words/autosuggest?input=couch.spotted.am\u0026clip-to-country=fr\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/what3words/autosuggest?input=couch.spotted.am\u0026clip-to-country=fr\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/what3words/autosuggest?input=couch.spotted.am\u0026clip-to-country=fr\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/what3words/convert-to-3wa": {
      "get": {
        "description": "This function will convert a latitude and longitude to a 3 word address, in the language of your choice.\nIt also returns country, the bounds of the grid square,\na nearby place (such as a local town) and a link to the what3words map site.",
        "operationId": "what3words_api_views_convert_to_what_3_words",
        "parameters": [
          {
            "description": "Coordinates as a comma separated string of latitude and longitude",
            "example": "48.858304,2.294514",
            "in": "query",
            "name": "coordinates",
            "required": true,
            "schema": {
              "description": "Coordinates as a comma separated string of latitude and longitude",
              "example": "48.858304,2.294514",
              "title": "Coordinates",
              "type": "string"
            }
          },
          {
            "description": "Return data format type; can be either json or geojson",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "json",
              "description": "Return data format type; can be either json or geojson",
              "enum": [
                "json",
                "geojson"
              ],
              "title": "Format",
              "type": "string"
            }
          },
          {
            "description": "A supported address language as an ISO 639-1 2 letter code.",
            "in": "query",
            "name": "language",
            "schema": {
              "default": "en",
              "description": "A supported address language as an ISO 639-1 2 letter code.",
              "title": "Language",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/JsonCoordinatesResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GeoJsonCoordinatesResponse"
                    }
                  ],
                  "title": "Response"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error Code",
                      "title": "Code",
                      "type": "string"
                    },
                    "message": {
                      "description": "Error Message",
                      "title": "Message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message",
                    "code"
                  ],
                  "title": "W3WErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "summary": "Convert To What 3 Words",
        "tags": [
          "Woosmap for what3words API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/what3words/convert-to-3wa?coordinates=48.858304,2.294514\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/what3words/convert-to-3wa?coordinates=48.858304,2.294514\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/what3words/convert-to-3wa?coordinates=48.858304,2.294514\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/what3words/convert-to-address": {
      "get": {
        "description": "This function converts a 3 word address to a list of address.\nIt will return at most the 5 closest addresses to the what3words provided.",
        "operationId": "what3words_api_views_convert_to_address",
        "parameters": [
          {
            "description": "A 3 word address as a string. It must be three words separated with dots or a japanese middle dot character (・). Words separated by spaces will be rejected. Optionally, the 3 word address can be prefixed with /// (which would be encoded as %2F%2F%2F)",
            "example": "couch.spotted.amended",
            "in": "query",
            "name": "words",
            "required": true,
            "schema": {
              "description": "A 3 word address as a string. It must be three words separated with dots or a japanese middle dot character (・). Words separated by spaces will be rejected. Optionally, the 3 word address can be prefixed with /// (which would be encoded as %2F%2F%2F)",
              "example": "couch.spotted.amended",
              "title": "Words",
              "type": "string"
            }
          },
          {
            "description": "A supported address language as an ISO 639-1 2 letter code.",
            "in": "query",
            "name": "language",
            "schema": {
              "default": "en",
              "description": "A supported address language as an ISO 639-1 2 letter code.",
              "title": "Language",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiteAddressResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "description": "Error Code",
                      "title": "Code",
                      "type": "string"
                    },
                    "message": {
                      "description": "Error Message",
                      "title": "Message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message",
                    "code"
                  ],
                  "title": "W3WErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "402": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Payment Required"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A more detailed explanation on what went wrong.",
                  "title": "Detail",
                  "type": "string"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "context": {
                      "description": "Context",
                      "title": "Context",
                      "type": "object"
                    },
                    "detail": {
                      "description": "The validation errors.",
                      "items": {
                        "type": "object"
                      },
                      "title": "Detail",
                      "type": "array"
                    }
                  },
                  "required": [
                    "detail",
                    "context"
                  ],
                  "title": "ValidationErrorSchema",
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "summary": "Convert To Address",
        "tags": [
          "Woosmap for what3words API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/what3words/convert-to-address?words=couch.spotted.amended\u0026key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/what3words/convert-to-address?words=couch.spotted.amended\u0026key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/what3words/convert-to-address?words=couch.spotted.amended\u0026key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          }
        ]
      }
    },
    "/zones": {
      "delete": {
        "description": "Used to delete one or more Zones. The `zone_id` is the id of the zone to delete. To delete several zones, use the comma as a separator.",
        "operationId": "deleteZones",
        "parameters": [
          {
            "description": "The zone ID to delete",
            "example": "ZoneA",
            "in": "query",
            "name": "zone_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Success response for Zones deleted",
                    "value": {
                      "message": "Zones deleted.",
                      "status": "ok"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SuccessZones"
                }
              }
            },
            "description": "Zones successfully deleted"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Delete the Zones",
        "tags": [
          "Zones API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X DELETE 'https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\n\nvar config = {\n  method: 'delete',\n  url: 'https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { }\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      },
      "get": {
        "description": "List all zones for the current project, sorted by `zone_id`.\n",
        "operationId": "listZones",
        "parameters": [
          {
            "$ref": "#/components/parameters/zones_limit"
          },
          {
            "$ref": "#/components/parameters/zones_offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Zones data",
                    "value": {
                      "status": "ok",
                      "zones": [
                        {
                          "description": "Delivery Zone for Store B",
                          "polygon": "POLYGON ((-122.4546384 37.774656, -122.4515485 37.7595934, -122.4354306 37.7602172, -122.4333707 37.7512596, -122.423071 37.7511239, -122.4242726 37.7687665, -122.4259893 37.7691736, -122.4289075 37.7732444, -122.4306241 37.7850483, -122.4472753 37.7830133, -122.445902 37.7759581, -122.4546384 37.774656))",
                          "store_id": "STORE_ID_123456",
                          "types": [
                            "delivery"
                          ],
                          "zone_id": "ZoneB"
                        },
                        {
                          "description": "Delivery Zone for Store C",
                          "polygon": "POLYGON ((-122.4758889 37.7524995, -122.4751594 37.7321718, -122.4688079 37.7299995, -122.4648597 37.7261979, -122.4519851 37.7228035, -122.4483802 37.7215815, -122.4458053 37.726741, -122.4365356 37.7310857, -122.4315574 37.7324433, -122.4246909 37.7312214, -122.4219444 37.731493, -122.423071 37.7511239, -122.4333707 37.7512596, -122.4354306 37.7602172, -122.4515485 37.7595934, -122.4528628 37.7582744, -122.4540375 37.7566755, -122.4565266 37.7513144, -122.4601315 37.7521288, -122.4618481 37.7514501, -122.4635648 37.7530788, -122.4758889 37.7524995))",
                          "store_id": "STORE_ID_45678",
                          "types": [
                            "delivery"
                          ],
                          "zone_id": "ZoneC"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ZonesCollectionResponse"
                }
              }
            },
            "description": "Zones successfully retrieved"
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "summary": "Error 401",
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            },
            "description": "Unauthorized. Incorrect authentication credentials."
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "summary": "Error 403",
                    "value": {
                      "detail": "This Woosmap API is not enabled for this project."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            },
            "description": "Forbidden. This Woosmap API is not enabled for this project."
          },
          "429": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "summary": "Error 429",
                    "value": {
                      "detail": "The rate limit for this endpoint has been exceeded"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            },
            "description": "Too Many Requests. The rate limit for this endpoint has been exceeded."
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "List your Zones",
        "tags": [
          "Zones API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY\u0026limit=2\u0026offset=1'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY\u0026limit=2\u0026offset=1\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY\u0026limit=2\u0026offset=1\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "post": {
        "description": "Used to batch create Zones to a specific project identified with the `private_key` parameter.\n",
        "operationId": "createZones",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Zones data as JSON",
                  "value": {
                    "zones": [
                      {
                        "description": "Delivery Zone for Store A",
                        "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
                        "store_id": "STORE_ID_123456",
                        "types": [
                          "delivery"
                        ],
                        "zone_id": "ZoneA"
                      },
                      {
                        "description": "Delivery Zone for Store B",
                        "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
                        "store_id": "STORE_ID_123456",
                        "types": [
                          "delivery"
                        ],
                        "zone_id": "ZoneB"
                      },
                      {
                        "description": "Delivery Zone for Store C",
                        "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
                        "store_id": "STORE_ID_45678",
                        "types": [
                          "delivery"
                        ],
                        "zone_id": "ZoneC"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ZonesCollectionRequest"
              }
            }
          },
          "description": "The request body of Zones Creation must be formatted as JSON.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Success response for Zones Created",
                    "value": {
                      "message": "Zones successfully added.",
                      "status": "ok"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SuccessZones"
                }
              }
            },
            "description": "Zones successfully created"
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Create your Zones",
        "tags": [
          "Zones API"
        ],
        "x-codeSamples": [
          {
            "$ref": "#/paths/~1zones/put/x-codeSamples/0"
          },
          {
            "$ref": "#/paths/~1zones/put/x-codeSamples/1"
          },
          {
            "$ref": "#/paths/~1zones/put/x-codeSamples/2"
          }
        ]
      },
      "put": {
        "description": "Used to update zones in batch. `zone_id` must exists when using `PUT` method, if one zone does not exists, the batch will be refused.",
        "operationId": "updateZones",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "summary": "Zones data",
                  "value": {
                    "zones": [
                      {
                        "description": "Delivery Zone for Store A",
                        "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
                        "store_id": "STORE_ID_123456",
                        "types": [
                          "delivery"
                        ],
                        "zone_id": "ZoneA"
                      },
                      {
                        "description": "Delivery Zone for Store B",
                        "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
                        "store_id": "STORE_ID_123456",
                        "types": [
                          "delivery"
                        ],
                        "zone_id": "ZoneB"
                      },
                      {
                        "description": "Delivery Zone for Store C",
                        "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
                        "store_id": "STORE_ID_45678",
                        "types": [
                          "delivery"
                        ],
                        "zone_id": "ZoneC"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ZonesCollectionRequest"
              }
            }
          },
          "description": "The request body of Zones Update must be formatted as JSON."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Success response for Zones updated",
                    "value": {
                      "message": "Zones successfully added.",
                      "status": "ok"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SuccessZones"
                }
              }
            },
            "description": "Zones successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "Invalid": {
                    "summary": "Error 400",
                    "value": {
                      "status": "error",
                      "value": "The request is invalid, the data is not a valid JSON."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            },
            "description": "Invalid. The data is not a valid JSON."
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Update the Zones",
        "tags": [
          "Zones API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X POST 'https://api.woosmap.com/zones?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"zones\": [\n    {\n      \"zone_id\": \"ZoneA\",\n      \"description\": \"Delivery Zone for Store A\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneB\",\n      \"description\": \"Delivery Zone for Store B\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneC\",\n      \"description\": \"Delivery Zone for Store C\",\n      \"store_id\": \"STORE_ID_45678\",\n      \"polygon\": \"POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    }\n  ]\n}'"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/zones?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"zones\": [\n        {\n            \"zone_id\": \"ZoneA\",\n            \"description\": \"Delivery Zone for Store A\",\n            \"store_id\": \"STORE_ID_123456\",\n            \"polygon\": \"POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))\",\n            \"types\": [\n                \"delivery\"\n            ]\n        },\n        {\n            \"zone_id\": \"ZoneB\",\n            \"description\": \"Delivery Zone for Store B\",\n            \"store_id\": \"STORE_ID_123456\",\n            \"polygon\": \"POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))\",\n            \"types\": [\n                \"delivery\"\n            ]\n        },\n        {\n            \"zone_id\": \"ZoneC\",\n            \"description\": \"Delivery Zone for Store C\",\n            \"store_id\": \"STORE_ID_45678\",\n            \"polygon\": \"POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))\",\n            \"types\": [\n                \"delivery\"\n            ]\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "label": "NodeJS",
            "lang": "nodejs",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"zones\": [\n    {\n      \"zone_id\": \"ZoneA\",\n      \"description\": \"Delivery Zone for Store A\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneB\",\n      \"description\": \"Delivery Zone for Store B\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneC\",\n      \"description\": \"Delivery Zone for Store C\",\n      \"store_id\": \"STORE_ID_45678\",\n      \"polygon\": \"POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/zones?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/zones/{zone_id}": {
      "get": {
        "description": "Used to retrieve a zone from his `zone_id`\n",
        "operationId": "getZone",
        "parameters": [
          {
            "description": "ID of the zone to get",
            "example": "ZoneA",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "default": {
                    "summary": "Get a zone from its zone_id",
                    "value": {
                      "description": "Delivery Zone for Store A",
                      "polygon": "POLYGON ((-122.496116 37.7648181, -122.4954079 37.751518, -122.4635648 37.7530788, -122.4618481 37.7514501, -122.4601315 37.7521288, -122.4565266 37.7513144, -122.4540375 37.7566755, -122.4528359 37.7583041, -122.4515485 37.7595934, -122.4546384 37.774656, -122.4718903 37.7731635, -122.472577 37.772485, -122.4755811 37.7725529, -122.4791001 37.7723493, -122.4793576 37.7713995, -122.4784993 37.769839, -122.4783276 37.7680071, -122.4774693 37.766718, -122.4772118 37.7652931, -122.496116 37.7648181))",
                      "status": "ok",
                      "store_id": "STORE_ID_123456",
                      "types": [
                        "delivery"
                      ],
                      "zone_id": "ZoneA"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Zone"
                }
              }
            },
            "description": "Zone successfully retrieved"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "404": {
            "description": "Not Found - `zone_id` do not exist."
          }
        },
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "summary": "Get Zone from ID",
        "tags": [
          "Zones API"
        ],
        "x-codeSamples": [
          {
            "label": "cURL",
            "lang": "curl",
            "source": "curl -L -X GET 'https://api.woosmap.com/zones/ZoneA/?private_key=YOUR_PRIVATE_API_KEY'"
          },
          {
            "label": "JavaScript",
            "lang": "javascript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/zones/ZoneA/?private_key=YOUR_PRIVATE_API_KEY\", requestOptions)\n  .then(response =\u003e response.text())\n  .then(result =\u003e console.log(result))\n  .catch(error =\u003e console.log('error', error));"
          },
          {
            "label": "Python",
            "lang": "python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/zones/ZoneA/?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    }
  },
  "security": [
    {
      "PublicApiKeyAuth": [],
      "RefererHeader": []
    },
    {
      "PrivateApiKeyAuth": []
    },
    {
      "PrivateApiKeyHeaderAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.woosmap.com"
    }
  ],
  "tags": [
    {
      "description": "Stores Search API lets you query the Assets which are returned as a [GeoJson](https://geojson.org/). Request is done over HTTPS using GET. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/). If your request returns a high number of assets, the result will be paginated. If so, you can request assets by page using `page` and `stores_by_page` parameters (Default is **100**, max is **300**).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/search-api/get-started/"
      },
      "name": "Store Search API"
    },
    {
      "description": "The Data Management API is a web service that uses an HTTP request to manage, create or edit your Assets. The API only supports JSON. So you have to create a JSON file with your assets’ addresses and other information. You’ll need to convert, or geocode, the addresses in your file to latitude/longitude (`lat` / `long`) coordinates. Those coordinates will be used for most of Woosmap features like [local searches](https://developers.woosmap.com/products/search-api/get-started/), [stores nearby a user location](https://developers.woosmap.com/products/geolocation-api/stores/) or for displaying markers on a map with [Woosmap Javascript API](https://developers.woosmap.com/products/js-api/get-started/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/data-api/get-started/"
      },
      "name": "Data Management API"
    },
    {
      "description": "Geolocation API returns a location (or nearby stores) and accuracy radius based on an IP address. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/geolocation-api/location/"
      },
      "name": "Geolocation API"
    },
    {
      "description": "Woosmap Localities API is a web service that returns a great amount of geographical places in response to an HTTP request. Among others are city names, postal codes, suburbs, addresses or airports. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/localities/get-started/"
      },
      "name": "Localities API"
    },
    {
      "description": "Woosmap Address API is a web service that returns addresses and other geographical places in response to an HTTP request. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n\u003e**⚠️ This API has been deprecated in favour of Localities API**\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/address-api/get-started/"
      },
      "name": "Address API"
    },
    {
      "description": "Woosmap Distance API is a service providing road travel distance and duration calculations, on a Worldwide scale. Request is done over HTTPS using GET or POST. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/distance-api/get-started/"
      },
      "name": "Distance API"
    },
    {
      "description": "Woosmap Traffic API (Early Access) is a service that provides travel distances and durations with traffic, on a Worldwide scale. Compared to the Woosmap Distance API, this API uses traffic information when returning duration times.  Request is done over HTTPS using GET or POST. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).  \n\u003e**⚠️ This API has been deprecated in favour of Distance API**\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/traffic-api/get-started/"
      },
      "name": "Traffic API"
    },
    {
      "description": "Woosmap Merchant API is a REST API aiming at cleaning “dirty” merchant names on transactions provided by a payment provider. It can be used to enrich end users’ transactions list by replacing hardly understandable labels with a commonly known merchant name along with their logo. Additionally, the API can provide a Google Maps Place ID. Request is done over HTTPS using GET or POST. Response is formatted as JSON. You must specify a key in your request, included as the value of a `private_key` parameter for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/merchant-api/get-started/"
      },
      "name": "Merchants API"
    },
    {
      "description": "Woosmap Zones API is a web service that uses an HTTP request to manage, create or edit your Zones (polygons) attached to your assets.\nThe general principle is that sometimes searching assets using crowfly distance is not good enough. For example to search the restaurant that will do the delivery for a specified address, each restaurant has a delivery zone and for topological or business reasons it’s not always the nearest restaurant in charge of your delivery. Woosmap Zones API allows you to associate a delivery zone to each of the restaurants.\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/data-api/zones/"
      },
      "name": "Zones API"
    },
    {
      "description": "Add What3Words capabilities to your address search.",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/w3w-api/overview/"
      },
      "name": "Woosmap for what3words API"
    },
    {
      "description": "The Indoor Map API enables you to display plans of your private space.\nThe Indoor Search API is a dedicated search engine for your own indoor data, allowing you to search for points of interest (POI) in your venue by their characteristics or through autocompletion.\nWith the Indoor Distance API, you can calculate the shortest route between two indoor locations, complete with a polyline and roadbook instructions for turn-by-turn navigation with POI. Additionally, you can apply routing profiles to your venue network for specific user groups such as premium customers, staff, or security, and utilize them through the Indoor Distance API.",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/indoor-api/get-started/"
      },
      "name": "Indoor API"
    },
    {
      "description": "Route calculation by using public transportation",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/transit-api/route-endpoint/"
      },
      "name": "Transit API"
    }
  ]
}
{
  "openapi": "3.0.3",
  "info": {
    "title": "Woosmap",
    "description": "API Specification for Woosmap",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.woosmap.com"
    }
  ],
  "paths": {
    "/geolocation/position": {
      "get": {
        "summary": "Geolocation from an IP address",
        "operationId": "getGeolocationPosition",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Geolocation API"
        ],
        "description": "The `/position` returns JSON location of your users thanks to IP address of their devices.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ip_address"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeolocationResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "country_code": "US",
                      "country_name": "United States",
                      "continent": "North America",
                      "latitude": 38.719,
                      "longitude": -77.1067,
                      "accuracy": 5,
                      "viewport": {
                        "northeast": {
                          "lat": 38.763915764205976,
                          "lng": -77.0491321464058
                        },
                        "southwest": {
                          "lat": 38.674084235794034,
                          "lng": -77.16426785359421
                        }
                      },
                      "city": "Alexandria",
                      "region_state": "Virginia",
                      "postal_code": "22309",
                      "timezone": "America/New_York"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 FORBIDDEN",
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "value": {
                      "detail": "Geolocation API is not enabled for this project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/geolocation/stores": {
      "get": {
        "summary": "Assets nearby a Geolocation",
        "operationId": "getStoresFromGeolocationPosition",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Geolocation API"
        ],
        "description": "Retrieve the stores nearby an ip location. Stores are returned only if a relevant ip location is found - for an accuracy of 20km or less.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ip_address"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeolocationStoresResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "country_code": "US",
                      "country_name": "United States",
                      "continent": "North America",
                      "latitude": 38.719,
                      "longitude": -77.1067,
                      "accuracy": 5,
                      "viewport": {
                        "northeast": {
                          "lat": 38.763915764205976,
                          "lng": -77.0491321464058
                        },
                        "southwest": {
                          "lat": 38.674084235794034,
                          "lng": -77.16426785359421
                        }
                      },
                      "city": "Alexandria",
                      "region_state": "Virginia",
                      "postal_code": "22309",
                      "timezone": "America/New_York",
                      "stores": {
                        "type": "FeatureCollection",
                        "features": [
                          {
                            "type": "Feature",
                            "properties": {
                              "store_id": "STORE_ID_123456",
                              "name": "My Cool Store",
                              "contact": {
                                "email": "contact@woosmap.com",
                                "phone": "+44 20 7693 4000",
                                "website": "https://www.woosmap.com"
                              },
                              "address": {
                                "lines": [
                                  "Building Centre",
                                  "26 Store Street"
                                ],
                                "country_code": "UK",
                                "city": "London",
                                "zipcode": "WC1E 7BT"
                              },
                              "user_properties": {
                                "some_user_properties": "associated user value"
                              },
                              "tags": [
                                "wifi",
                                "covered_parking"
                              ],
                              "types": [
                                "drive",
                                "click_and_collect"
                              ],
                              "distance": 0,
                              "open": {
                                "open_now": false,
                                "open_hours": [],
                                "week_day": 1,
                                "next_opening": {
                                  "end": "22:00",
                                  "start": "08:30",
                                  "day": "2021-12-07"
                                }
                              },
                              "weekly_opening": {
                                "1": {
                                  "hours": [],
                                  "isSpecial": false
                                },
                                "2": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "3": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "4": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "5": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "6": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "7": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "timezone": "Europe/London"
                              },
                              "opening_hours": {
                                "usual": {
                                  "1": [],
                                  "default": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ]
                                },
                                "special": {
                                  "2015-02-07": [
                                    {
                                      "end": "23:00",
                                      "start": "08:00"
                                    }
                                  ]
                                },
                                "timezone": "Europe/London"
                              }
                            },
                            "geometry": {
                              "type": "Point",
                              "coordinates": [
                                -77.1067,
                                38.719
                              ]
                            }
                          }
                        ],
                        "pagination": {
                          "page": 1,
                          "pageCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403 FORBIDDEN",
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "value": {
                      "detail": "Geolocation API is not enabled for this project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores": {
      "post": {
        "summary": "Create your Assets",
        "operationId": "createStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to batch create Assets to a specific project identified with the `private_key` parameter.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "stores": [
                      {
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "storeId": "STORE_ID_123456",
                        "name": "My Cool Store",
                        "address": {
                          "lines": [
                            "Building Centre",
                            "26 Store Street"
                          ],
                          "countryCode": "UK",
                          "city": "London",
                          "zipcode": "WC1E 7BT"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          },
                          "special": {
                            "2015-02-07": [
                              {
                                "start": "08:00",
                                "end": "23:00"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      },
      "put": {
        "summary": "Update the Assets",
        "operationId": "updateStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to update assets in batch. `storeId` must exists when using `PUT` method, if one asset does not exists, the batch will be refused.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "stores": [
                      {
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "storeId": "STORE_ID_123456",
                        "name": "My Cool Store",
                        "address": {
                          "lines": [
                            "Building Centre",
                            "26 Store Street"
                          ],
                          "countryCode": "UK",
                          "city": "London",
                          "zipcode": "WC1E 7BT"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          },
                          "special": {
                            "2015-02-07": [
                              {
                                "start": "08:00",
                                "end": "23:00"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the Assets",
        "operationId": "deleteStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to delete one or more assets. The `storeId` is the id of the asset to delete. To delete several assets, use the comma as a separator.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "storeId",
            "description": "The asset ID to delete",
            "in": "query",
            "example": "STORE_ID_123456",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      }
    },
    "/stores/{storeId}": {
      "get": {
        "summary": "Get Asset from ID",
        "operationId": "getStore",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to retrieve an asset from his `storeId`\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "storeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "STORE_ID_123456",
            "description": "ID of the asset to get"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFeatureResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "type": "Feature",
                      "properties": {
                        "store_id": "boroughmarket",
                        "name": "Borough Market",
                        "contact": {
                          "phone": "020 7407 1002",
                          "website": "http://boroughmarket.org.uk"
                        },
                        "address": {
                          "lines": [
                            "8 Southwark St"
                          ],
                          "country_code": "UK",
                          "city": "London",
                          "zipcode": "SE1 1TL"
                        },
                        "user_properties": {
                          "photo": "https://preview.webgeoservices.com/jsfiddle/boroughmarket.jpeg",
                          "placeId": "ChIJD2bPdVcDdkgRiDyO6mrCsu4"
                        },
                        "tags": [],
                        "types": [
                          "covered"
                        ],
                        "open": {
                          "open_now": true,
                          "open_hours": [
                            {
                              "end": "17:00",
                              "start": "10:00"
                            }
                          ],
                          "week_day": 3,
                          "current_slice": {
                            "end": "17:00",
                            "start": "10:00"
                          }
                        },
                        "weekly_opening": {
                          "1": {
                            "hours": [
                              {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "2": {
                            "hours": [
                              {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "3": {
                            "hours": [
                              {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "4": {
                            "hours": [
                              {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "5": {
                            "hours": [
                              {
                                "end": "18:00",
                                "start": "10:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "6": {
                            "hours": [
                              {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "7": {
                            "hours": [],
                            "isSpecial": false
                          },
                          "timezone": "Europe/London"
                        },
                        "opening_hours": {
                          "usual": {
                            "5": [
                              {
                                "end": "18:00",
                                "start": "10:00"
                              }
                            ],
                            "7": [],
                            "default": [
                              {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            ]
                          },
                          "timezone": "Europe/London"
                        }
                      },
                      "geometry": {
                        "type": "Point",
                        "coordinates": [
                          -0.090679,
                          51.505046
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404 NOT FOUND - `storeId` do not exist in the project identified with the key parameter."
          }
        }
      }
    },
    "/stores/replace": {
      "post": {
        "summary": "Replace all assets",
        "operationId": "replaceStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "To replace all your Assets. This endpoint will delete all previous assets and import assets in request body. During the operation previous assets could always be displayed on map. If the import failed previous assets are not deleted.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "stores": [
                      {
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "storeId": "STORE_ID_123456",
                        "name": "My Cool Store",
                        "address": {
                          "lines": [
                            "Building Centre",
                            "26 Store Street"
                          ],
                          "countryCode": "UK",
                          "city": "London",
                          "zipcode": "WC1E 7BT"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          },
                          "special": {
                            "2015-02-07": [
                              {
                                "start": "08:00",
                                "end": "23:00"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      }
    },
    "/stores/search": {
      "get": {
        "summary": "Search for assets",
        "operationId": "storeSearch",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Store Search API"
        ],
        "description": "Used to retrieve assets from query\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFeatureCollectionResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "type": "FeatureCollection",
                      "features": [
                        {
                          "type": "Feature",
                          "properties": {
                            "store_id": "boroughmarket",
                            "name": "Borough Market",
                            "contact": {
                              "phone": "020 7407 1002",
                              "website": "http://boroughmarket.org.uk"
                            },
                            "address": {
                              "lines": [
                                "8 Southwark St"
                              ],
                              "country_code": null,
                              "city": "London",
                              "zipcode": "SE1 1TL"
                            },
                            "user_properties": {
                              "photo": "https://preview.webgeoservices.com/jsfiddle/boroughmarket.jpeg",
                              "placeId": "ChIJD2bPdVcDdkgRiDyO6mrCsu4"
                            },
                            "tags": [],
                            "types": [
                              "covered"
                            ],
                            "open": {
                              "open_now": true,
                              "open_hours": [
                                {
                                  "end": "17:00",
                                  "start": "10:00"
                                }
                              ],
                              "week_day": 1,
                              "current_slice": {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            },
                            "weekly_opening": {
                              "1": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "2": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "3": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "4": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "5": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "6": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "7": {
                                "hours": [],
                                "isSpecial": false
                              },
                              "timezone": "Europe/London"
                            },
                            "opening_hours": {
                              "usual": {
                                "5": [
                                  {
                                    "end": "18:00",
                                    "start": "10:00"
                                  }
                                ],
                                "7": [],
                                "default": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ]
                              },
                              "timezone": "Europe/London"
                            }
                          },
                          "geometry": {
                            "type": "Point",
                            "coordinates": [
                              -0.090679,
                              51.505046
                            ]
                          }
                        },
                        {
                          "type": "Feature",
                          "properties": {
                            "store_id": "courssaleya",
                            "name": "Cours Saleya",
                            "contact": {
                              "phone": "04 92 14 46 14",
                              "website": "http://leblogduvieuxnice.nicematin.com/.services/blog/6a0120a864ed46970b0162fd89fc17970d/search?filter.q=marché"
                            },
                            "address": {
                              "lines": [
                                "Place Charles Félix"
                              ],
                              "country_code": null,
                              "city": "Nice",
                              "zipcode": "06300"
                            },
                            "user_properties": {
                              "photo": "https://preview.webgeoservices.com/jsfiddle/courssaleya.jpeg",
                              "placeId": "ChIJw3OrJKPazRIR6WPu_P9ByG4"
                            },
                            "tags": [],
                            "types": [
                              "covered"
                            ],
                            "open": {
                              "open_now": false,
                              "open_hours": [],
                              "week_day": 1,
                              "next_opening": {
                                "end": "17:30",
                                "start": "06:00",
                                "day": "2021-11-16"
                              }
                            },
                            "weekly_opening": {
                              "1": {
                                "hours": [],
                                "isSpecial": false
                              },
                              "2": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "3": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "4": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "5": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "6": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "7": {
                                "hours": [
                                  {
                                    "end": "13:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "timezone": "Europe/Paris"
                            },
                            "opening_hours": {
                              "usual": {
                                "1": [],
                                "7": [
                                  {
                                    "end": "13:30",
                                    "start": "06:00"
                                  }
                                ],
                                "default": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ]
                              },
                              "timezone": "Europe/Paris"
                            }
                          },
                          "geometry": {
                            "type": "Point",
                            "coordinates": [
                              7.275492,
                              43.69553
                            ]
                          }
                        }
                      ],
                      "pagination": {
                        "page": 1,
                        "pageCount": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/autocomplete": {
      "get": {
        "summary": "Autocomplete for assets",
        "operationId": "storeAutocomplete",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Store Search API"
        ],
        "description": "Autocomplete on `localizedNames` with highlighted results on asset name. Use the field `localized` in your query parameter to search for localized names.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFeatureCollectionResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "type": "FeatureCollection",
                      "features": [
                        {
                          "type": "Feature",
                          "properties": {
                            "store_id": "boroughmarket",
                            "name": "Borough Market",
                            "contact": {
                              "phone": "020 7407 1002",
                              "website": "http://boroughmarket.org.uk"
                            },
                            "address": {
                              "lines": [
                                "8 Southwark St"
                              ],
                              "country_code": null,
                              "city": "London",
                              "zipcode": "SE1 1TL"
                            },
                            "user_properties": {
                              "photo": "https://preview.webgeoservices.com/jsfiddle/boroughmarket.jpeg",
                              "placeId": "ChIJD2bPdVcDdkgRiDyO6mrCsu4"
                            },
                            "tags": [],
                            "types": [
                              "covered"
                            ],
                            "open": {
                              "open_now": true,
                              "open_hours": [
                                {
                                  "end": "17:00",
                                  "start": "10:00"
                                }
                              ],
                              "week_day": 1,
                              "current_slice": {
                                "end": "17:00",
                                "start": "10:00"
                              }
                            },
                            "weekly_opening": {
                              "1": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "2": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "3": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "4": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "5": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "6": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "7": {
                                "hours": [],
                                "isSpecial": false
                              },
                              "timezone": "Europe/London"
                            },
                            "opening_hours": {
                              "usual": {
                                "5": [
                                  {
                                    "end": "18:00",
                                    "start": "10:00"
                                  }
                                ],
                                "7": [],
                                "default": [
                                  {
                                    "end": "17:00",
                                    "start": "10:00"
                                  }
                                ]
                              },
                              "timezone": "Europe/London"
                            }
                          },
                          "geometry": {
                            "type": "Point",
                            "coordinates": [
                              -0.090679,
                              51.505046
                            ]
                          }
                        },
                        {
                          "type": "Feature",
                          "properties": {
                            "store_id": "courssaleya",
                            "name": "Cours Saleya",
                            "contact": {
                              "phone": "04 92 14 46 14",
                              "website": "http://leblogduvieuxnice.nicematin.com/.services/blog/6a0120a864ed46970b0162fd89fc17970d/search?filter.q=marché"
                            },
                            "address": {
                              "lines": [
                                "Place Charles Félix"
                              ],
                              "country_code": null,
                              "city": "Nice",
                              "zipcode": "06300"
                            },
                            "user_properties": {
                              "photo": "https://preview.webgeoservices.com/jsfiddle/courssaleya.jpeg",
                              "placeId": "ChIJw3OrJKPazRIR6WPu_P9ByG4"
                            },
                            "tags": [],
                            "types": [
                              "covered"
                            ],
                            "open": {
                              "open_now": false,
                              "open_hours": [],
                              "week_day": 1,
                              "next_opening": {
                                "end": "17:30",
                                "start": "06:00",
                                "day": "2021-11-16"
                              }
                            },
                            "weekly_opening": {
                              "1": {
                                "hours": [],
                                "isSpecial": false
                              },
                              "2": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "3": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "4": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "5": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "6": {
                                "hours": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "7": {
                                "hours": [
                                  {
                                    "end": "13:30",
                                    "start": "06:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "timezone": "Europe/Paris"
                            },
                            "opening_hours": {
                              "usual": {
                                "1": [],
                                "7": [
                                  {
                                    "end": "13:30",
                                    "start": "06:00"
                                  }
                                ],
                                "default": [
                                  {
                                    "end": "17:30",
                                    "start": "06:00"
                                  }
                                ]
                              },
                              "timezone": "Europe/Paris"
                            }
                          },
                          "geometry": {
                            "type": "Point",
                            "coordinates": [
                              7.275492,
                              43.69553
                            ]
                          }
                        }
                      ],
                      "pagination": {
                        "page": 1,
                        "pageCount": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/localities/autocomplete": {
      "get": {
        "summary": "Autocomplete for Localities",
        "operationId": "localitiesAutocomplete",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Localities API"
        ],
        "description": "Autocomplete on worldwide suggestions for a for text-based geographic searches. It can match on full words as well as substrings. You can therefore send queries as the user types, to provide on-the-fly city names, postal codes or suburb name suggestions.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_input"
          },
          {
            "$ref": "#/components/parameters/localities_types"
          },
          {
            "$ref": "#/components/parameters/localities_components"
          },
          {
            "$ref": "#/components/parameters/localities_language"
          },
          {
            "$ref": "#/components/parameters/localities_data"
          },
          {
            "$ref": "#/components/parameters/localities_extended"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalitiesAutocompleteCollectionResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "localities": [
                        {
                          "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
                          "description": "London, City of London, United Kingdom",
                          "name": "London",
                          "type": "locality",
                          "location": {
                            "lat": 51.50732,
                            "lng": -0.12764746
                          },
                          "matched_substrings": {
                            "name": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ],
                            "admin_1": [
                              {
                                "offset": 8,
                                "length": 6
                              }
                            ],
                            "description": [
                              {
                                "offset": 0,
                                "length": 6
                              },
                              {
                                "offset": 16,
                                "length": 6
                              }
                            ]
                          },
                          "admin_1": "City of London",
                          "locality": "",
                          "admin_0": "United Kingdom"
                        },
                        {
                          "public_id": "8tpkf5LFYQzfpzKxMovi+ObhRuQ=",
                          "description": "London, Ontario, Canada",
                          "name": "London",
                          "type": "locality",
                          "location": {
                            "lat": 42.983673,
                            "lng": -81.2496
                          },
                          "matched_substrings": {
                            "name": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ],
                            "description": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ]
                          },
                          "admin_1": "Ontario",
                          "locality": "",
                          "admin_0": "Canada"
                        },
                        {
                          "public_id": "lXJg4Ba5ZBZfVfsI9YWje/A4l2o=",
                          "description": "London, Kentucky, United States",
                          "name": "London",
                          "type": "locality",
                          "location": {
                            "lat": 37.12898,
                            "lng": -84.08327
                          },
                          "matched_substrings": {
                            "name": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ],
                            "description": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ]
                          },
                          "admin_1": "Kentucky",
                          "locality": "",
                          "admin_0": "United States"
                        },
                        {
                          "public_id": "aWawRrKbLmU0+dUpWo5TzH2p4QI=",
                          "description": "London, Ohio, United States",
                          "name": "London",
                          "type": "locality",
                          "location": {
                            "lat": 39.886448,
                            "lng": -83.44825
                          },
                          "matched_substrings": {
                            "name": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ],
                            "description": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ]
                          },
                          "admin_1": "Ohio",
                          "locality": "",
                          "admin_0": "United States"
                        },
                        {
                          "public_id": "ZLeThT8qWy+GJgMtlX+9jpQJpx8=",
                          "description": "London, Bushbuckridge, South Africa",
                          "name": "London",
                          "type": "locality",
                          "location": {
                            "lat": -24.817778,
                            "lng": 31.047222
                          },
                          "matched_substrings": {
                            "name": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ],
                            "description": [
                              {
                                "offset": 0,
                                "length": 6
                              }
                            ]
                          },
                          "admin_1": "Mpumalanga",
                          "admin_2": "Bushbuckridge",
                          "locality": "",
                          "admin_0": "South Africa"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/localities/details": {
      "get": {
        "summary": "Details of a Locality",
        "operationId": "localitiesDetails",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Localities API"
        ],
        "description": "Provides details of an autocomplete suggestion (using the suggestion’s `public_id`).\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_public_id"
          },
          {
            "$ref": "#/components/parameters/localities_fields"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalitiesDetailsResponse"
                },
                "examples": {
                  "Address": {
                    "value": {
                      "result": {
                        "formatted_address": "House Of Commons, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                        "types": [
                          "address"
                        ],
                        "public_id": "MVZWBfGZQnAQn9JtE9CJZjgeB4Q=",
                        "geometry": {
                          "location": {
                            "lat": 51.49984,
                            "lng": -0.1246375
                          },
                          "accuracy": "ROOFTOP"
                        },
                        "address_components": [
                          {
                            "types": [
                              "country",
                              "administrative_area_level_0"
                            ],
                            "long_name": "United Kingdom",
                            "short_name": "GB"
                          },
                          {
                            "types": [
                              "administrative_area_level_1"
                            ],
                            "long_name": "City of London",
                            "short_name": "City of London"
                          },
                          {
                            "types": [
                              "premise"
                            ],
                            "long_name": "House Of Commons Palace Of Westminster",
                            "short_name": "House Of Commons Palace Of Westminster"
                          },
                          {
                            "types": [
                              "locality"
                            ],
                            "long_name": "London",
                            "short_name": "London"
                          },
                          {
                            "types": [
                              "postal_codes"
                            ],
                            "long_name": "SW1A 0AA",
                            "short_name": "SW1A 0AA"
                          },
                          {
                            "types": [
                              "organisation"
                            ],
                            "long_name": "House Of Commons",
                            "short_name": "House Of Commons"
                          },
                          {
                            "types": [
                              "route"
                            ],
                            "long_name": "Parliament Square",
                            "short_name": "Parliament Square"
                          }
                        ]
                      }
                    }
                  },
                  "PostalCode": {
                    "value": {
                      "result": {
                        "formatted_address": "SW1A 0AA, City of London",
                        "types": [
                          "postal_code"
                        ],
                        "public_id": "QaCU+fBtigK65ztSrqHqUoUDwZw=",
                        "name": "SW1A 0AA",
                        "geometry": {
                          "location": {
                            "lat": 51.49984,
                            "lng": -0.124663
                          }
                        },
                        "address_components": [
                          {
                            "types": [
                              "country",
                              "administrative_area_level_0"
                            ],
                            "long_name": "United Kingdom",
                            "short_name": "GB"
                          },
                          {
                            "types": [
                              "administrative_area_level_1"
                            ],
                            "long_name": "City of London",
                            "short_name": "City of London"
                          }
                        ],
                        "addresses": {
                          "pagination": {
                            "page": 1,
                            "page_count": 1,
                            "addresses_per_page": 20,
                            "address_count": 5
                          },
                          "list": [
                            {
                              "description": "Postmasters Redirection Service, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                              "public_id": "DuxKg3/i5t1AuSt1qvwaiSgd+gI="
                            },
                            {
                              "description": "The Speakers House, 1 Parliament Square, London, SW1A 0AA",
                              "public_id": "J9y6c0VHd8L5djgVKAmUZir1D74="
                            },
                            {
                              "description": "Speakers Housekeepers Apartment, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                              "public_id": "K13iP+XIfYK2h+6NFqVVX2q0NQ8="
                            },
                            {
                              "description": "House Of Commons, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                              "public_id": "MVZWBfGZQnAQn9JtE9CJZjgeB4Q="
                            },
                            {
                              "description": "Lord Chancellors Residence, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                              "public_id": "i5WqCPd+qTTnZtiXnKzV8KoIpT8="
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/address/autocomplete/json": {
      "get": {
        "summary": "Autocomplete for Addresses",
        "operationId": "addressAutocomplete",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Address API"
        ],
        "description": "Autocomplete on worldwide suggestions for a for text-based geographic searches. It can match on full words as well as substrings.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/address_input"
          },
          {
            "$ref": "#/components/parameters/address_components"
          },
          {
            "$ref": "#/components/parameters/address_location"
          },
          {
            "$ref": "#/components/parameters/address_language"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressAutocompleteCollectionResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "predictions": [
                        {
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
                          "description": "London, England, United Kingdom",
                          "matched_substring": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          },
                          "type": "locality"
                        },
                        {
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIxMDg1NjIw",
                          "description": "London, ON, Canada",
                          "matched_substring": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          },
                          "type": "locality"
                        },
                        {
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDE5Nzgz",
                          "description": "Londonderry, Northern Ireland, United Kingdom",
                          "matched_substring": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          },
                          "type": "locality"
                        },
                        {
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIzMDM1ODQx",
                          "description": "Londrina, PR, Brazil",
                          "matched_substring": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          },
                          "type": "locality"
                        }
                      ],
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/address/details/json": {
      "get": {
        "summary": "Details of an Address",
        "operationId": "addressDetails",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Address API"
        ],
        "description": "Provides details of an address autocomplete suggestion (using the suggestion’s `public_id`).\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/address_public_id"
          },
          {
            "$ref": "#/components/parameters/address_fields"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDetailsResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "result": {
                        "formatted_address": "London, England, United Kingdom",
                        "types": [
                          "locality"
                        ],
                        "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
                        "address_components": [
                          {
                            "types": [
                              "country"
                            ],
                            "long_name": "United Kingdom",
                            "short_name": "GBR"
                          },
                          {
                            "types": [
                              "state"
                            ],
                            "long_name": "England",
                            "short_name": "England"
                          },
                          {
                            "types": [
                              "county"
                            ],
                            "long_name": "London",
                            "short_name": "LDN"
                          },
                          {
                            "long_name": "London",
                            "short_name": "London",
                            "types": [
                              "locality"
                            ]
                          },
                          {
                            "long_name": "SW1A 2",
                            "short_name": "SW1A 2",
                            "types": [
                              "postal_code"
                            ]
                          }
                        ],
                        "geometry": {
                          "location_type": "GEOMETRIC_CENTER",
                          "location": {
                            "lat": 51.50643,
                            "lng": -0.12719
                          },
                          "viewport": {
                            "northeast": {
                              "lat": 51.68629,
                              "lng": 0.28206
                            },
                            "southwest": {
                              "lat": 51.28043,
                              "lng": -0.56316
                            }
                          }
                        }
                      },
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/zones": {
      "post": {
        "summary": "Create your Zones",
        "operationId": "createZones",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to batch create Zones to a specific project identified with the `private_key` parameter.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZonesCollectionRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "zones": [
                      {
                        "zone_id": "ZoneA",
                        "description": "Delivery Zone for Store A",
                        "store_id": "store_a",
                        "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneB",
                        "description": "Delivery Zone for Store B",
                        "store_id": "store_b",
                        "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneC",
                        "description": "Delivery Zone for Store C",
                        "store_id": "store_c",
                        "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
                        "types": [
                          "delivery"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      },
      "put": {
        "summary": "Update the Zones.",
        "operationId": "updateZones",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to update zones in batch. `zone_id` must exists when using `PUT` method, if one zone does not exists, the batch will be refused.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZonesCollectionRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "zones": [
                      {
                        "zone_id": "ZoneA",
                        "description": "Delivery Zone for Store A",
                        "store_id": "store_a",
                        "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneB",
                        "description": "Delivery Zone for Store B",
                        "store_id": "store_b",
                        "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneC",
                        "description": "Delivery Zone for Store C",
                        "store_id": "store_c",
                        "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
                        "types": [
                          "delivery"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      },
      "delete": {
        "summary": "Delete the Zones",
        "operationId": "deleteZones",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to delete one or more Zones. The `zone_id` is the id of the zone to delete. To delete several zones, use the comma as a separator.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "zone_id",
            "description": "The zone ID to delete",
            "in": "query",
            "example": "ZoneA",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      }
    },
    "/zones/{zone_id}": {
      "get": {
        "summary": "Get Zone from ID",
        "operationId": "getZone",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to retrieve a zone from his `zone_id`\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "zone_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "ZoneA",
            "description": "ID of the zone to get"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zone"
                },
                "examples": {
                  "default": {
                    "value": {
                      "zone_id": "ZoneA",
                      "description": "Delivery Zone for Store A",
                      "store_id": "store_a",
                      "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
                      "types": [
                        "delivery"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "404 NOT FOUND - `zone_id` do not exist in the project identified with the key parameter."
          }
        }
      }
    },
    "/distance/distancematrix/json": {
      "get": {
        "summary": "Distance Matrix",
        "operationId": "getDistanceMatrix",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Distance API"
        ],
        "description": "Get distances and durations for a matrix of origins and destinations, based on the recommended route between start and end points for a specified travel mode.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origins"
          },
          {
            "$ref": "#/components/parameters/distance_destinations"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_elements"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceMatrixResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "status": "OK",
                      "rows": [
                        {
                          "elements": [
                            {
                              "status": "OK",
                              "duration": {
                                "value": 866,
                                "text": "14 mins"
                              },
                              "distance": {
                                "value": 10613,
                                "text": "10.6 km"
                              }
                            },
                            {
                              "status": "OK",
                              "duration": {
                                "value": 935,
                                "text": "16 mins"
                              },
                              "distance": {
                                "value": 10287,
                                "text": "10.3 km"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Get Distance Matrix using POST",
        "operationId": "postDistanceMatrix",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Distance API"
        ],
        "description": "Get distances and durations for a matrix of origins and destinations, based on the recommended route between start and end points for a specified travel mode. If the URL size is too short for your origins and destinations, you should request the server using this POST method and passing arguments as json.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistanceMatrixRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "origins": "48.73534,2.368308|48.73534,2.368308",
                    "destinations": "48.83534,2.368308",
                    "units": "imperial",
                    "elements": "duration_distance",
                    "method": "distance"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceMatrixResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "status": "OK",
                      "rows": [
                        {
                          "elements": [
                            {
                              "status": "OK",
                              "duration": {
                                "value": 866,
                                "text": "14 mins"
                              },
                              "distance": {
                                "value": 10613,
                                "text": "10.6 km"
                              }
                            },
                            {
                              "status": "OK",
                              "duration": {
                                "value": 935,
                                "text": "16 mins"
                              },
                              "distance": {
                                "value": 10287,
                                "text": "10.3 km"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/distance/route/json": {
      "get": {
        "summary": "Get Route",
        "operationId": "getRoute",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Distance API"
        ],
        "description": "Get distance, duration and path (as a polyline) for a pair of origin and destination, based on the recommended route between those two points for a specified travel mode.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origins"
          },
          {
            "$ref": "#/components/parameters/distance_destinations"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_alternatives"
          },
          {
            "$ref": "#/components/parameters/distance_waypoints"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceRouteResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "status": "OK",
                      "routes": [
                        {
                          "overview_polyline": {
                            "points": "w_diHa_fSb@@dAXpD~@~DfAlAn@x@j@v@l@xB|@bBh@Ac@PoBb@oHRuETcEXwDXaDhAaJR}AFkABqCBcBDg@BUT{@`@o@t@i@fA{@fAmA`B{C`@eAr@uBfAaCz@sB`@eAHK|@GdAoABSC]qAsJE]gB\\]qDy@iFIi@Gk@@sAFsDJk@JGDAPITSHY^cCkAk@cBs@gBm@_@K]YW]Me@cAeFgBoIc@uBy@kCk@oB[_BSaBM}ACkAKsGGgJ?k@D{@Ry@~AsCVi@Pw@PmA\\mELaBPyAX{ATy@VkAFm@BaACgAW}CMgBEeBGs@Oy@w@{Cm@cDKe@Wo@oA{B]aAQe@[yAQeAIs@I_AMw@U{@_CuI}AsGi@iCS_B[gECi@AeBB_BFgAv@kHNaBBaA?aAMaECcCPgO@wCEaCUeMQwM@]NcAf@mBHi@Hm@@s@Au@OwEs@oUq@uTMeBSgAiA}EsDaOQu@Ce@~Dgs@vDmp@}Dy@aCy@aB}@eEoC"
                          },
                          "bounds": {
                            "northeast": {
                              "lat": 48.85017,
                              "lng": 3.41085
                            },
                            "southwest": {
                              "lat": 48.84051,
                              "lng": 3.31062
                            }
                          },
                          "summary": "",
                          "legs": [
                            {
                              "distance": {
                                "text": "8.8 km",
                                "value": 8848.7
                              },
                              "duration": {
                                "text": "16 mins",
                                "value": 971.2
                              },
                              "start_location": {
                                "lat": 48.850036,
                                "lng": 3.312646
                              },
                              "end_location": {
                                "lat": 48.850165,
                                "lng": 3.41085
                              }
                            }
                          ]
                        },
                        {
                          "overview_polyline": {
                            "points": "w_diHa_fSb@@dAXpD~@~DfAlAn@x@j@v@l@xB|@bBh@Ac@PoBb@oHRuETcEXwDXaDhAaJR}AFkABqCBcBDg@BUT{@`@o@t@i@fA{@fAmA`B{C`@eAr@uBfAaCz@sB`@eAHK|@GdAoABSC]qAsJE]dDm@fJeBFATED]xDsHpB{DhC_Ff@aAz@wB`BeLFuAXaHNmAtAkHLu@tDqRNq@bAoFXoBf@mHH_A~Bm]HiABw@@u@Cg@Y}ECw@ByADq@PkA\\sAv@kCNe@P_APmADeA?cAE_AKcAw@{DMaAIu@CiADeAHiAN{@nB_LXyAtCmLpAe^l@kNBcCQ}CiBaU[{DqAj@{At@c@Gk@{@gByFqFcQaP_\\_HaTsFcQuEsNuByBq@aAqAuC{CgGaMsXaLaYg@uAKe@oDk@}Dy@aCy@aB}@eEoC"
                          },
                          "bounds": {
                            "northeast": {
                              "lat": 48.85017,
                              "lng": 3.41085
                            },
                            "southwest": {
                              "lat": 48.82936,
                              "lng": 3.31062
                            }
                          },
                          "summary": "",
                          "legs": [
                            {
                              "distance": {
                                "text": "9.7 km",
                                "value": 9669.2
                              },
                              "duration": {
                                "text": "17 mins",
                                "value": 1023.1
                              },
                              "start_location": {
                                "lat": 48.850036,
                                "lng": 3.312646
                              },
                              "end_location": {
                                "lat": 48.850165,
                                "lng": 3.41085
                              }
                            }
                          ]
                        },
                        {
                          "overview_polyline": {
                            "points": "w_diHa_fSY?m@Ey@c@eBeBsD{E}@[k@_@o@w@Wk@]_B_@y@o@a@e@L[A[Iq@Y]Qg@Mo@Cu@FS@OAy@k@a@IwC@o@I?i@E}AKiAKc@Is@K[Qm@w@}GAIa@uDe@uEQaBuDo]]kDOcCGkDQgRGwGMgPKkEM{NGuFMiA_@qAk@w@w@a@w@Ea@D]L_@NBc@Tc@r@aBzAmCd@{@l@cAb@y@^m@l@w@z@uAV_@ZSXK^IRKRYHs@Hi@L[LOEUu@_D}@gDaB{Ca@mBDc@n@OdFzFz@`@\\s@BgAgFmT]_PxDaJvAwFRyCZ{EB@f@P@?n@NVLNHfCC~ACZBVN^h@VVXLd@?|DO`AAvIHF?T?RCPMTQ|AiBnAwAxA}AXM\\Gt@Ed@St@i@~DyCCi@AeBB_BFgAv@kHNaBBaA?aAMaECcCPgO@wCEaCUeMQwM@]NcAf@mBHi@Hm@@s@Au@OwEs@oUq@uTMeBSgAiA}EsDaOQu@Ce@~Dgs@vDmp@}Dy@aCy@aB}@eEoC"
                          },
                          "bounds": {
                            "northeast": {
                              "lat": 48.86089,
                              "lng": 3.41085
                            },
                            "southwest": {
                              "lat": 48.84682,
                              "lng": 3.31265
                            }
                          },
                          "summary": "",
                          "legs": [
                            {
                              "distance": {
                                "text": "9.8 km",
                                "value": 9810.3
                              },
                              "duration": {
                                "text": "19 mins",
                                "value": 1158.3
                              },
                              "start_location": {
                                "lat": 48.850036,
                                "lng": 3.312646
                              },
                              "end_location": {
                                "lat": 48.850165,
                                "lng": 3.41085
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/merchant/brands": {
      "post": {
        "summary": "Get Merchant Clean Names",
        "operationId": "getMerchantBrand",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Merchant API"
        ],
        "description": "Retrieve clean names and logos in response to a dirty transactions POST.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantBrandRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "merchants": [
                      {
                        "dirty_name": "MCDO UK 2231 EP",
                        "country": "GB"
                      },
                      {
                        "dirty_name": "Zara Fashion Retail, S.A.",
                        "country": "IT"
                      },
                      {
                        "dirty_name": "APOLLO PHARMACY BANGALORE IN",
                        "country": "IN"
                      },
                      {
                        "dirty_name": "PIZZA HUT - SHOP 157"
                      },
                      {
                        "dirty_name": "CARREFOUR CITY 3112846",
                        "country": "FR"
                      },
                      {
                        "dirty_name": "ITUNES.COM/BILL",
                        "country": "IE"
                      },
                      {
                        "dirty_name": "Pepa SL Gracia",
                        "country": "ES"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantBrandResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "merchants": [
                        {
                          "dirty_name": "MCDO UK 2231 EP",
                          "clean_name": "McDonald's",
                          "status": "OK",
                          "logo": "956bcb3591a8976ff94871a59b09eecc",
                          "logo_url": "https://api.woosmap.com/merchants/logos/956bcb3591a8976ff94871a59b09eecc.png",
                          "country": "GB",
                          "merchant_id": "234482729011"
                        },
                        {
                          "dirty_name": "Zara Fashion Retail, S.A.",
                          "clean_name": "Zara",
                          "status": "OK",
                          "logo": "72fc39033e0d9e923a0236cb874c9309",
                          "logo_url": "https://api.woosmap.com/merchants/logos/72fc39033e0d9e923a0236cb874c9309.png",
                          "country": "IT",
                          "merchant_id": "*44532UY2T33219"
                        },
                        {
                          "dirty_name": "APOLLO PHARMACY BANGALORE IN",
                          "clean_name": "Apollo Pharmacy",
                          "status": "OK",
                          "logo": "c776d3336e0d8c2b9e893e9e92b2caf7",
                          "logo_url": "https://api.woosmap.com/merchants/logos/c776d3336e0d8c2b9e893e9e92b2caf7.png",
                          "country": "IN"
                        },
                        {
                          "dirty_name": "PIZZA HUT - SHOP 157",
                          "clean_name": "Pizza Hut",
                          "status": "OK",
                          "logo": "d5463410f32a5f497459ac79552d3ce3",
                          "logo_url": "https://api.woosmap.com/merchants/logos/d5463410f32a5f497459ac79552d3ce3.png",
                          "country": ""
                        },
                        {
                          "dirty_name": "CARREFOUR CITY 3112846",
                          "clean_name": "Carrefour City",
                          "status": "OK",
                          "logo": "08ee8a3cecbcd3b7d9103bcf0e04db7e",
                          "logo_url": "https://api.woosmap.com/merchants/logos/08ee8a3cecbcd3b7d9103bcf0e04db7e.png",
                          "country": "FR",
                          "merchant_id": "9651781125"
                        },
                        {
                          "dirty_name": "ITUNES.COM/BILL",
                          "clean_name": "Apple",
                          "status": "OK",
                          "logo": "5eb75a5239b76287f44021f8e6e1bd41",
                          "logo_url": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
                          "country": "IE",
                          "merchant_id": "2070070200925"
                        },
                        {
                          "dirty_name": "Pepa SL Gracia",
                          "clean_name": "",
                          "status": "OK",
                          "logo": "",
                          "logo_url": "",
                          "country": "ES",
                          "merchant_id": "34J21189"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/merchant/place": {
      "post": {
        "summary": "Get Merchant Place",
        "operationId": "getMerchantPlace",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Merchant API"
        ],
        "description": "Retrieve clean names, logos and Google Place ID of given dirty merchants name.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantPlaceRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "merchants": [
                      {
                        "dirty_name": "MCDO UK 2231 EP",
                        "country": "GB"
                      },
                      {
                        "dirty_name": "Zara Fashion Retail, S.A.",
                        "country": "IT"
                      },
                      {
                        "dirty_name": "APOLLO PHARMACY BANGALORE IN",
                        "country": "IN"
                      },
                      {
                        "dirty_name": "PIZZA HUT - SHOP 157"
                      },
                      {
                        "dirty_name": "CARREFOUR CITY 3112846",
                        "country": "FR"
                      },
                      {
                        "dirty_name": "ITUNES.COM/BILL",
                        "country": "IE"
                      },
                      {
                        "dirty_name": "Pepa SL Gracia",
                        "country": "ES"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantPlaceResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "merchants": [
                        {
                          "dirty_name": "MCDO UK 2231 EP",
                          "clean_name": "McDonald's",
                          "status": "OK",
                          "logo": "956bcb3591a8976ff94871a59b09eecc",
                          "logo_url": "https://api.woosmap.com/merchants/logos/956bcb3591a8976ff94871a59b09eecc.png",
                          "country": "GB",
                          "merchant_id": "234482729011"
                        },
                        {
                          "dirty_name": "Zara Fashion Retail, S.A.",
                          "clean_name": "Zara",
                          "status": "OK",
                          "logo": "72fc39033e0d9e923a0236cb874c9309",
                          "logo_url": "https://api.woosmap.com/merchants/logos/72fc39033e0d9e923a0236cb874c9309.png",
                          "country": "IT",
                          "merchant_id": "*44532UY2T33219"
                        },
                        {
                          "dirty_name": "APOLLO PHARMACY BANGALORE IN",
                          "clean_name": "Apollo Pharmacy",
                          "status": "OK",
                          "logo": "c776d3336e0d8c2b9e893e9e92b2caf7",
                          "logo_url": "https://api.woosmap.com/merchants/logos/c776d3336e0d8c2b9e893e9e92b2caf7.png",
                          "country": "IN"
                        },
                        {
                          "dirty_name": "PIZZA HUT - SHOP 157",
                          "clean_name": "Pizza Hut",
                          "status": "OK",
                          "logo": "d5463410f32a5f497459ac79552d3ce3",
                          "logo_url": "https://api.woosmap.com/merchants/logos/d5463410f32a5f497459ac79552d3ce3.png",
                          "country": ""
                        },
                        {
                          "dirty_name": "CARREFOUR CITY 3112846",
                          "clean_name": "Carrefour City",
                          "status": "OK",
                          "logo": "08ee8a3cecbcd3b7d9103bcf0e04db7e",
                          "logo_url": "https://api.woosmap.com/merchants/logos/08ee8a3cecbcd3b7d9103bcf0e04db7e.png",
                          "country": "FR",
                          "merchant_id": "9651781125"
                        },
                        {
                          "dirty_name": "ITUNES.COM/BILL",
                          "clean_name": "Apple",
                          "status": "OK",
                          "logo": "5eb75a5239b76287f44021f8e6e1bd41",
                          "logo_url": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
                          "country": "IE",
                          "merchant_id": "2070070200925"
                        },
                        {
                          "dirty_name": "Pepa SL Gracia",
                          "clean_name": "",
                          "status": "OK",
                          "logo": "",
                          "logo_url": "",
                          "country": "ES",
                          "merchant_id": "34J21189"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 UNAUTHORIZED",
            "content": {
              "application/json": {
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "address_cc_format": {
        "name": "cc_format",
        "description": "To specify the format for the short country code expected to be returned in the address_components field (default is alpha3).\n",
        "schema": {
          "type": "string",
          "enum": [
            "alpha2",
            "alpha3"
          ]
        },
        "example": "alpha2",
        "in": "query"
      },
      "address_components": {
        "name": "components",
        "description": "To restrict your results to specific areas. Currently, you can use components to filter over countries. Countries must be passed as three characters string (ISO 3166-1 Alpha 3). Components should be passed as an array of different options which are separated by a `|`.\n",
        "schema": {
          "type": "string"
        },
        "example": "country:CAN|country:BEL",
        "in": "query"
      },
      "address_fields": {
        "name": "fields",
        "description": "Used to limit the returning fields (by default, all fields are return). Available fields are (geometry) (fields should be separated by a `,`). By using this parameter you will limit content of responses to the geometry part. No address component will be returned.\n",
        "schema": {
          "type": "string",
          "enum": [
            "geometry"
          ]
        },
        "in": "query",
        "example": "geometry"
      },
      "address_input": {
        "name": "input",
        "description": "The text string on which to search, for example: \"london\" or \"123 Cross Road\". The Woosmap Address API will return predictions matches based on this string and order the results based on their perceived relevance.\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "London"
      },
      "address_language": {
        "name": "language",
        "description": "The language code, using ISO 639-1 country codes, indicating in which language the results should be returned, if possible. If language is not supplied, the Localities service will use the default language of each country.\n",
        "schema": {
          "type": "string"
        },
        "in": "query",
        "example": "en"
      },
      "address_location": {
        "name": "location",
        "description": "Bias for the results. Should be pass in `lat`,`lng` format.\n",
        "schema": {
          "type": "string"
        },
        "example": "5.2,-2.3",
        "in": "query"
      },
      "address_public_id": {
        "name": "public_id",
        "description": "A textual identifier that uniquely identifies a locality, returned from a [Localities Autocomplete](https://developers.woosmap.com/products/localities/autocomplete/).\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMDA1MTI2"
      },
      "distance_alternatives": {
        "name": "alternatives",
        "in": "query",
        "example": true,
        "schema": {
          "type": "boolean",
          "enum": [
            true,
            false
          ]
        },
        "description": "Specifies if alternative routes should be returned. default is `false`. Depending on the calculated route, alternatives may not be provided.\n`alternatives` and `waypoints` can not be used at the same time.\n"
      },
      "distance_destinations": {
        "name": "destinations",
        "in": "query",
        "example": "48.709,2.403|48.768,2.338",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "One or more locations to use as the finishing point for calculating travel distance. The options for the destinations parameter are the same as for the origins parameter, described above. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
      },
      "distance_elements": {
        "name": "elements",
        "in": "query",
        "example": "duration_distance",
        "schema": {
          "type": "string",
          "enum": [
            "distance",
            "duration",
            "duration_distance"
          ]
        },
        "description": "Specifies element values that will be part of the API response (distance and/or duration). if not specified default is `distance`\n"
      },
      "distance_language": {
        "name": "language",
        "in": "query",
        "example": "en",
        "schema": {
          "type": "string"
        },
        "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or “en”.\n"
      },
      "distance_method": {
        "name": "method",
        "example": "distance",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "time",
            "distance"
          ]
        },
        "description": "Specifies the method to compute the route between the start point and the end point:\n- `time`: fastest route (default) - `distance`: shortest route\n"
      },
      "distance_mode": {
        "name": "mode",
        "in": "query",
        "example": "driving",
        "schema": {
          "type": "string",
          "enum": [
            "driving",
            "cycling",
            "walking"
          ]
        },
        "description": "Specifies the mode of transport to use when calculating distance\n"
      },
      "distance_origins": {
        "name": "origins",
        "in": "query",
        "example": "48.709,2.403",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The starting point for calculating travel distance. You can supply one or more locations separated by the pipe character (|), in the form of latitude/longitude coordinates. They are used unchanged to calculate distance. Ensure that no space exists between the latitude and longitude values. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
      },
      "distance_units": {
        "name": "units",
        "example": "metric",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "imperial",
            "metric"
          ]
        },
        "description": "Specifies the unit system to use when expressing distance as text. Two different units supported:\n* `metric` (default) returns distances in kilometers and meters * `imperial` returns distances in miles and feet\n"
      },
      "distance_waypoints": {
        "name": "waypoints",
        "in": "query",
        "example": "48.850077,3.311124|48.850077,3.411124",
        "schema": {
          "type": "string"
        },
        "description": "A list of points by which the route should pass. route response is divided into legs, one leg corresponding to a route between two waypoints. Waypoints should be separated by `|` character.\n`alternatives` and `waypoints` can not be used at the same time.\n"
      },
      "ip_address": {
        "name": "ip_address",
        "description": "The ip_address you want to geolocate. For **server call with private_key** only. Without this parameter, the API will geolocate the IP Address attached to the raw TCP request.\n",
        "in": "query",
        "example": "75.134.29.90",
        "schema": {
          "type": "string"
        }
      },
      "localities_components": {
        "name": "components",
        "description": "A grouping of places to which you would like to restrict your results. Currently, you can use `components` to filter over countries. Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code. For example: `components=country:fr` would restrict your results to places within France and `components=country:fr-fr` returns locations only in Metropolitan France. Multiple countries must be passed as multiple country:XX filters, with the pipe character (`|`) as a separator. For example: `components=country:gb|country:fr|country:be|country:sp|country:it` would restrict your results to city names or postal codes within the United Kingdom, France, Belgium, Spain and Italy.\n",
        "schema": {
          "type": "string"
        },
        "example": "country:fr|country:es",
        "in": "query"
      },
      "localities_data": {
        "name": "data",
        "description": "Two values for this parameter: `standard` or `advanced`. By default, if the parameter is not defined, value is set as `standard`. The `advanced` value opens suggestions to worldwide postal codes in addition to postal codes for Western Europe. ***A dedicated option subject to specific billing on your license is needed to use this parameter. Please contact us if you are interested in using this parameter and you do not have subscribed the proper option yet.***\n",
        "schema": {
          "type": "string",
          "enum": [
            "standard",
            "advanced"
          ]
        },
        "in": "query",
        "example": "advanced"
      },
      "localities_extended": {
        "name": "extended",
        "description": "If set, this parameter allows a refined search over locality names that bears the same postal code. By triggering this parameter, integrators will benefit from a search spectrum on the `locality` type that ***includes postal codes***. To avoid confusion, it is recommended not to activate this parameter along with the `postal_code` type which could lead to duplicate locations. Also, the default description returned by the API changes to `name (postal code), admin_1, admin_0`. It is only available for France and Italy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "postal_code"
          ]
        },
        "in": "query",
        "example": "postal_code"
      },
      "localities_fields": {
        "name": "fields",
        "description": "Used to limit the returning fields (by default, all fields are return). Available fields are (geometry) (fields should be separated by a ,). By using this parameter you will limit content of responses to the geometry part. No address component will be returned.\n",
        "schema": {
          "type": "string",
          "enum": [
            "geometry"
          ]
        },
        "in": "query",
        "example": "geometry"
      },
      "localities_input": {
        "name": "input",
        "description": "The text string on which to search, for example: \"london\" or \"123 Cross Road\". The Woosmap Localities API will return predictions matches based on this string and order the results based on their perceived relevance.\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "London"
      },
      "localities_language": {
        "name": "language",
        "description": "The language code, using ISO 3166-1 Alpha-2 country codes, indicating in which language the results should be returned, if possible. Searches are also biased to the selected language; results in the selected language may be given a higher ranking. If language is not supplied, the Localities service will use the default language of each country. No language necessary for `postal_code` request.\n",
        "schema": {
          "type": "string"
        },
        "in": "query",
        "example": "en"
      },
      "localities_public_id": {
        "name": "public_id",
        "description": "A textual identifier that uniquely identifies a locality, returned from a [Localities Autocomplete](https://developers.woosmap.com/products/localities/autocomplete/).\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
      },
      "localities_types": {
        "name": "types",
        "description": "The types of suggestion to return.\n* `locality`: includes locality names (from city to village) and suburbs * `postal_code`: publicly-used postal codes around the world * `address`: addresses (only available for UK and France) * `admin_level`: most commonly used administrative areas * `country`: countries as whole point of interest * `airport`: includes all medium sized to international sized airports * `train_station`: includes all train stations * `metro_station`: includes all metro stations * `shopping`: includes shopping malls (or \"shopping centers\") - *may include private retail brands* * `museum`: includes museums * `tourist_attraction`: includes tourist attractions like the Eiffel tower * `amusement_park`: includes amusement parks like Disneyland Paris * `art_gallery`: includes art galleries * `zoo`: includes zoos\n> The information returned on an `address` suggestion contain only a \"single-line\" description. A request to the [Details endpoint](/products/localities/details/) of the API must be performed to retrieve the location (geographic coordinates) and the address components (street address, zipcode, city..).\nNot specifying any type will only query `locality` and `postal_code`. Multiple types can be passed using the pipe character (`|`) as a separator. For example: `types=locality|airport|admin_level`.\n",
        "schema": {
          "type": "string",
          "enum": [
            "locality",
            "postal_code",
            "address",
            "admin_level",
            "country",
            "airport",
            "train_station",
            "metro_station",
            "shopping",
            "museum",
            "tourist_attraction",
            "amusement_park",
            "art_gallery",
            "zoo"
          ]
        },
        "in": "query",
        "example": "postal_code"
      },
      "query": {
        "name": "query",
        "in": "query",
        "example": "name:'My cool store'|type:'click_and_collect'",
        "schema": {
          "type": "string"
        },
        "description": "Search query combining one or more search clauses. Each search clause is made up of three parts structured as `field` `:` `operator` `value`. , e.g. `name:=\"My cool store\"`\n### Vocabulary\n- **Field**: attribute of the Store that is searched, e.g. the attribute `name` of the store.\n- **Operator**: test that is performed on the data to provide a match, e.g. `=`. Each field has a default operator. If none operator follow the `:`, the default one is used.\n- **Value**: the content of the attribute that is tested, e.g. the name of the store `\"My cool store\"`.\nCombine clauses with the conjunctions `AND` or `OR`, and negate the query with `NOT`.\n### Fields\n- `type`: An element is contained within `type` collection. e.g. `type:\"myType\"`\n- `tag`: An element is contained within `tag` collection. e.g. `tag:\"myTag\"`\n- `city`: text matching: the value match the `city` field. e.g. `city:=\"Paris\"`\n- `country`: text matching: the value match the `countryCode` field. e.g. `country:=\"FR\"`\n- `name`: text matching: the value match the `name` field. e.g. `name:=\"myName\"`\n- `idstore`: text matching: the value match the `idstore` field.  e.g. `idstore:=\"myIdStore\"`\n- `user`: concerns all fields inside `user_properties`. text matching or numerical comparison.  e.g. `user.myAttribute:=\"myValue\"`\n- `localized`: used for [localizedNames](https://developers.woosmap.com/products/data-api/data-structure/#localizednames) to search in native language. text matching in collection: the value match one of the the `localizedNames`. e.g. `localized:=\"centro\"`\n\n> **userProperties** field has no restriction regarding the data you can put in it (Arrays, Object, Boolean, String, Numeric...) but you can only query for **text matching or numerical comparison**.\n### Operators\n- `:` : Default and mandatory operator. For `type` and `tag` fields, define that an element is contained within a collection.\n- `=` : The content of a string or a number is equal to the other.\n- `>` : A number is greater than another.\n- `<` : A number is smaller than another.\n- `>=` : A number is greater than or equal to another.\n- `<=` : A number is smaller than or equal to another.\n- `AND` : Return assets that match both clauses.\n- `OR` : Return assets that match either clauses.\n- `NOT` : Negates a search clause.\nFor compound clauses, you can use parentheses to group clauses together. For example: ```(type:\"type1\" OR type:\"type2\") AND tag:\"hockey\"```\nYou can use `NOT` operator to negates a search clause. For example: ```not type:\"type1\"```\n"
      }
    },
    "schemas": {
      "Bounds": {
        "title": "Bounds",
        "type": "object",
        "description": "A rectangle in geographical coordinates from points at the southwest and northeast corners.",
        "required": [
          "northeast",
          "southwest"
        ],
        "properties": {
          "northeast": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "southwest": {
            "$ref": "#/components/schemas/LatLngLiteral"
          }
        }
      },
      "LatLngLiteral": {
        "title": "LatLngLiteral",
        "type": "object",
        "description": "An object describing a specific location with Latitude and Longitude in decimal degrees.",
        "required": [
          "lat",
          "lng"
        ],
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude in decimal degrees"
          },
          "lng": {
            "type": "number",
            "description": "Longitude in decimal degrees"
          }
        }
      },
      "LatLngArrayString": {
        "title": "LatLngArrayString",
        "description": "An array of comma separated {latitude,longitude} strings.",
        "example": [
          "43.4,-2.1",
          "46.32,-89.45"
        ],
        "type": "array",
        "items": {
          "type": "number",
          "minItems": 2,
          "maxItems": 2
        }
      },
      "GeoJsonPoint": {
        "title": "GeoJsonPoint",
        "type": "object",
        "description": "GeoJSon Point Geometry",
        "required": [
          "type",
          "coordinates"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Point"
            ],
            "description": "the geometry type"
          },
          "coordinates": {
            "$ref": "#/components/schemas/LatLngArrayString"
          }
        }
      },
      "AssetResponse": {
        "title": "AssetResponse",
        "type": "object",
        "description": "Attributes describing an Asset.",
        "properties": {
          "name": {
            "description": "The asset's name.",
            "type": "string",
            "example": "My Cool Store"
          },
          "store_id": {
            "$ref": "#/components/schemas/AssetId"
          },
          "address": {
            "$ref": "#/components/schemas/AssetAddressResponse"
          },
          "contact": {
            "$ref": "#/components/schemas/AssetContact"
          },
          "open": {
            "$ref": "#/components/schemas/AssetOpenResponse"
          },
          "weekly_opening": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningResponse"
          },
          "types": {
            "description": "Contains an array of types describing the Asset.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "drive",
              "click_and_collect"
            ]
          },
          "tags": {
            "description": "Contains an array of tags describing the Asset. For example a list of available amenities.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "wifi",
              "covered_parking"
            ]
          },
          "user_properties": {
            "description": "Contains all additional information relative to an Asset",
            "type": "object",
            "example": [
              "wifi",
              "covered_parking"
            ]
          },
          "opening_hours": {
            "$ref": "#/components/schemas/AssetOpeningHours"
          },
          "distance": {
            "description": "The distance in meters from the geolocated position or searched position if exist",
            "type": "number"
          }
        }
      },
      "AssetFeatureResponse": {
        "title": "AssetFeatureResponse",
        "type": "object",
        "description": "Asset Response as a GeoJSon Feature with Asset properties",
        "required": [
          "type",
          "properties",
          "geometry"
        ],
        "properties": {
          "type": {
            "description": "the Geojson Type (only 'Feature')",
            "type": "string",
            "enum": [
              "Feature"
            ]
          },
          "properties": {
            "$ref": "#/components/schemas/AssetResponse"
          },
          "geometry": {
            "$ref": "#/components/schemas/GeoJsonPoint"
          }
        },
        "example": {
          "type": "Feature",
          "properties": {
            "store_id": "boroughmarket",
            "name": "Borough Market",
            "contact": {
              "phone": "020 7407 1002",
              "website": "http://boroughmarket.org.uk"
            },
            "address": {
              "lines": [
                "8 Southwark St"
              ],
              "country_code": "UK",
              "city": "London",
              "zipcode": "SE1 1TL"
            },
            "user_properties": {
              "photo": "https://preview.webgeoservices.com/jsfiddle/boroughmarket.jpeg",
              "placeId": "ChIJD2bPdVcDdkgRiDyO6mrCsu4"
            },
            "tags": [],
            "types": [
              "covered"
            ],
            "open": {
              "open_now": true,
              "open_hours": [
                {
                  "end": "17:00",
                  "start": "10:00"
                }
              ],
              "week_day": 3,
              "current_slice": {
                "end": "17:00",
                "start": "10:00"
              }
            },
            "weekly_opening": {
              "1": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "2": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "3": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "4": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "5": {
                "hours": [
                  {
                    "end": "18:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "6": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "7": {
                "hours": [],
                "isSpecial": false
              },
              "timezone": "Europe/London"
            },
            "opening_hours": {
              "usual": {
                "5": [
                  {
                    "end": "18:00",
                    "start": "10:00"
                  }
                ],
                "7": [],
                "default": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ]
              },
              "timezone": "Europe/London"
            }
          },
          "geometry": {
            "type": "Point",
            "coordinates": [
              -0.090679,
              51.505046
            ]
          }
        }
      },
      "AssetFeatureCollectionResponse": {
        "title": "AssetFeatureCollectionResponse",
        "type": "object",
        "description": "Assets Collection Response as a GeoJSon FeatureCollection with Asset properties",
        "required": [
          "type",
          "features",
          "pagination"
        ],
        "properties": {
          "type": {
            "description": "the Geojson Type (only 'FeatureCollection')",
            "type": "string",
            "enum": [
              "FeatureCollection"
            ]
          },
          "features": {
            "description": "the Assets Features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetFeatureResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "example": {
          "type": "Feature",
          "properties": {
            "store_id": "boroughmarket",
            "name": "Borough Market",
            "contact": {
              "phone": "020 7407 1002",
              "website": "http://boroughmarket.org.uk"
            },
            "address": {
              "lines": [
                "8 Southwark St"
              ],
              "country_code": "UK",
              "city": "London",
              "zipcode": "SE1 1TL"
            },
            "user_properties": {
              "photo": "https://preview.webgeoservices.com/jsfiddle/boroughmarket.jpeg",
              "placeId": "ChIJD2bPdVcDdkgRiDyO6mrCsu4"
            },
            "tags": [],
            "types": [
              "covered"
            ],
            "open": {
              "open_now": true,
              "open_hours": [
                {
                  "end": "17:00",
                  "start": "10:00"
                }
              ],
              "week_day": 3,
              "current_slice": {
                "end": "17:00",
                "start": "10:00"
              }
            },
            "weekly_opening": {
              "1": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "2": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "3": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "4": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "5": {
                "hours": [
                  {
                    "end": "18:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "6": {
                "hours": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ],
                "isSpecial": false
              },
              "7": {
                "hours": [],
                "isSpecial": false
              },
              "timezone": "Europe/London"
            },
            "opening_hours": {
              "usual": {
                "5": [
                  {
                    "end": "18:00",
                    "start": "10:00"
                  }
                ],
                "7": [],
                "default": [
                  {
                    "end": "17:00",
                    "start": "10:00"
                  }
                ]
              },
              "timezone": "Europe/London"
            }
          },
          "geometry": {
            "type": "Point",
            "coordinates": [
              -0.090679,
              51.505046
            ]
          }
        }
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "description": "Pagination to reach all returned assets. max 300 assets par page.",
        "required": [
          "page",
          "pageCount"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "description": "the request page"
          },
          "pageCount": {
            "type": "integer",
            "description": "the number of available pages"
          }
        }
      },
      "MatchedSubstring": {
        "title": "MatchedSubstring",
        "type": "object",
        "properties": {
          "length": {
            "description": "Length of the matched substring in the prediction result text.",
            "type": "number"
          },
          "offset": {
            "description": "Start location of the matched substring in the prediction result text.",
            "type": "number"
          }
        },
        "example": {
          "offset": 0,
          "length": 4
        }
      },
      "AddressComponents": {
        "title": "AddressComponents",
        "type": "object",
        "description": "Address Components with additional information",
        "properties": {
          "long_name": {
            "type": "string",
            "description": "The full text description or name of the address component as returned by the Details.",
            "example": "United Kingdom"
          },
          "short_name": {
            "description": "An abbreviated textual name for the address component, if available. For example, an address component for the state of United Kingdom may have a `long_name` of `United Kingdom` and a `short_name` of `UK` using the 2-letter postal abbreviation.",
            "type": "string",
            "example": "UK"
          },
          "types": {
            "description": "An array indicating the type of the address component. Those fields are provided when no fields parameter is set in the request.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddressTypes": {
        "title": "AddressTypes",
        "type": "string",
        "description": "Contains the type of result.",
        "enum": [
          "house_number",
          "route address_block",
          "locality",
          "admin_level",
          "country"
        ]
      },
      "GeolocationResponse": {
        "title": "GeolocationResponse",
        "type": "object",
        "description": "A successful geolocation request will return a JSON-formatted response defining a location and radius.",
        "required": [
          "accuracy",
          "latitude",
          "longitude"
        ],
        "properties": {
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          },
          "accuracy": {
            "description": "The accuracy of the estimated location, in meters. This represents the radius of a circle around the given `location` where the IP address is likely to be. If your Geolocation response shows a low value in the `accuracy` field (<=50), the IP has strong chance to be correctly located.",
            "type": "number"
          },
          "latitude": {
            "description": "Approximate latitude of the geographical area associated with the IP address",
            "type": "number"
          },
          "longitude": {
            "description": "Approximate longitude of the geographical area associated with the IP address",
            "type": "number"
          },
          "country_code": {
            "description": "ISO 3166-1 Alpha-2 compatible country code",
            "type": "string",
            "nullable": true
          },
          "country_name": {
            "description": "Country name",
            "type": "string"
          },
          "continent": {
            "description": "Continent name",
            "type": "string"
          },
          "region_state": {
            "description": "Region name when available",
            "type": "string"
          },
          "city": {
            "description": "City name when available",
            "type": "string"
          },
          "postal_code": {
            "description": "A postal code close to the user's location, when available",
            "type": "string"
          },
          "timezone": {
            "description": "The time zone associated with location, as specified by the IANA Time Zone Database",
            "type": "string"
          }
        },
        "example": {
          "country_code": "US",
          "country_name": "United States",
          "continent": "North America",
          "latitude": 38.719,
          "longitude": -77.1067,
          "accuracy": 5,
          "viewport": {
            "northeast": {
              "lat": 38.763915764205976,
              "lng": -77.0491321464058
            },
            "southwest": {
              "lat": 38.674084235794034,
              "lng": -77.16426785359421
            }
          },
          "city": "Alexandria",
          "region_state": "Virginia",
          "postal_code": "22309",
          "timezone": "America/New_York"
        }
      },
      "GeolocationStoresResponse": {
        "title": "GeolocationStoresResponse",
        "description": "A successful geolocation request will return a JSON-formatted response defining a location and radius.",
        "type": "object",
        "properties": {
          "stores": {
            "$ref": "#/components/schemas/AssetFeatureCollectionResponse"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          },
          "accuracy": {
            "description": "The accuracy of the estimated location, in meters. This represents the radius of a circle around the given `location` where the IP address is likely to be. If your Geolocation response shows a low value in the `accuracy` field (<=50), the IP has strong chance to be correctly located.",
            "type": "number"
          },
          "latitude": {
            "description": "Approximate latitude of the geographical area associated with the IP address",
            "type": "number"
          },
          "longitude": {
            "description": "Approximate longitude of the geographical area associated with the IP address",
            "type": "number"
          },
          "country_code": {
            "description": "ISO 3166-1 Alpha-2 compatible country code",
            "type": "string",
            "nullable": true
          },
          "country_name": {
            "description": "Country name",
            "type": "string"
          },
          "continent": {
            "description": "Continent name",
            "type": "string"
          },
          "region_state": {
            "description": "Region name when available",
            "type": "string"
          },
          "city": {
            "description": "City name when available",
            "type": "string"
          },
          "postal_code": {
            "description": "A postal code close to the user's location, when available",
            "type": "string"
          },
          "timezone": {
            "description": "The time zone associated with location, as specified by the IANA Time Zone Database",
            "type": "string"
          }
        },
        "example": {
          "country_code": "US",
          "country_name": "United States",
          "continent": "North America",
          "latitude": 38.719,
          "longitude": -77.1067,
          "accuracy": 5,
          "viewport": {
            "northeast": {
              "lat": 38.763915764205976,
              "lng": -77.0491321464058
            },
            "southwest": {
              "lat": 38.674084235794034,
              "lng": -77.16426785359421
            }
          },
          "city": "Alexandria",
          "region_state": "Virginia",
          "postal_code": "22309",
          "timezone": "America/New_York",
          "stores": {
            "type": "FeatureCollection",
            "features": [
              {
                "type": "Feature",
                "properties": {
                  "store_id": "STORE_ID_123456",
                  "name": "My Cool Store",
                  "contact": {
                    "email": "contact@woosmap.com",
                    "phone": "+44 20 7693 4000",
                    "website": "https://www.woosmap.com"
                  },
                  "address": {
                    "lines": [
                      "Building Centre",
                      "26 Store Street"
                    ],
                    "country_code": "UK",
                    "city": "London",
                    "zipcode": "WC1E 7BT"
                  },
                  "user_properties": {
                    "some_user_properties": "associated user value"
                  },
                  "tags": [
                    "wifi",
                    "covered_parking"
                  ],
                  "types": [
                    "drive",
                    "click_and_collect"
                  ],
                  "distance": 0,
                  "open": {
                    "open_now": false,
                    "open_hours": [],
                    "week_day": 1,
                    "next_opening": {
                      "end": "22:00",
                      "start": "08:30",
                      "day": "2021-12-07"
                    }
                  },
                  "weekly_opening": {
                    "1": {
                      "hours": [],
                      "isSpecial": false
                    },
                    "2": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "3": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "4": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "5": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "6": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "7": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "timezone": "Europe/London"
                  },
                  "opening_hours": {
                    "usual": {
                      "1": [],
                      "default": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ]
                    },
                    "special": {
                      "2015-02-07": [
                        {
                          "end": "23:00",
                          "start": "08:00"
                        }
                      ]
                    },
                    "timezone": "Europe/London"
                  }
                },
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -77.1067,
                    38.719
                  ]
                }
              }
            ],
            "pagination": {
              "page": 1,
              "pageCount": 1
            }
          }
        }
      },
      "AssetRequest": {
        "title": "AssetRequest",
        "type": "object",
        "description": "Attributes describing an Asset.",
        "required": [
          "location",
          "name",
          "storeId"
        ],
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "name": {
            "description": "The asset's name.",
            "type": "string",
            "example": "My Cool Store"
          },
          "storeId": {
            "$ref": "#/components/schemas/AssetId"
          },
          "address": {
            "$ref": "#/components/schemas/AssetAddressRequest"
          },
          "contact": {
            "$ref": "#/components/schemas/AssetContact"
          },
          "types": {
            "description": "Contains an array of types describing the Asset.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "drive",
              "click_and_collect"
            ]
          },
          "tags": {
            "description": "Contains an array of tags describing the Asset. For example a list of available amenities.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "wifi",
              "covered_parking"
            ]
          },
          "userProperties": {
            "description": "Contains all additional information relative to an Asset",
            "type": "object"
          },
          "localizedNames": {
            "description": "Alternate names for your assets. These localized names are useful for multi-language integrations. Combined with our Autocomplete API endpoint you can let your users find your store in their native language.",
            "type": "object",
            "example": {
              "ar": "مركز فيليتزي التجاري",
              "fr": "Centre Commercial Velizy",
              "it": "Centro Commerciale Velizy",
              "gb": "Velizy Shopping Center"
            }
          },
          "openingHours": {
            "$ref": "#/components/schemas/AssetOpeningHours"
          }
        }
      },
      "AssetId": {
        "title": "AssetId",
        "description": "A textual identifier that uniquely identifies an Asset. It must matches the following regexp `[A-Za-z0-9]+`\n",
        "type": "string",
        "example": "STORE_ID_12345"
      },
      "AssetsCollectionRequest": {
        "title": "AssetsCollectionRequest",
        "description": "A Collection of Woosmap Assets as expected for Data Management Data API.",
        "type": "object",
        "required": [
          "stores"
        ],
        "properties": {
          "stores": {
            "description": "The Assets collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetRequest"
            }
          }
        }
      },
      "AssetAddressRequest": {
        "title": "AssetAddressRequest",
        "type": "object",
        "description": "An object containing the separate components applicable to this address.",
        "properties": {
          "lines": {
            "description": "An Array for lines of an Asset Address",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Building Centre",
              "26 Store Street"
            ]
          },
          "countryCode": {
            "description": "An ISO_3166-1 Country Code where the Asset is located (see <https://en.wikipedia.org/wiki/ISO_3166-1> for full list)",
            "type": "string",
            "example": "UK",
            "nullable": true
          },
          "city": {
            "description": "A City where belongs an Asset",
            "type": "string",
            "example": "London"
          },
          "zipcode": {
            "description": "An Zipcode / Postal code of an Asset Address",
            "type": "string",
            "example": "WC1E 7BT"
          }
        }
      },
      "AssetAddressResponse": {
        "title": "AssetAddressResponse",
        "type": "object",
        "description": "An object containing the separate components applicable to this address.",
        "properties": {
          "lines": {
            "description": "An Array for lines of an Asset Address",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Building Centre",
              "26 Store Street"
            ]
          },
          "country_code": {
            "description": "An ISO_3166-1 Country Code where the Asset is located (see <https://en.wikipedia.org/wiki/ISO_3166-1> for full list)",
            "type": "string",
            "example": "UK",
            "nullable": true
          },
          "city": {
            "description": "A City where belongs an Asset",
            "type": "string",
            "example": "London"
          },
          "zipcode": {
            "description": "An Zipcode / Postal code of an Asset Address",
            "type": "string",
            "example": "WC1E 7BT"
          }
        }
      },
      "AssetContact": {
        "title": "AssetContact",
        "type": "object",
        "description": "An object containing the asset's contact available information.",
        "properties": {
          "website": {
            "description": "The website contact for this Asset, such as a business' homepage.",
            "type": "string",
            "example": "https://www.woosmap.com"
          },
          "phone": {
            "description": "Contains the Asset's phone number in its [local format](https://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers).",
            "type": "string",
            "example": "+44 20 7693 4000"
          },
          "email": {
            "description": "Contains the Asset's email contact.",
            "type": "string",
            "example": "contact@woosmap.com"
          }
        }
      },
      "AssetOpeningHours": {
        "title": "AssetOpeningHours",
        "type": "object",
        "nullable": true,
        "description": "An object describing the opening hours of an Asset.",
        "properties": {
          "timezone": {
            "description": "Timezone for the Opening Hours of an Asset. It is used to compute the `open_now` property of an asset. see <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>",
            "type": "string",
            "example": "Europe/London"
          },
          "usual": {
            "$ref": "#/components/schemas/AssetOpeningHoursUsual"
          },
          "special": {
            "$ref": "#/components/schemas/AssetOpeningHoursSpecial"
          }
        }
      },
      "AssetOpeningHoursPeriod": {
        "title": "AssetOpeningHoursPeriod",
        "type": "object",
        "description": "The hours for an opening period. To define a slice of time where the asset is open you must define a `start` and `end` keys. `start` and `end` must belong to the same day (crossing midnight may result in open_now being always false.)",
        "example": {
          "start": "08:30",
          "end": "19:30"
        },
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "description": "Contains a time of day in 24-hour hh:mm format for the begin of opening period. Values are in the range 00:00–23:59",
            "type": "string",
            "example": "08:30"
          },
          "end": {
            "description": "Contains a time of day in 24-hour hh:mm format for the end of opening period. Values are in the range 00:00–23:59",
            "type": "string",
            "example": "19:30"
          }
        }
      },
      "AssetOpeningHoursUsual": {
        "title": "AssetOpeningHoursUsual",
        "description": "An object describing the usual opening hours of an Asset.",
        "type": "object",
        "properties": {
          "1": {
            "description": "The opening Hours for Monday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "2": {
            "description": "The opening Hours for Tuesday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "3": {
            "description": "The opening Hours for Wednesday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "4": {
            "description": "The opening Hours for Thursday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "5": {
            "description": "The opening Hours for Friday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "6": {
            "description": "The opening Hours for Saturday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "7": {
            "description": "The opening Hours for Sunday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "default": {
            "description": "Contains the default opening hours to apply to all week days",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            },
            "example": [
              {
                "start": "08:30",
                "end": "19:30"
              }
            ]
          }
        }
      },
      "AssetOpeningHoursSpecial": {
        "title": "AssetOpeningHoursSpecial",
        "description": "An object describing the special opening hours of an Asset.",
        "type": "object",
        "properties": {
          "2015-02-07": {
            "description": "The format for defining opening and closing hours for a particular day is the same as the usual. Instead of using numeric week day for keys you must use a date YYYY-MM-DD like \"2015-03-08\" (see ISO-8601).\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "2015-02-08": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          }
        }
      },
      "AssetOpenResponse": {
        "title": "AssetOpenResponse",
        "type": "object",
        "description": "The Current opening status for an Asset",
        "properties": {
          "current_slice": {
            "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
          },
          "open_hours": {
            "description": "the opening hours for the day",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "open_now": {
            "description": "Boolean value indicating the status of the opening hours",
            "type": "boolean"
          },
          "next_opening": {
            "description": "the next opening hours period",
            "type": "object",
            "properties": {
              "end": {
                "description": "the hours of next opening",
                "type": "string",
                "example": "17:30"
              },
              "start": {
                "description": "the hours of next closing",
                "type": "string",
                "example": "06:00"
              },
              "day": {
                "type": "string",
                "description": "the day of next opening",
                "example": "2021-11-16"
              }
            }
          },
          "week_day": {
            "description": "the day of the week starting from 1 to 7",
            "type": "number",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ]
          }
        }
      },
      "AssetWeeklyOpeningResponse": {
        "title": "AssetWeeklyOpeningResponse",
        "type": "object",
        "description": "The current Weekly Opening taking into account the special hours",
        "properties": {
          "1": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "2": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "3": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "4": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "5": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "6": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "7": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "timezone": {
            "description": "Timezone for the Opening Hours of an Asset. It is used to compute the `open_now` property of an asset. see <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>",
            "type": "string",
            "example": "Europe/London"
          }
        }
      },
      "AssetWeeklyOpeningHoursPeriod": {
        "title": "AssetWeeklyOpeningHoursPeriod",
        "type": "object",
        "description": "The opening Hours for Monday",
        "properties": {
          "hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "isSpecial": {
            "type": "boolean",
            "description": "Define if the hours comes from a special opening hours day.",
            "example": false
          }
        }
      },
      "LocalitiesAutocompleteCollectionResponse": {
        "title": "LocalitiesAutocompleteCollectionResponse",
        "type": "object",
        "description": "Localities Collection Response containing Localities",
        "required": [
          "localities"
        ],
        "properties": {
          "localities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesAutocompleteResponse"
            }
          }
        },
        "example": {
          "localities": [
            {
              "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
              "description": "London, City of London, United Kingdom",
              "name": "London",
              "type": "locality",
              "location": {
                "lat": 51.50732,
                "lng": -0.12764746
              },
              "matched_substrings": {
                "name": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ],
                "admin_1": [
                  {
                    "offset": 8,
                    "length": 6
                  }
                ],
                "description": [
                  {
                    "offset": 0,
                    "length": 6
                  },
                  {
                    "offset": 16,
                    "length": 6
                  }
                ]
              },
              "admin_1": "City of London",
              "locality": "",
              "admin_0": "United Kingdom"
            },
            {
              "public_id": "8tpkf5LFYQzfpzKxMovi+ObhRuQ=",
              "description": "London, Ontario, Canada",
              "name": "London",
              "type": "locality",
              "location": {
                "lat": 42.983673,
                "lng": -81.2496
              },
              "matched_substrings": {
                "name": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ],
                "description": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ]
              },
              "admin_1": "Ontario",
              "locality": "",
              "admin_0": "Canada"
            },
            {
              "public_id": "lXJg4Ba5ZBZfVfsI9YWje/A4l2o=",
              "description": "London, Kentucky, United States",
              "name": "London",
              "type": "locality",
              "location": {
                "lat": 37.12898,
                "lng": -84.08327
              },
              "matched_substrings": {
                "name": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ],
                "description": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ]
              },
              "admin_1": "Kentucky",
              "locality": "",
              "admin_0": "United States"
            },
            {
              "public_id": "aWawRrKbLmU0+dUpWo5TzH2p4QI=",
              "description": "London, Ohio, United States",
              "name": "London",
              "type": "locality",
              "location": {
                "lat": 39.886448,
                "lng": -83.44825
              },
              "matched_substrings": {
                "name": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ],
                "description": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ]
              },
              "admin_1": "Ohio",
              "locality": "",
              "admin_0": "United States"
            },
            {
              "public_id": "ZLeThT8qWy+GJgMtlX+9jpQJpx8=",
              "description": "London, Bushbuckridge, South Africa",
              "name": "London",
              "type": "locality",
              "location": {
                "lat": -24.817778,
                "lng": 31.047222
              },
              "matched_substrings": {
                "name": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ],
                "description": [
                  {
                    "offset": 0,
                    "length": 6
                  }
                ]
              },
              "admin_1": "Mpumalanga",
              "admin_2": "Bushbuckridge",
              "locality": "",
              "admin_0": "South Africa"
            }
          ]
        }
      },
      "LocalitiesAutocompleteMatchedFields": {
        "title": "LocalitiesAutocompleteMatchedFields",
        "type": "object",
        "description": "Contains a set of substrings for each field (`description`, `name`, `admin_0`, `admin_1`, `admin_2`, `postal_town`) that match elements in the `input`. It can be used to highlight those substrings. Each substring is identified by an `offset` and a `length`.`",
        "properties": {
          "description": {
            "description": "match substrings for `description`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          },
          "name": {
            "description": "match substrings for `name`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          },
          "admin_0": {
            "description": "match substrings for `admin_0`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          },
          "admin_1": {
            "description": "match substrings for `admin_1`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          },
          "admin_2": {
            "description": "match substrings for `admin_2`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          },
          "postal_town": {
            "description": "match substrings for `postal_town`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          }
        }
      },
      "LocalitiesAutocompleteResponse": {
        "title": "LocalitiesAutocompleteResponse",
        "type": "object",
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "properties": {
          "name": {
            "description": "contains the human-readable name for the returned result. For `postal_code` results, this is directly the postal code value. For `locality` results, name in the specified language is returns. If no language is specified, default name (country local language) is returned.",
            "type": "string",
            "example": "London, UK"
          },
          "description": {
            "description": "Concatenation of `name`, `admin_1`, `admin_0` to be used as suggestion in drop down list if needed. The description can vary depending on the type requested.",
            "type": "string",
            "example": "20121, Milano, Italy"
          },
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID if you need to give us feedbacks on results. This ID is also required to perform Localities Details request.",
            "type": "string",
            "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
          },
          "type": {
            "$ref": "#/components/schemas/LocalitiesTypes"
          },
          "admin_0": {
            "description": "Contains the country name.",
            "type": "string",
            "example": "Italy"
          },
          "admin_1": {
            "description": "Contains the administrative level including the suggestion.",
            "type": "string",
            "example": "Milano"
          },
          "admin_2": {
            "description": "For small locality type points of interests (suburbs, neighborhoods, villages), contains the municipality it belongs to.",
            "type": "string",
            "example": "Borgo Santa Caterina"
          },
          "viewpoint": {
            "$ref": "#/components/schemas/LocalitiesViewpoint"
          },
          "postal_codes": {
            "description": "Contains an array of known postal codes for a locality (only available on *suggestions* with country:`fr` for France or `it` for Italy and type: `locality`).\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "34000",
              "34070",
              "34080",
              "34090"
            ]
          },
          "postal_town": {
            "description": "Contains the larger city (or the post office city) for a `postal_code` (only available on  suggestions with type: `postal_code`).\n",
            "type": "string",
            "example": "London"
          },
          "matched_substrings": {
            "$ref": "#/components/schemas/LocalitiesAutocompleteMatchedFields"
          },
          "locality": {
            "type": "string",
            "description": "The parent locality when retrieving a POI. often empty."
          },
          "has_addresses": {
            "description": "On the specific territory of United Kingdom, Localities autocomplete request can return the additional attribute `has_addresses` for a postal code, which indicates if a postal code bears addresses. When `has_addresses` is `true`, it is possible to display a list of the available addresses by requesting `details` with the Localities `public_id`. To get the details of an address you will need to request again `/details` endpoint passing in the dedicated address `public_id`.\n",
            "type": "boolean",
            "example": true
          }
        },
        "example": {
          "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
          "description": "London, City of London, United Kingdom",
          "name": "London",
          "type": "locality",
          "location": {
            "lat": 51.50732,
            "lng": -0.12764746
          },
          "matched_substrings": {
            "name": [
              {
                "offset": 0,
                "length": 6
              }
            ],
            "admin_1": [
              {
                "offset": 8,
                "length": 6
              }
            ],
            "description": [
              {
                "offset": 0,
                "length": 6
              },
              {
                "offset": 16,
                "length": 6
              }
            ]
          },
          "admin_1": "City of London",
          "locality": "",
          "admin_0": "United Kingdom"
        }
      },
      "LocalitiesBounds": {
        "title": "LocalitiesBounds",
        "type": "object",
        "description": "A rectangle in geographical coordinates from points at the southwest and northeast corners.",
        "required": [
          "north",
          "east",
          "south",
          "west"
        ],
        "properties": {
          "north": {
            "type": "number",
            "description": "Latitude in decimal degrees for upper right corner"
          },
          "east": {
            "type": "number",
            "description": "Longitude in decimal degrees for upper right corner"
          },
          "south": {
            "type": "number",
            "description": "Latitude in decimal degrees for lower left corner"
          },
          "west": {
            "type": "number",
            "description": "Longitude in decimal degrees for lower left corner"
          }
        }
      },
      "LocalitiesDetailsPostalCodeResponse": {
        "title": "LocalitiesDetailsPostalCodeResponse",
        "type": "object",
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "properties": {
          "formatted_address": {
            "description": "Contains the text description of the proposal to be used as suggestion in drop down list if needed.",
            "type": "string",
            "example": "Parliament Square, London, SW1A 0AA"
          },
          "types": {
            "description": "available localities types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesTypes"
            }
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
            "type": "string",
            "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
          },
          "geometry": {
            "description": "The location of the PostalCode, in latitude and longitude.",
            "type": "object",
            "properties": {
              "location": {
                "$ref": "#/components/schemas/LatLngLiteral"
              }
            }
          },
          "address_components": {
            "description": "An array containing the separate components applicable to this address.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressComponents"
            }
          },
          "addresses": {
            "description": "List of adresses attached to this Postal Code",
            "type": "object",
            "properties": {
              "pagination": {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "number"
                  },
                  "page_count": {
                    "type": "number"
                  },
                  "addresses_per_page": {
                    "type": "number"
                  },
                  "address_count": {
                    "type": "number"
                  }
                }
              },
              "list": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "example": "Postmasters Redirection Service, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA"
                    },
                    "public_id": {
                      "type": "string",
                      "example": "DuxKg3/i5t1AuSt1qvwaiSgd+gI="
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "result": {
            "formatted_address": "SW1A 0AA, City of London",
            "types": [
              "postal_code"
            ],
            "public_id": "QaCU+fBtigK65ztSrqHqUoUDwZw=",
            "name": "SW1A 0AA",
            "geometry": {
              "location": {
                "lat": 51.49984,
                "lng": -0.124663
              }
            },
            "address_components": [
              {
                "types": [
                  "country",
                  "administrative_area_level_0"
                ],
                "long_name": "United Kingdom",
                "short_name": "GB"
              },
              {
                "types": [
                  "administrative_area_level_1"
                ],
                "long_name": "City of London",
                "short_name": "City of London"
              }
            ],
            "addresses": {
              "pagination": {
                "page": 1,
                "page_count": 1,
                "addresses_per_page": 20,
                "address_count": 5
              },
              "list": [
                {
                  "description": "Postmasters Redirection Service, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                  "public_id": "DuxKg3/i5t1AuSt1qvwaiSgd+gI="
                },
                {
                  "description": "The Speakers House, 1 Parliament Square, London, SW1A 0AA",
                  "public_id": "J9y6c0VHd8L5djgVKAmUZir1D74="
                },
                {
                  "description": "Speakers Housekeepers Apartment, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                  "public_id": "K13iP+XIfYK2h+6NFqVVX2q0NQ8="
                },
                {
                  "description": "House Of Commons, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                  "public_id": "MVZWBfGZQnAQn9JtE9CJZjgeB4Q="
                },
                {
                  "description": "Lord Chancellors Residence, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
                  "public_id": "i5WqCPd+qTTnZtiXnKzV8KoIpT8="
                }
              ]
            }
          }
        }
      },
      "LocalitiesTypes": {
        "title": "LocalitiesTypes",
        "type": "string",
        "description": "Contains the type of the suggestion.",
        "enum": [
          "locality",
          "postal_code",
          "admin_level",
          "airport",
          "train_station",
          "metro_station",
          "shopping",
          "museum",
          "zoo",
          "amusement_park",
          "art_gallery",
          "tourist_attraction",
          "country",
          "address"
        ]
      },
      "LocalitiesViewpoint": {
        "title": "LocalitiesViewpoint",
        "type": "object",
        "description": "Contains the bounds for the locality",
        "required": [
          "bounds"
        ],
        "properties": {
          "bounds": {
            "$ref": "#/components/schemas/LocalitiesBounds"
          }
        }
      },
      "LocalitiesDetailsResponse": {
        "title": "LocalitiesDetailsResponse",
        "type": "object",
        "description": "Localities Details Root Node Response",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "description": "The Root Node for Localities Details",
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocalitiesDetailsAddressResponse"
              },
              {
                "$ref": "#/components/schemas/LocalitiesDetailsPostalCodeResponse"
              }
            ]
          }
        }
      },
      "LocalitiesDetailsAddressResponse": {
        "title": "LocalitiesDetailsAddressResponse",
        "type": "object",
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "properties": {
          "formatted_address": {
            "description": "Contains the text description of the proposal to be used as suggestion in drop down list if needed.",
            "type": "string",
            "example": "Parliament Square, London, SW1A 0AA"
          },
          "types": {
            "description": "available localities types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesTypes"
            }
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
            "type": "string",
            "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
          },
          "geometry": {
            "description": "The location of the result, in latitude and longitude. Accuracy is also provided.",
            "type": "object",
            "properties": {
              "location": {
                "$ref": "#/components/schemas/LatLngLiteral"
              },
              "accuracy": {
                "type": "string",
                "enum": [
                  "ROOFTOP",
                  "POSTAL_CODE",
                  "DISTRICT"
                ]
              }
            }
          },
          "address_components": {
            "description": "An array containing the separate components applicable to this address.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressComponents"
            }
          }
        },
        "example": {
          "result": {
            "formatted_address": "House Of Commons, House Of Commons Palace Of Westminster, Parliament Square, London, SW1A 0AA",
            "types": [
              "address"
            ],
            "public_id": "MVZWBfGZQnAQn9JtE9CJZjgeB4Q=",
            "geometry": {
              "location": {
                "lat": 51.49984,
                "lng": -0.1246375
              },
              "accuracy": "ROOFTOP"
            },
            "address_components": [
              {
                "types": [
                  "country",
                  "administrative_area_level_0"
                ],
                "long_name": "United Kingdom",
                "short_name": "GB"
              },
              {
                "types": [
                  "administrative_area_level_1"
                ],
                "long_name": "City of London",
                "short_name": "City of London"
              },
              {
                "types": [
                  "premise"
                ],
                "long_name": "House Of Commons Palace Of Westminster",
                "short_name": "House Of Commons Palace Of Westminster"
              },
              {
                "types": [
                  "locality"
                ],
                "long_name": "London",
                "short_name": "London"
              },
              {
                "types": [
                  "postal_codes"
                ],
                "long_name": "SW1A 0AA",
                "short_name": "SW1A 0AA"
              },
              {
                "types": [
                  "organisation"
                ],
                "long_name": "House Of Commons",
                "short_name": "House Of Commons"
              },
              {
                "types": [
                  "route"
                ],
                "long_name": "Parliament Square",
                "short_name": "Parliament Square"
              }
            ]
          }
        }
      },
      "AddressAutocompleteCollectionResponse": {
        "title": "AddressAutocompleteCollectionResponse",
        "type": "object",
        "description": "Address Collection Response containing Localities",
        "required": [
          "predictions"
        ],
        "properties": {
          "predictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressAutocompleteResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "example": {
          "predictions": [
            {
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
              "description": "London, England, United Kingdom",
              "matched_substring": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              },
              "type": "locality"
            },
            {
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIxMDg1NjIw",
              "description": "London, ON, Canada",
              "matched_substring": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              },
              "type": "locality"
            },
            {
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDE5Nzgz",
              "description": "Londonderry, Northern Ireland, United Kingdom",
              "matched_substring": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              },
              "type": "locality"
            },
            {
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIzMDM1ODQx",
              "description": "Londrina, PR, Brazil",
              "matched_substring": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              },
              "type": "locality"
            }
          ],
          "status": "OK"
        }
      },
      "AddressAutocompleteMatchedFields": {
        "title": "AddressAutocompleteMatchedFields",
        "type": "object",
        "description": "Contains a set of substrings for description. Each substring is identified by an `offset` and a `length`.`",
        "properties": {
          "description": {
            "description": "match substrings for `description`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          }
        }
      },
      "AddressAutocompleteResponse": {
        "title": "AddressAutocompleteResponse",
        "type": "object",
        "description": "Attributes describing an Address.",
        "properties": {
          "description": {
            "description": "Address description to be used as suggestion in drop down list if needed.",
            "type": "string",
            "example": "London, England, United Kingdom"
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID if you need to give us feedbacks on results. This ID is also required to perform Address Details request.",
            "type": "string",
            "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0"
          },
          "matched_substring": {
            "$ref": "#/components/schemas/AddressAutocompleteMatchedFields"
          },
          "type": {
            "$ref": "#/components/schemas/AddressTypes"
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "example": {
          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
          "description": "London, England, United Kingdom",
          "matched_substring": {
            "description": [
              {
                "offset": 0,
                "length": 4
              }
            ]
          },
          "type": "locality"
        }
      },
      "AddressDetailsResponse": {
        "title": "AddressDetailsResponse",
        "type": "object",
        "description": "Address Details Response",
        "required": [
          "result"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          },
          "result": {
            "description": "the root node of address details",
            "type": "object",
            "properties": {
              "formatted_address": {
                "description": "Contains the text description of the proposal to be used as suggestion in drop down list if needed.",
                "type": "string",
                "example": "London, England, United Kingdom"
              },
              "types": {
                "description": "available address types",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddressTypes"
                }
              },
              "public_id": {
                "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
                "type": "string",
                "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0"
              },
              "address_components": {
                "description": "An array containing the separate components applicable to this address.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddressComponents"
                }
              },
              "geometry": {
                "description": "The location of the result, in latitude and logitude. Accuracy is also provided.",
                "type": "object",
                "properties": {
                  "location_type": {
                    "type": "string",
                    "enum": [
                      "ROOFTOP",
                      "RANGE_INTERPOLATED",
                      "GEOMETRIC_CENTER",
                      "APPROXIMATE"
                    ]
                  },
                  "location": {
                    "$ref": "#/components/schemas/LatLngLiteral"
                  },
                  "viewport": {
                    "$ref": "#/components/schemas/Bounds"
                  }
                }
              }
            }
          }
        },
        "example": {
          "result": {
            "formatted_address": "London, England, United Kingdom",
            "types": [
              "locality"
            ],
            "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
            "address_components": [
              {
                "types": [
                  "country"
                ],
                "long_name": "United Kingdom",
                "short_name": "GBR"
              },
              {
                "types": [
                  "state"
                ],
                "long_name": "England",
                "short_name": "England"
              },
              {
                "types": [
                  "county"
                ],
                "long_name": "London",
                "short_name": "LDN"
              },
              {
                "long_name": "London",
                "short_name": "London",
                "types": [
                  "locality"
                ]
              },
              {
                "long_name": "SW1A 2",
                "short_name": "SW1A 2",
                "types": [
                  "postal_code"
                ]
              }
            ],
            "geometry": {
              "location_type": "GEOMETRIC_CENTER",
              "location": {
                "lat": 51.50643,
                "lng": -0.12719
              },
              "viewport": {
                "northeast": {
                  "lat": 51.68629,
                  "lng": 0.28206
                },
                "southwest": {
                  "lat": 51.28043,
                  "lng": -0.56316
                }
              }
            }
          },
          "status": "OK"
        }
      },
      "AddressStatus": {
        "title": "AddressStatus",
        "type": "string",
        "description": "Returns more info on if the request was successful or not, valid responses. * `OK` indicates the response contains a valid result. * `INVALID_REQUEST` indicates that the provided request was invalid (e.g. wrong URL syntax). * `REQUEST_DENIED` indicates that the service denied use of the Address API (e.g. wrong API Key, wrong/no referer, …). * `UNKNOWN_ERROR` indicates an Address API request could not be processed due to a server error. The request may succeed if you try again.\n",
        "enum": [
          "OK",
          "INVALID_REQUEST",
          "REQUEST_DENIED",
          "UNKNOWN_ERROR"
        ]
      },
      "ZonesCollectionRequest": {
        "title": "ZonesCollectionRequest",
        "type": "object",
        "description": "A Collection of Woosmap Zones as expected for Data Management Data API.",
        "required": [
          "zones"
        ],
        "properties": {
          "zones": {
            "description": "The Zones collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          }
        },
        "example": {
          "zones": [
            {
              "zone_id": "ZoneA",
              "description": "Delivery Zone for Store A",
              "store_id": "store_a",
              "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
              "types": [
                "delivery"
              ]
            },
            {
              "zone_id": "ZoneB",
              "description": "Delivery Zone for Store B",
              "store_id": "store_b",
              "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
              "types": [
                "delivery"
              ]
            },
            {
              "zone_id": "ZoneC",
              "description": "Delivery Zone for Store C",
              "store_id": "store_c",
              "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
              "types": [
                "delivery"
              ]
            }
          ]
        }
      },
      "Zone": {
        "title": "Zone",
        "type": "object",
        "description": "Attributes describing a Zone.",
        "required": [
          "store_id",
          "zone_id",
          "polygon"
        ],
        "properties": {
          "zone_id": {
            "description": "A textual identifier that uniquely identifies a Zone.",
            "type": "string",
            "example": "ZoneA"
          },
          "description": {
            "type": "string",
            "description": "Textual description of your Zone",
            "example": "Delivery Zone for Store A"
          },
          "store_id": {
            "$ref": "#/components/schemas/AssetId"
          },
          "polygon": {
            "type": "string",
            "description": "Zone geometry polygon as **Well Known Text**. WKT defines how to represent geometry of one object (cf. https://en.wikipedia.org/wiki/Well-known_text). Your zones could be complex and multipart polygons.",
            "example": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))"
          },
          "types": {
            "description": "Contains an array of types describing the Asset.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "delivery",
              "san_francisco_west"
            ]
          }
        },
        "example": {
          "zone_id": "ZoneA",
          "description": "Delivery Zone for Store A",
          "store_id": "store_a",
          "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
          "types": [
            "delivery"
          ]
        }
      },
      "DistanceLeg": {
        "title": "DistanceLeg",
        "type": "object",
        "description": "Leg in a route",
        "properties": {
          "distance": {
            "description": "The total distance covered by this leg.",
            "type": "object",
            "properties": {
              "value": {
                "description": "The distance in meter",
                "type": "number",
                "example": 2775.1
              },
              "text": {
                "type": "string",
                "example": "2.8 km"
              }
            }
          },
          "duration": {
            "description": "The total duration of this leg.",
            "type": "object",
            "properties": {
              "value": {
                "description": "The duration in seconds",
                "type": "number",
                "example": 272.5
              },
              "text": {
                "type": "string",
                "example": "5 mins"
              }
            }
          },
          "start_location": {
            "description": "The latitude/longitude coordinates of the origin of this leg. Because the Distance Route API calculates directions between locations by using the nearest transportation option (usually a road) at the start and end points, `start_location` may be different than the provided origin of this leg if, for example, a road is not near the origin.",
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "end_location": {
            "description": "The latitude/longitude coordinates of the given destination of this leg. Because the Distance Route API calculates directions between locations by using the nearest transportation option (usually a road) at the start and end points, `end_location` may be different than the provided destination of this leg if, for example, a road is not near the destination.",
            "$ref": "#/components/schemas/LatLngLiteral"
          }
        }
      },
      "DistanceMatrixElementsResponse": {
        "title": "DistanceMatrixElementsResponse",
        "type": "object",
        "description": "Attributes describing elements of origin and destination returned in distance Matrix response.",
        "properties": {
          "elements": {
            "type": "array",
            "description": "the route element",
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixElementResponse"
            }
          }
        },
        "example": {
          "elements": [
            {
              "status": "OK",
              "duration": {
                "value": 866,
                "text": "14 mins"
              },
              "distance": {
                "value": 10613,
                "text": "10.6 km"
              }
            },
            {
              "status": "OK",
              "duration": {
                "value": 935,
                "text": "16 mins"
              },
              "distance": {
                "value": 10287,
                "text": "10.3 km"
              }
            }
          ]
        }
      },
      "DistanceMatrixElementResponse": {
        "title": "DistanceMatrixElementResponse",
        "type": "object",
        "description": "Attributes describing an element of origin and destination returned in distance Matrix response.",
        "properties": {
          "status": {
            "type": "string",
            "description": "* `OK` indicates the response contains a valid result. * `NOT_FOUND` indicates that the origin and/or destination of this pairing could not be matched to the network. * `ZERO_RESULTS` indicates no route could be found between the origin and destination.\n",
            "enum": [
              "OK",
              "NOT_FOUND",
              "ZERO_RESULTS"
            ]
          },
          "duration": {
            "description": "The total duration to travel this route, expressed in seconds (value) and as text. The textual value gives a structured string for duration in the specified language (if available).",
            "type": "object",
            "properties": {
              "value": {
                "description": "The duration in seconds",
                "type": "number",
                "example": 20495
              },
              "text": {
                "type": "string",
                "example": "5 hours 42 mins"
              }
            }
          },
          "distance": {
            "description": "The total distance of this route, expressed in meters (value) and as text. The textual value uses the unit system specified with the units parameter of the original request.",
            "type": "object",
            "properties": {
              "value": {
                "description": "The distance in meter",
                "type": "number",
                "example": 544752
              },
              "text": {
                "type": "string",
                "example": "545 km"
              }
            }
          }
        }
      },
      "DistanceMatrixResponse": {
        "title": "DistanceMatrixResponse",
        "type": "object",
        "description": "Attributes describing an distance Matrix response.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          },
          "rows": {
            "description": "Contains an array of elements for each pair of origin and destination",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixElementsResponse"
            }
          }
        },
        "example": {
          "status": "OK",
          "rows": [
            {
              "elements": [
                {
                  "status": "OK",
                  "duration": {
                    "value": 866,
                    "text": "14 mins"
                  },
                  "distance": {
                    "value": 10613,
                    "text": "10.6 km"
                  }
                },
                {
                  "status": "OK",
                  "duration": {
                    "value": 935,
                    "text": "16 mins"
                  },
                  "distance": {
                    "value": 10287,
                    "text": "10.3 km"
                  }
                }
              ]
            }
          ]
        }
      },
      "DistanceRouteElementsResponse": {
        "title": "DistanceRouteElementsResponse",
        "type": "object",
        "description": "Attributes describing routes from an origin to a destination returned in distance route response.",
        "properties": {
          "overview_polyline": {
            "type": "object",
            "description": "The polyline of the route (encoded with the [poyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)).",
            "properties": {
              "points": {
                "type": "string",
                "example": "gce_I|mbHR_@Rg@Pg@Nm@Ns@Hk@Fk@PyBTaCXmCZcCd@qCLw@ViA\\}ADQ@K@O?S?[AUGUC[AW@WB[DUJ[Va@RMn@c@TKXGPANAN@t@NZD~AV`AL`ANTBfBV`@F|ATjFr@vEr@D@`@DF?`@BD?V@lEXx@Dv@D^B`@Db@BP@n@BJ@j@Bb@D\\BzAHFaDB}ABqA@}A@kA?k@?a@Ae@Ac@Ek@Ge@Km@Oo@Qm@Ok@Uk@Sg@Ui@[i@]g@]g@WYSUe@a@s@e@m@e@WYO[`@kCtAoKl@uFH}@Ls@r@yE`AyFBO"
              }
            }
          },
          "bounds": {
            "$ref": "#/components/schemas/Bounds"
          },
          "summary": {
            "type": "string",
            "description": "A short name for the route."
          },
          "legs": {
            "type": "array",
            "description": "Legs part of the route response",
            "items": {
              "$ref": "#/components/schemas/DistanceLeg"
            }
          }
        },
        "example": {
          "routes": [
            {
              "overview_polyline": {
                "points": "w_diHa_fSb@@dAXpD~@~DfAlAn@x@j@v@l@xB|@bBh@Ac@PoBb@oHRuETcEXwDXaDhAaJR}AFkABqCBcBDg@BUT{@`@o@t@i@fA{@fAmA`B{C`@eAr@uBfAaCz@sB`@eAHK|@GdAoABSC]qAsJE]gB\\]qDy@iFIi@Gk@@sAFsDJk@JGDAPITSHY^cCkAk@cBs@gBm@_@K]YW]Me@cAeFgBoIc@uBy@kCk@oB[_BSaBM}ACkAKsGGgJ?k@D{@Ry@~AsCVi@Pw@PmA\\mELaBPyAX{ATy@VkAFm@BaACgAW}CMgBEeBGs@Oy@w@{Cm@cDKe@Wo@oA{B]aAQe@[yAQeAIs@I_AMw@U{@_CuI}AsGi@iCS_B[gECi@AeBB_BFgAv@kHNaBBaA?aAMaECcCPgO@wCEaCUeMQwM@]NcAf@mBHi@Hm@@s@Au@OwEs@oUq@uTMeBSgAiA}EsDaOQu@Ce@~Dgs@vDmp@}Dy@aCy@aB}@eEoC"
              },
              "bounds": {
                "northeast": {
                  "lat": 48.85017,
                  "lng": 3.41085
                },
                "southwest": {
                  "lat": 48.84051,
                  "lng": 3.31062
                }
              },
              "summary": "",
              "legs": [
                {
                  "distance": {
                    "text": "8.8 km",
                    "value": 8848.7
                  },
                  "duration": {
                    "text": "16 mins",
                    "value": 971.2
                  },
                  "start_location": {
                    "lat": 48.850036,
                    "lng": 3.312646
                  },
                  "end_location": {
                    "lat": 48.850165,
                    "lng": 3.41085
                  }
                }
              ]
            },
            {
              "overview_polyline": {
                "points": "w_diHa_fSb@@dAXpD~@~DfAlAn@x@j@v@l@xB|@bBh@Ac@PoBb@oHRuETcEXwDXaDhAaJR}AFkABqCBcBDg@BUT{@`@o@t@i@fA{@fAmA`B{C`@eAr@uBfAaCz@sB`@eAHK|@GdAoABSC]qAsJE]dDm@fJeBFATED]xDsHpB{DhC_Ff@aAz@wB`BeLFuAXaHNmAtAkHLu@tDqRNq@bAoFXoBf@mHH_A~Bm]HiABw@@u@Cg@Y}ECw@ByADq@PkA\\sAv@kCNe@P_APmADeA?cAE_AKcAw@{DMaAIu@CiADeAHiAN{@nB_LXyAtCmLpAe^l@kNBcCQ}CiBaU[{DqAj@{At@c@Gk@{@gByFqFcQaP_\\_HaTsFcQuEsNuByBq@aAqAuC{CgGaMsXaLaYg@uAKe@oDk@}Dy@aCy@aB}@eEoC"
              },
              "bounds": {
                "northeast": {
                  "lat": 48.85017,
                  "lng": 3.41085
                },
                "southwest": {
                  "lat": 48.82936,
                  "lng": 3.31062
                }
              },
              "summary": "",
              "legs": [
                {
                  "distance": {
                    "text": "9.7 km",
                    "value": 9669.2
                  },
                  "duration": {
                    "text": "17 mins",
                    "value": 1023.1
                  },
                  "start_location": {
                    "lat": 48.850036,
                    "lng": 3.312646
                  },
                  "end_location": {
                    "lat": 48.850165,
                    "lng": 3.41085
                  }
                }
              ]
            },
            {
              "overview_polyline": {
                "points": "w_diHa_fSY?m@Ey@c@eBeBsD{E}@[k@_@o@w@Wk@]_B_@y@o@a@e@L[A[Iq@Y]Qg@Mo@Cu@FS@OAy@k@a@IwC@o@I?i@E}AKiAKc@Is@K[Qm@w@}GAIa@uDe@uEQaBuDo]]kDOcCGkDQgRGwGMgPKkEM{NGuFMiA_@qAk@w@w@a@w@Ea@D]L_@NBc@Tc@r@aBzAmCd@{@l@cAb@y@^m@l@w@z@uAV_@ZSXK^IRKRYHs@Hi@L[LOEUu@_D}@gDaB{Ca@mBDc@n@OdFzFz@`@\\s@BgAgFmT]_PxDaJvAwFRyCZ{EB@f@P@?n@NVLNHfCC~ACZBVN^h@VVXLd@?|DO`AAvIHF?T?RCPMTQ|AiBnAwAxA}AXM\\Gt@Ed@St@i@~DyCCi@AeBB_BFgAv@kHNaBBaA?aAMaECcCPgO@wCEaCUeMQwM@]NcAf@mBHi@Hm@@s@Au@OwEs@oUq@uTMeBSgAiA}EsDaOQu@Ce@~Dgs@vDmp@}Dy@aCy@aB}@eEoC"
              },
              "bounds": {
                "northeast": {
                  "lat": 48.86089,
                  "lng": 3.41085
                },
                "southwest": {
                  "lat": 48.84682,
                  "lng": 3.31265
                }
              },
              "summary": "",
              "legs": [
                {
                  "distance": {
                    "text": "9.8 km",
                    "value": 9810.3
                  },
                  "duration": {
                    "text": "19 mins",
                    "value": 1158.3
                  },
                  "start_location": {
                    "lat": 48.850036,
                    "lng": 3.312646
                  },
                  "end_location": {
                    "lat": 48.850165,
                    "lng": 3.41085
                  }
                }
              ]
            }
          ]
        }
      },
      "DistanceRouteResponse": {
        "title": "DistanceRouteResponse",
        "type": "object",
        "description": "Attributes describing a distance route response.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          },
          "routes": {
            "description": "Contains an array of routes from origin to destination (only one if alternatives is not specified)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistanceRouteElementsResponse"
            }
          }
        },
        "example": {
          "status": "OK",
          "routes": [
            {
              "overview_polyline": {
                "points": "w_diHa_fSb@@dAXpD~@~DfAlAn@x@j@v@l@xB|@bBh@Ac@PoBb@oHRuETcEXwDXaDhAaJR}AFkABqCBcBDg@BUT{@`@o@t@i@fA{@fAmA`B{C`@eAr@uBfAaCz@sB`@eAHK|@GdAoABSC]qAsJE]gB\\]qDy@iFIi@Gk@@sAFsDJk@JGDAPITSHY^cCkAk@cBs@gBm@_@K]YW]Me@cAeFgBoIc@uBy@kCk@oB[_BSaBM}ACkAKsGGgJ?k@D{@Ry@~AsCVi@Pw@PmA\\mELaBPyAX{ATy@VkAFm@BaACgAW}CMgBEeBGs@Oy@w@{Cm@cDKe@Wo@oA{B]aAQe@[yAQeAIs@I_AMw@U{@_CuI}AsGi@iCS_B[gECi@AeBB_BFgAv@kHNaBBaA?aAMaECcCPgO@wCEaCUeMQwM@]NcAf@mBHi@Hm@@s@Au@OwEs@oUq@uTMeBSgAiA}EsDaOQu@Ce@~Dgs@vDmp@}Dy@aCy@aB}@eEoC"
              },
              "bounds": {
                "northeast": {
                  "lat": 48.85017,
                  "lng": 3.41085
                },
                "southwest": {
                  "lat": 48.84051,
                  "lng": 3.31062
                }
              },
              "summary": "",
              "legs": [
                {
                  "distance": {
                    "text": "8.8 km",
                    "value": 8848.7
                  },
                  "duration": {
                    "text": "16 mins",
                    "value": 971.2
                  },
                  "start_location": {
                    "lat": 48.850036,
                    "lng": 3.312646
                  },
                  "end_location": {
                    "lat": 48.850165,
                    "lng": 3.41085
                  }
                }
              ]
            },
            {
              "overview_polyline": {
                "points": "w_diHa_fSb@@dAXpD~@~DfAlAn@x@j@v@l@xB|@bBh@Ac@PoBb@oHRuETcEXwDXaDhAaJR}AFkABqCBcBDg@BUT{@`@o@t@i@fA{@fAmA`B{C`@eAr@uBfAaCz@sB`@eAHK|@GdAoABSC]qAsJE]dDm@fJeBFATED]xDsHpB{DhC_Ff@aAz@wB`BeLFuAXaHNmAtAkHLu@tDqRNq@bAoFXoBf@mHH_A~Bm]HiABw@@u@Cg@Y}ECw@ByADq@PkA\\sAv@kCNe@P_APmADeA?cAE_AKcAw@{DMaAIu@CiADeAHiAN{@nB_LXyAtCmLpAe^l@kNBcCQ}CiBaU[{DqAj@{At@c@Gk@{@gByFqFcQaP_\\_HaTsFcQuEsNuByBq@aAqAuC{CgGaMsXaLaYg@uAKe@oDk@}Dy@aCy@aB}@eEoC"
              },
              "bounds": {
                "northeast": {
                  "lat": 48.85017,
                  "lng": 3.41085
                },
                "southwest": {
                  "lat": 48.82936,
                  "lng": 3.31062
                }
              },
              "summary": "",
              "legs": [
                {
                  "distance": {
                    "text": "9.7 km",
                    "value": 9669.2
                  },
                  "duration": {
                    "text": "17 mins",
                    "value": 1023.1
                  },
                  "start_location": {
                    "lat": 48.850036,
                    "lng": 3.312646
                  },
                  "end_location": {
                    "lat": 48.850165,
                    "lng": 3.41085
                  }
                }
              ]
            },
            {
              "overview_polyline": {
                "points": "w_diHa_fSY?m@Ey@c@eBeBsD{E}@[k@_@o@w@Wk@]_B_@y@o@a@e@L[A[Iq@Y]Qg@Mo@Cu@FS@OAy@k@a@IwC@o@I?i@E}AKiAKc@Is@K[Qm@w@}GAIa@uDe@uEQaBuDo]]kDOcCGkDQgRGwGMgPKkEM{NGuFMiA_@qAk@w@w@a@w@Ea@D]L_@NBc@Tc@r@aBzAmCd@{@l@cAb@y@^m@l@w@z@uAV_@ZSXK^IRKRYHs@Hi@L[LOEUu@_D}@gDaB{Ca@mBDc@n@OdFzFz@`@\\s@BgAgFmT]_PxDaJvAwFRyCZ{EB@f@P@?n@NVLNHfCC~ACZBVN^h@VVXLd@?|DO`AAvIHF?T?RCPMTQ|AiBnAwAxA}AXM\\Gt@Ed@St@i@~DyCCi@AeBB_BFgAv@kHNaBBaA?aAMaECcCPgO@wCEaCUeMQwM@]NcAf@mBHi@Hm@@s@Au@OwEs@oUq@uTMeBSgAiA}EsDaOQu@Ce@~Dgs@vDmp@}Dy@aCy@aB}@eEoC"
              },
              "bounds": {
                "northeast": {
                  "lat": 48.86089,
                  "lng": 3.41085
                },
                "southwest": {
                  "lat": 48.84682,
                  "lng": 3.31265
                }
              },
              "summary": "",
              "legs": [
                {
                  "distance": {
                    "text": "9.8 km",
                    "value": 9810.3
                  },
                  "duration": {
                    "text": "19 mins",
                    "value": 1158.3
                  },
                  "start_location": {
                    "lat": 48.850036,
                    "lng": 3.312646
                  },
                  "end_location": {
                    "lat": 48.850165,
                    "lng": 3.41085
                  }
                }
              ]
            }
          ]
        }
      },
      "DistanceStatus": {
        "title": "DistanceStatus",
        "type": "string",
        "description": "Returns more info on if the request was successful or not.\n* `OK` indicates the response contains a valid result. * `INVALID_REQUEST` indicates that the provided request was invalid (e.g. wrong URL syntax). * `MAX_ELEMENTS_EXCEEDED` indicates that the product of origins and destinations exceeds the per-query limit (fixed at 200 elts/q). * `MAX_ROUTE_LENGTH_EXCEEDED` indicates that at least one of requested route is too long and the matrix cannot be processed (>1000km). * `REQUEST_DENIED` indicates that the service denied use of the Distance API service (e.g. wrong API Key, wrong/no referer, …). * `UNKNOWN_ERROR` indicates a Distance API request could not be processed due to a server error. The request may succeed if you try again. * `OVER_QUERY_LIMIT` (associated to a 429 status code) indicates that the number of queries per second (QPS) or the number of elements per second (EPS) exceed the [usage limits](https://developers.woosmap.com/products/distance-api/distance-matrix-endpoint/#usage-limits)\n",
        "enum": [
          "OK",
          "INVALID_REQUEST",
          "MAX_ELEMENTS_EXCEEDED",
          "MAX_ROUTE_LENGTH_EXCEEDED",
          "REQUEST_DENIED",
          "UNKNOWN_ERROR",
          "OVER_QUERY_LIMIT"
        ]
      },
      "DistanceMatrixRequest": {
        "title": "DistanceMatrixRequest",
        "type": "object",
        "description": "Attributes describing a distance Matrix request",
        "required": [
          "origins",
          "destinations"
        ],
        "properties": {
          "origins": {
            "example": "48.709,2.403",
            "type": "string",
            "description": "The starting point for calculating travel distance. You can supply one or more locations separated by the pipe character, in the form of latitude/longitude coordinates. They are used unchanged to calculate distance. Ensure that no space exists between the latitude and longitude values. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
          },
          "destinations": {
            "example": "48.709,2.403|48.768,2.338",
            "type": "string",
            "description": "One or more locations to use as the finishing point for calculating travel distance. The options for the destinations parameter are the same as for the origins parameter, described above. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
          },
          "mode": {
            "example": "driving",
            "type": "string",
            "enum": [
              "driving",
              "cycling",
              "walking"
            ],
            "description": "Specifies the mode of transport to use when calculating distance\n"
          },
          "language": {
            "example": "en",
            "type": "string",
            "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or “en”.\n"
          },
          "units": {
            "example": "metric",
            "type": "string",
            "enum": [
              "imperial",
              "metric"
            ],
            "description": "Specifies the unit system to use when expressing distance as text. Two different units supported:\n* `metric` (default) returns distances in kilometers and meters * `imperial` returns distances in miles and feet\n"
          },
          "elements": {
            "example": "duration_distance",
            "type": "string",
            "enum": [
              "distance",
              "duration",
              "duration_distance"
            ],
            "description": "Specifies element values that will be part of the API response (distance and/or duration). if not specified default is `distance`\n"
          },
          "method": {
            "example": "distance",
            "type": "string",
            "enum": [
              "time",
              "distance"
            ],
            "description": "Specifies the method to compute the route between the start point and the end point:\n- `time`: fastest route (default) - `distance`: shortest route\n"
          }
        },
        "example": {
          "origins": "48.73534,2.368308|48.73534,2.368308",
          "destinations": "48.83534,2.368308",
          "units": "imperial",
          "elements": "duration_distance",
          "method": "distance"
        }
      },
      "MerchantBrandClean": {
        "title": "MerchantBrandClean",
        "type": "object",
        "description": "Attributes describing each Merchant Brand cleaned",
        "required": [
          "dirty_name",
          "status"
        ],
        "properties": {
          "dirty_name": {
            "description": "The dirty name is the unique merchant identifier which is provided on transactions by a payment provider.",
            "type": "string",
            "example": "APPLE.COM/BILL"
          },
          "clean_name": {
            "description": "a clean name for the above merchant.",
            "type": "string",
            "example": "Apple"
          },
          "country": {
            "description": "The merchant’s country.",
            "type": "string",
            "example": "IE"
          },
          "logo": {
            "description": "This is a hash generated for the logo based on the image.",
            "type": "string",
            "example": "5eb75a5239b76287f44021f8e6e1bd41"
          },
          "logo_url": {
            "type": "string",
            "description": "The logo image with content-type `image/png`.",
            "example": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png"
          },
          "status": {
            "description": "Status Code for Logo. * OK when there is a clean name or a clean name and a logo. * NOT_FOUND when there is no clean name or clean name and logo for the specified dirty merchant.\n",
            "example": "OK",
            "enum": [
              "OK",
              "NOT_FOUND"
            ]
          },
          "custom_id": {
            "description": "Provided in request and returned if specified.",
            "type": "string"
          },
          "merchant_id": {
            "type": "string",
            "description": "Textual identifier for Merchant",
            "example": "1070060999900835"
          }
        }
      },
      "MerchantBrandResponse": {
        "title": "MerchantBrandResponse",
        "type": "object",
        "description": "Attributes describing a Merchant Brand response",
        "required": [
          "merchants"
        ],
        "properties": {
          "merchants": {
            "description": "The list of cleaned transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantBrandClean"
            }
          }
        },
        "example": {
          "merchants": [
            {
              "dirty_name": "MCDO UK 2231 EP",
              "clean_name": "McDonald's",
              "status": "OK",
              "logo": "956bcb3591a8976ff94871a59b09eecc",
              "logo_url": "https://api.woosmap.com/merchants/logos/956bcb3591a8976ff94871a59b09eecc.png",
              "country": "GB",
              "merchant_id": "234482729011"
            },
            {
              "dirty_name": "Zara Fashion Retail, S.A.",
              "clean_name": "Zara",
              "status": "OK",
              "logo": "72fc39033e0d9e923a0236cb874c9309",
              "logo_url": "https://api.woosmap.com/merchants/logos/72fc39033e0d9e923a0236cb874c9309.png",
              "country": "IT",
              "merchant_id": "*44532UY2T33219"
            },
            {
              "dirty_name": "APOLLO PHARMACY BANGALORE IN",
              "clean_name": "Apollo Pharmacy",
              "status": "OK",
              "logo": "c776d3336e0d8c2b9e893e9e92b2caf7",
              "logo_url": "https://api.woosmap.com/merchants/logos/c776d3336e0d8c2b9e893e9e92b2caf7.png",
              "country": "IN"
            },
            {
              "dirty_name": "PIZZA HUT - SHOP 157",
              "clean_name": "Pizza Hut",
              "status": "OK",
              "logo": "d5463410f32a5f497459ac79552d3ce3",
              "logo_url": "https://api.woosmap.com/merchants/logos/d5463410f32a5f497459ac79552d3ce3.png",
              "country": ""
            },
            {
              "dirty_name": "CARREFOUR CITY 3112846",
              "clean_name": "Carrefour City",
              "status": "OK",
              "logo": "08ee8a3cecbcd3b7d9103bcf0e04db7e",
              "logo_url": "https://api.woosmap.com/merchants/logos/08ee8a3cecbcd3b7d9103bcf0e04db7e.png",
              "country": "FR",
              "merchant_id": "9651781125"
            },
            {
              "dirty_name": "ITUNES.COM/BILL",
              "clean_name": "Apple",
              "status": "OK",
              "logo": "5eb75a5239b76287f44021f8e6e1bd41",
              "logo_url": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
              "country": "IE",
              "merchant_id": "2070070200925"
            },
            {
              "dirty_name": "Pepa SL Gracia",
              "clean_name": "",
              "status": "OK",
              "logo": "",
              "logo_url": "",
              "country": "ES",
              "merchant_id": "34J21189"
            }
          ]
        }
      },
      "MerchantBrandDirty": {
        "title": "MerchantBrandDirty",
        "type": "object",
        "description": "Attributes describing each Merchant Brand in dirty transaction",
        "required": [
          "dirty_name"
        ],
        "properties": {
          "dirty_name": {
            "description": "The dirty name is the unique merchant identifier which is provided on transactions by a payment provider.",
            "type": "string",
            "example": "APPLE.COM/BILL"
          },
          "description": {
            "description": "The description is provided to you by the payment provider and is the transaction description attached to any payment.",
            "type": "string",
            "example": "APPLE.COM/BILL ITUNES.COM IE WEB 2232445* BR11"
          },
          "country": {
            "description": "The country field is not mandatory but strongly suggested in order to refine and be able to differentiate logos from one country to another. The API accepts ISO-3166-1-alpha2 country codes only.",
            "type": "string",
            "example": "IE"
          },
          "custom_id": {
            "description": "This optional field allows integrators to send a value of their choosing and receive it in the body of the response.",
            "type": "string",
            "example": "mobile app transaction"
          }
        }
      },
      "MerchantBrandRequest": {
        "title": "MerchantBrandRequest",
        "type": "object",
        "description": "Attributes describing a Merchant Brand request",
        "required": [
          "merchants"
        ],
        "properties": {
          "merchants": {
            "description": "The list of dirty transactions to clean",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantBrandDirty"
            }
          }
        },
        "example": {
          "merchants": [
            {
              "dirty_name": "MCDO UK 2231 EP",
              "country": "GB"
            },
            {
              "dirty_name": "Zara Fashion Retail, S.A.",
              "country": "IT"
            },
            {
              "dirty_name": "APOLLO PHARMACY BANGALORE IN",
              "country": "IN"
            },
            {
              "dirty_name": "PIZZA HUT - SHOP 157"
            },
            {
              "dirty_name": "CARREFOUR CITY 3112846",
              "country": "FR"
            },
            {
              "dirty_name": "ITUNES.COM/BILL",
              "country": "IE"
            },
            {
              "dirty_name": "Pepa SL Gracia",
              "country": "ES"
            }
          ]
        }
      },
      "MerchantPlaceClean": {
        "title": "MerchantPlaceClean",
        "description": "Attributes describing each Merchant Brand cleaned",
        "allOf": [
          {
            "$ref": "#/components/schemas/MerchantBrandClean"
          },
          {
            "type": "object",
            "properties": {
              "merchant_id": {
                "type": "string",
                "description": "Textual identifier for Merchant",
                "example": "1070060999900835"
              },
              "place_id": {
                "type": "string",
                "description": "The [Google Maps Place ID](https://developers.google.com/maps/documentation/places/web-service/place-id)",
                "example": "ChIJgUbEo8cfqokR5lP9_Wh_DaM"
              }
            }
          }
        ]
      },
      "MerchantPlaceResponse": {
        "title": "MerchantPlaceResponse",
        "type": "object",
        "description": "Attributes describing a Merchant Place Response",
        "required": [
          "merchants"
        ],
        "properties": {
          "merchants": {
            "description": "The list of cleaned transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPlaceClean"
            }
          }
        },
        "example": {
          "merchants": [
            {
              "dirty_name": "MCDO UK 2231 EP",
              "clean_name": "McDonald's",
              "status": "OK",
              "logo": "956bcb3591a8976ff94871a59b09eecc",
              "logo_url": "https://api.woosmap.com/merchants/logos/956bcb3591a8976ff94871a59b09eecc.png",
              "country": "GB",
              "merchant_id": "234482729011"
            },
            {
              "dirty_name": "Zara Fashion Retail, S.A.",
              "clean_name": "Zara",
              "status": "OK",
              "logo": "72fc39033e0d9e923a0236cb874c9309",
              "logo_url": "https://api.woosmap.com/merchants/logos/72fc39033e0d9e923a0236cb874c9309.png",
              "country": "IT",
              "merchant_id": "*44532UY2T33219"
            },
            {
              "dirty_name": "APOLLO PHARMACY BANGALORE IN",
              "clean_name": "Apollo Pharmacy",
              "status": "OK",
              "logo": "c776d3336e0d8c2b9e893e9e92b2caf7",
              "logo_url": "https://api.woosmap.com/merchants/logos/c776d3336e0d8c2b9e893e9e92b2caf7.png",
              "country": "IN"
            },
            {
              "dirty_name": "PIZZA HUT - SHOP 157",
              "clean_name": "Pizza Hut",
              "status": "OK",
              "logo": "d5463410f32a5f497459ac79552d3ce3",
              "logo_url": "https://api.woosmap.com/merchants/logos/d5463410f32a5f497459ac79552d3ce3.png",
              "country": ""
            },
            {
              "dirty_name": "CARREFOUR CITY 3112846",
              "clean_name": "Carrefour City",
              "status": "OK",
              "logo": "08ee8a3cecbcd3b7d9103bcf0e04db7e",
              "logo_url": "https://api.woosmap.com/merchants/logos/08ee8a3cecbcd3b7d9103bcf0e04db7e.png",
              "country": "FR",
              "merchant_id": "9651781125"
            },
            {
              "dirty_name": "ITUNES.COM/BILL",
              "clean_name": "Apple",
              "status": "OK",
              "logo": "5eb75a5239b76287f44021f8e6e1bd41",
              "logo_url": "https://api.woosmap.com/merchants/logos/5eb75a5239b76287f44021f8e6e1bd41.png",
              "country": "IE",
              "merchant_id": "2070070200925"
            },
            {
              "dirty_name": "Pepa SL Gracia",
              "clean_name": "",
              "status": "OK",
              "logo": "",
              "logo_url": "",
              "country": "ES",
              "merchant_id": "34J21189"
            }
          ]
        }
      },
      "MerchantPlaceDirty": {
        "title": "MerchantPlaceDirty",
        "description": "Attributes describing each Merchant Brand to get the Place.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MerchantBrandDirty"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description is provided to you by the payment provider and is the transaction description attached to any payment."
              },
              "street": {
                "type": "string",
                "description": "The merchant’s street, typically found in the raw transaction."
              },
              "zipcode": {
                "type": "string",
                "description": "The merchant’s zipcode."
              },
              "city": {
                "type": "string",
                "description": "The merchant’s city."
              },
              "state": {
                "type": "string",
                "description": "The merchant’s state."
              },
              "position": {
                "type": "string",
                "description": "The geographic coordinates where the transaction occurred. Sending in a position will significantly increase the possibility of finding a Place ID.\n"
              }
            }
          }
        ]
      },
      "MerchantPlaceRequest": {
        "title": "MerchantPlaceRequest",
        "type": "object",
        "description": "Attributes describing a Merchant Place request",
        "required": [
          "merchants"
        ],
        "properties": {
          "merchants": {
            "description": "The list of dirty transactions to clean",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPlaceDirty"
            }
          }
        },
        "example": {
          "merchants": [
            {
              "dirty_name": "MCDO UK 2231 EP",
              "country": "GB"
            },
            {
              "dirty_name": "Zara Fashion Retail, S.A.",
              "country": "IT"
            },
            {
              "dirty_name": "APOLLO PHARMACY BANGALORE IN",
              "country": "IN"
            },
            {
              "dirty_name": "PIZZA HUT - SHOP 157"
            },
            {
              "dirty_name": "CARREFOUR CITY 3112846",
              "country": "FR"
            },
            {
              "dirty_name": "ITUNES.COM/BILL",
              "country": "IE"
            },
            {
              "dirty_name": "Pepa SL Gracia",
              "country": "ES"
            }
          ]
        }
      }
    },
    "securitySchemes": {
      "PrivateApiKeyAuth": {
        "description": "A Private key generated specifically to authenticate API requests on server side. Required for Data management API. See how to [register a Private API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-private-api-key).",
        "type": "apiKey",
        "in": "query",
        "name": "private_key"
      },
      "PublicApiKeyAuth": {
        "description": "A Public key generated specifically to authenticate API requests on the front side. See how to [register a Public API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-public-api-key).",
        "type": "apiKey",
        "in": "query",
        "name": "key"
      },
      "RefererHeader": {
        "description": "The Referer HTTP request header is mandatory when using PublicApiKeyAuth. In browser environment, the Referer is set by the browser itself and cannot be overridden.",
        "type": "apiKey",
        "in": "header",
        "name": "Referer"
      }
    }
  },
  "security": [
    {
      "PublicApiKeyAuth": [],
      "RefererHeader": []
    },
    {
      "PrivateApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Store Search API",
      "description": "Stores Search API lets you query the Assets which are returned as a [GeoJson](https://geojson.org/). Request is done over HTTPS using GET. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/). If your request returns a high number of assets, the result will be paginated. If so, you can request assets by page using `page` and `stores_by_page` parameters (Default is **100**, max is **300**).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/search-api/get-started/"
      }
    },
    {
      "name": "Data Management API",
      "description": "The Data Management API is a web service that uses an HTTP request to manage, create or edit your Assets. The API only supports JSON. So you have to create a JSON file with your assets’ addresses and other information. You’ll need to convert, or geocode, the addresses in your file to latitude/longitude (`lat` / `long`) coordinates. Those coordinates will be used for most of Woosmap features like [local searches](https://developers.woosmap.com/products/search-api/get-started/), [stores nearby a user location](https://developers.woosmap.com/products/geolocation-api/stores/) or for displaying markers on a map with [Woosmap Javascript API](https://developers.woosmap.com/products/js-api/get-started/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/data-api/get-started/"
      }
    },
    {
      "name": "Geolocation API",
      "description": "Geolocation API returns a location (or nearby stores) and accuracy radius based on an IP address. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/geolocation-api/location/"
      }
    },
    {
      "name": "Localities API",
      "description": "Woosmap Localities API is a web service that returns a great amount of geographical places in response to an HTTP request. Among others are city names, postal codes, suburbs, addresses or airports. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/localities/get-started/"
      }
    },
    {
      "name": "Address API",
      "description": "Woosmap Address API is a web service that returns addresses and other geographical places in response to an HTTP request. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/address-api/get-started/"
      }
    },
    {
      "name": "Distance API",
      "description": "Woosmap Distance API is a service providing road travel distance and duration calculations, on a Worldwide scale. Request is done over HTTPS using GET or POST. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/distance-api/get-started/"
      }
    },
    {
      "name": "Merchant API",
      "description": "Woosmap Merchant API is a REST API aiming at cleaning “dirty” merchant names on transactions provided by a payment provider. It can be used to enrich end users’ transactions list by replacing hardly understandable labels with a commonly known merchant name along with their logo. Additionally, the API can provide a Google Maps Place ID. Request is done over HTTPS using GET or POST. Response is formatted as JSON. You must specify a key in your request, included as the value of a `private_key` parameter for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/merchant-api/get-started/"
      }
    }
  ]
}
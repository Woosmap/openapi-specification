{
  "openapi": "3.0.3",
  "info": {
    "title": "Woosmap Platform API Reference",
    "description": "The Woosmap API is a RESTful API built on HTTP. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. You can use your favorite HTTP/REST library for your programming language to use Woosmap's API, or you can use one of our Javascript SDKs for supported APIs:\n  - [Map JS](https://developers.woosmap.com/products/map-api/get-started/) - support All APIs\n  - [Localities JS](https://developers.woosmap.com/products/localities/localities-jsapi/get-started/) - for Localities API\n  - [MultiSearch JS](https://developers.woosmap.com/products/multisearch-lib/js/get-started/) - for Localities API and Store Search API\n\nYou can use Postman to test the API (if you use the `PUBLIC_API_KEY` authentication, don't forget to set the `Referer` Header corresponding to one of your restricted domain name).\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/18437534-dad12f37-6d84-42d1-9889-2f529aee0ab9?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D18437534-dad12f37-6d84-42d1-9889-2f529aee0ab9%26entityType%3Dcollection%26workspaceId%3Dff0698d5-c4db-403e-b7c6-b622b68032d3)\n",
    "termsOfService": "https://www.woosmap.com/en/policies/terms/",
    "x-document-meta-data": {
      "copyright": "Â© 2023 Woosmap"
    },
    "version": "1.23.0",
    "contact": {
      "name": "Woosmap API"
    }
  },
  "servers": [
    {
      "url": "https://api.woosmap.com"
    }
  ],
  "paths": {
    "/geolocation/position": {
      "get": {
        "summary": "Geolocation from an IP address",
        "operationId": "getGeolocationPosition",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Geolocation API"
        ],
        "description": "The `/position` returns JSON location of your users thanks to IP address of their devices.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/geolocation_ip_address"
          },
          {
            "$ref": "#/components/parameters/search_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Geolocation successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeolocationResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Geolocation position for the IP `173.79.254.254`",
                    "value": {
                      "country_code": "US",
                      "country_name": "United States",
                      "continent": "North America",
                      "latitude": 38.719,
                      "longitude": -77.1067,
                      "accuracy": 5,
                      "viewport": {
                        "northeast": {
                          "lat": 38.763915764205976,
                          "lng": -77.0491321464058
                        },
                        "southwest": {
                          "lat": 38.674084235794034,
                          "lng": -77.16426785359421
                        }
                      },
                      "city": "Alexandria",
                      "region_state": "Virginia",
                      "postal_code": "22309",
                      "timezone": "America/New_York"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/geolocation/position?private_key=YOUR_PRIVATE_API_KEY&ip_address=173.79.254.254'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/geolocation/position?private_key=YOUR_PRIVATE_API_KEY&ip_address=173.79.254.254\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/geolocation/position?private_key=YOUR_PRIVATE_API_KEY&ip_address=173.79.254.254\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/geolocation/stores": {
      "get": {
        "summary": "Assets nearby a Geolocation",
        "operationId": "getStoresFromGeolocationPosition",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Geolocation API"
        ],
        "description": "Retrieve the stores nearby an ip location. Stores are returned only if a relevant ip location is found - for an accuracy of 20km or less.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/geolocation_ip_address"
          },
          {
            "$ref": "#/components/parameters/geolocation_limit"
          },
          {
            "$ref": "#/components/parameters/search_query"
          }
        ],
        "responses": {
          "200": {
            "description": "Geolocation and Stores successufully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeolocationStoresResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Geolocation Position and Stores for the IP `173.79.254.254`",
                    "value": {
                      "country_code": "US",
                      "country_name": "United States",
                      "continent": "North America",
                      "latitude": 38.719,
                      "longitude": -77.1067,
                      "accuracy": 5,
                      "viewport": {
                        "northeast": {
                          "lat": 38.763915764205976,
                          "lng": -77.0491321464058
                        },
                        "southwest": {
                          "lat": 38.674084235794034,
                          "lng": -77.16426785359421
                        }
                      },
                      "city": "Alexandria",
                      "region_state": "Virginia",
                      "postal_code": "22309",
                      "timezone": "America/New_York",
                      "stores": {
                        "type": "FeatureCollection",
                        "features": [
                          {
                            "type": "Feature",
                            "properties": {
                              "store_id": "STORE_ID_123456",
                              "name": "My Cool Store",
                              "contact": {
                                "email": "contact@woosmap.com",
                                "phone": "+44 20 7693 4000",
                                "website": "https://www.woosmap.com"
                              },
                              "address": {
                                "lines": [
                                  "Building Centre",
                                  "26 Store Street"
                                ],
                                "country_code": "UK",
                                "city": "London",
                                "zipcode": "WC1E 7BT"
                              },
                              "user_properties": {
                                "some_user_properties": "associated user value"
                              },
                              "tags": [
                                "wifi",
                                "covered_parking"
                              ],
                              "types": [
                                "drive",
                                "click_and_collect"
                              ],
                              "last_updated": "2024-03-20T15:14:51.067524+00:00",
                              "distance": 0,
                              "open": {
                                "open_now": true,
                                "open_hours": [
                                  {
                                    "end": "22:00",
                                    "start": "08:30"
                                  }
                                ],
                                "week_day": 3,
                                "current_slice": {
                                  "end": "22:00",
                                  "start": "08:30"
                                }
                              },
                              "weekly_opening": {
                                "1": {
                                  "hours": [],
                                  "isSpecial": false
                                },
                                "2": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "3": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "4": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "5": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "6": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "7": {
                                  "hours": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ],
                                  "isSpecial": false
                                },
                                "timezone": "Europe/London"
                              },
                              "opening_hours": {
                                "usual": {
                                  "1": [],
                                  "default": [
                                    {
                                      "end": "22:00",
                                      "start": "08:30"
                                    }
                                  ]
                                },
                                "special": {
                                  "2015-02-07": [
                                    {
                                      "end": "23:00",
                                      "start": "08:00"
                                    }
                                  ]
                                },
                                "timezone": "Europe/London"
                              }
                            },
                            "geometry": {
                              "type": "Point",
                              "coordinates": [
                                -77.1067,
                                38.719
                              ]
                            }
                          }
                        ],
                        "pagination": {
                          "page": 1,
                          "pageCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/geolocation/stores?private_key=YOUR_PRIVATE_API_KEY&ip_address=173.79.254.254&limit=1'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/geolocation/stores?private_key=YOUR_PRIVATE_API_KEY&ip_address=173.79.254.254&limit=1\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/geolocation/stores?private_key=YOUR_PRIVATE_API_KEY&ip_address=173.79.254.254&limit=1\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/stores": {
      "post": {
        "summary": "Create your Assets",
        "operationId": "createStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to batch create Assets to a specific project identified with the `private_key` parameter.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body must of Stores Creation be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              },
              "examples": {
                "default": {
                  "summary": "Stores data to create as JSON",
                  "value": {
                    "stores": [
                      {
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "storeId": "STORE_ID_123456",
                        "name": "My Cool Store",
                        "address": {
                          "lines": [
                            "Building Centre",
                            "26 Store Street"
                          ],
                          "countryCode": "UK",
                          "city": "London",
                          "zipcode": "WC1E 7BT"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          },
                          "special": {
                            "2015-02-07": [
                              {
                                "start": "08:00",
                                "end": "23:00"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "types": [
                          "drive"
                        ],
                        "tags": [
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.5239,
                          "lng": -77.0157
                        },
                        "storeId": "STORE_ID_45678",
                        "name": "My Cool Store 2",
                        "address": {
                          "lines": [
                            "1805-1899",
                            "Orchard St"
                          ],
                          "countryCode": "US",
                          "city": "Alexandria",
                          "zipcode": "22309"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "America/New_York",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "default": {
                    "summary": "Success response for Stores Created",
                    "value": {
                      "status": "success",
                      "value": "2 stores"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X POST 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"stores\": [\n        {\n            \"types\": [\n                \"drive\",\n                \"click_and_collect\"\n            ],\n            \"tags\": [\n                \"wifi\",\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.719,\n                \"lng\": -77.1067\n            },\n            \"storeId\": \"STORE_ID_123456\",\n            \"name\": \"My Cool Store\",\n            \"address\": {\n                \"lines\": [\n                    \"Building Centre\",\n                    \"26 Store Street\"\n                ],\n                \"countryCode\": \"UK\",\n                \"city\": \"London\",\n                \"zipcode\": \"WC1E 7BT\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"Europe/London\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                },\n                \"special\": {\n                    \"2015-02-07\": [\n                        {\n                            \"start\": \"08:00\",\n                            \"end\": \"23:00\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"types\": [\n                \"drive\"\n            ],\n            \"tags\": [\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.5239,\n                \"lng\": -77.0157\n            },\n            \"storeId\": \"STORE_ID_45678\",\n            \"name\": \"My Cool Store 2\",\n            \"address\": {\n                \"lines\": [\n                    \"1805-1899\",\n                    \"Orchard St\"\n                ],\n                \"countryCode\": \"US\",\n                \"city\": \"Alexandria\",\n                \"zipcode\": \"22309\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"America/New_York\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      },
      "put": {
        "summary": "Update the Assets",
        "operationId": "updateStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to update assets in batch. `storeId` must exists when using `PUT` method, if one asset does not exists, the batch will be refused.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body of Stores Update must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              },
              "examples": {
                "default": {
                  "summary": "Stores data to update as JSON",
                  "value": {
                    "stores": [
                      {
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "storeId": "STORE_ID_123456",
                        "name": "My Cool Store",
                        "address": {
                          "lines": [
                            "698-500",
                            " Lloyds Ln"
                          ],
                          "countryCode": "US",
                          "city": "Alexandria",
                          "zipcode": "VA 22302"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          },
                          "special": {
                            "2015-02-07": [
                              {
                                "start": "08:00",
                                "end": "23:00"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "default": {
                    "summary": "Success response for Stores updated",
                    "value": {
                      "status": "success",
                      "value": "1 stores"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X PUT 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"698-500\",\n          \" Lloyds Ln\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"VA 22302\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"stores\": [\n        {\n            \"types\": [\n                \"drive\",\n                \"click_and_collect\"\n            ],\n            \"tags\": [\n                \"wifi\",\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.719,\n                \"lng\": -77.1067\n            },\n            \"storeId\": \"STORE_ID_123456\",\n            \"name\": \"My Cool Store\",\n            \"address\": {\n                \"lines\": [\n                    \"698-500\",\n                    \" Lloyds Ln\"\n                ],\n                \"countryCode\": \"US\",\n                \"city\": \"Alexandria\",\n                \"zipcode\": \"VA 22302\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"Europe/London\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                },\n                \"special\": {\n                    \"2015-02-07\": [\n                        {\n                            \"start\": \"08:00\",\n                            \"end\": \"23:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"698-500\",\n          \" Lloyds Ln\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"VA 22302\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n});\n\nvar config = {\n  method: 'put',\n  url: 'https://api.woosmap.com/stores?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete the Assets",
        "operationId": "deleteStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to delete one or more assets. The `storeId` specified in `query` parameter is the id of the asset to delete. To delete several assets, use the comma as a separator. To delete all project assets, omit the `query` parameter.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "description": "The query to target assets ID to delete",
            "in": "query",
            "example": "idstore:[{storeId1},{storeId2}]",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assets successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "default": {
                    "summary": "Success response for Stores deleted",
                    "value": {
                      "status": "success",
                      "value": 2
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X DELETE 'https://api.woosmap.com/stores/?private_key=YOUR_PRIVATE_API_KEY'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\n\nvar config = {\n  method: 'delete',\n  url: 'https://api.woosmap.com/stores/?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { }\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/stores/{storeId}": {
      "get": {
        "summary": "Get Asset from ID",
        "operationId": "getStore",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "Used to retrieve an asset from his `storeId`\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "storeId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "STORE_ID_123456",
            "description": "ID of the asset to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFeatureResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Get a store from its store_id",
                    "value": {
                      "type": "Feature",
                      "properties": {
                        "store_id": "10031",
                        "name": "Santa Rosa & Yolanda",
                        "contact": {
                          "phone": "707-527-1006",
                          "website": "https://www.starbucks.com/store-locator/store/10031/santa-rosa-yolanda-2688-santa-rosa-ave-santa-rosa-ca-954077625-us"
                        },
                        "address": {
                          "lines": [
                            "2688 Santa Rosa Ave",
                            "Santa Rosa, CA 95407"
                          ],
                          "country_code": "US",
                          "city": "Santa Rosa",
                          "zipcode": "954077625"
                        },
                        "user_properties": {
                          "take_away": "available"
                        },
                        "tags": [
                          "DT",
                          "WA",
                          "CD",
                          "DR",
                          "LB",
                          "GO",
                          "XO",
                          "MX",
                          "NB",
                          "BE",
                          "LU"
                        ],
                        "types": [
                          "Coffee shop"
                        ],
                        "last_updated": "2022-11-10T13:26:55.066524+00:00",
                        "open": {
                          "open_now": true,
                          "open_hours": [
                            {
                              "end": "20:00",
                              "start": "05:00"
                            }
                          ],
                          "week_day": 3,
                          "current_slice": {
                            "end": "20:00",
                            "start": "05:00"
                          }
                        },
                        "weekly_opening": {
                          "1": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "2": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "3": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "4": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "5": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "6": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "7": {
                            "hours": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "isSpecial": false
                          },
                          "timezone": "America/Los_Angeles"
                        },
                        "opening_hours": {
                          "usual": {
                            "1": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "2": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "3": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "4": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "5": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "6": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ],
                            "7": [
                              {
                                "end": "20:00",
                                "start": "05:00"
                              }
                            ]
                          },
                          "special": {},
                          "timezone": "America/Los_Angeles"
                        }
                      },
                      "geometry": {
                        "type": "Point",
                        "coordinates": [
                          -122.712924,
                          38.41244
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "404": {
            "description": "Not Found - `storeId` do not exist."
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/10031/?key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/10031/?key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/10031/?key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/stores/replace": {
      "post": {
        "summary": "Replace all assets",
        "operationId": "replaceStores",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Data Management API"
        ],
        "description": "To replace all your Assets. This endpoint will delete all previous assets and import assets in request body. During the operation previous assets could always be displayed on map. If the import failed previous assets are not deleted.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body of Stores Replace must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsCollectionRequest"
              },
              "examples": {
                "default": {
                  "summary": "Stores Data to replace as JSON",
                  "value": {
                    "stores": [
                      {
                        "types": [
                          "drive",
                          "click_and_collect"
                        ],
                        "tags": [
                          "wifi",
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.719,
                          "lng": -77.1067
                        },
                        "storeId": "STORE_ID_123456",
                        "name": "My Cool Store",
                        "address": {
                          "lines": [
                            "Building Centre",
                            "26 Store Street"
                          ],
                          "countryCode": "UK",
                          "city": "London",
                          "zipcode": "WC1E 7BT"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "Europe/London",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          },
                          "special": {
                            "2015-02-07": [
                              {
                                "start": "08:00",
                                "end": "23:00"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "types": [
                          "drive"
                        ],
                        "tags": [
                          "covered_parking"
                        ],
                        "location": {
                          "lat": 38.5239,
                          "lng": -77.0157
                        },
                        "storeId": "STORE_ID_45678",
                        "name": "My Cool Store 2",
                        "address": {
                          "lines": [
                            "1805-1899",
                            "Orchard St"
                          ],
                          "countryCode": "US",
                          "city": "Alexandria",
                          "zipcode": "22309"
                        },
                        "contact": {
                          "website": "https://www.woosmap.com",
                          "phone": "+44 20 7693 4000",
                          "email": "contact@woosmap.com"
                        },
                        "userProperties": {
                          "some_user_properties": "associated user value"
                        },
                        "openingHours": {
                          "timezone": "America/New_York",
                          "usual": {
                            "1": [],
                            "default": [
                              {
                                "start": "08:30",
                                "end": "22:00"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets successfully replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                },
                "examples": {
                  "default": {
                    "summary": "Success response for Stores replaced",
                    "value": {
                      "status": "success",
                      "value": "2 stores deleted, 2 stores created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X POST 'https://api.woosmap.com/stores/replace?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/stores/replace?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"stores\": [\n        {\n            \"types\": [\n                \"drive\",\n                \"click_and_collect\"\n            ],\n            \"tags\": [\n                \"wifi\",\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.719,\n                \"lng\": -77.1067\n            },\n            \"storeId\": \"STORE_ID_123456\",\n            \"name\": \"My Cool Store\",\n            \"address\": {\n                \"lines\": [\n                    \"Building Centre\",\n                    \"26 Store Street\"\n                ],\n                \"countryCode\": \"UK\",\n                \"city\": \"London\",\n                \"zipcode\": \"WC1E 7BT\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"Europe/London\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                },\n                \"special\": {\n                    \"2015-02-07\": [\n                        {\n                            \"start\": \"08:00\",\n                            \"end\": \"23:00\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"types\": [\n                \"drive\"\n            ],\n            \"tags\": [\n                \"covered_parking\"\n            ],\n            \"location\": {\n                \"lat\": 38.5239,\n                \"lng\": -77.0157\n            },\n            \"storeId\": \"STORE_ID_45678\",\n            \"name\": \"My Cool Store 2\",\n            \"address\": {\n                \"lines\": [\n                    \"1805-1899\",\n                    \"Orchard St\"\n                ],\n                \"countryCode\": \"US\",\n                \"city\": \"Alexandria\",\n                \"zipcode\": \"22309\"\n            },\n            \"contact\": {\n                \"website\": \"https://www.woosmap.com\",\n                \"phone\": \"+44 20 7693 4000\",\n                \"email\": \"contact@woosmap.com\"\n            },\n            \"userProperties\": {\n                \"some_user_properties\": \"associated user value\"\n            },\n            \"openingHours\": {\n                \"timezone\": \"America/New_York\",\n                \"usual\": {\n                    \"1\": [],\n                    \"default\": [\n                        {\n                            \"start\": \"08:30\",\n                            \"end\": \"22:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"stores\": [\n    {\n      \"types\": [\n        \"drive\",\n        \"click_and_collect\"\n      ],\n      \"tags\": [\n        \"wifi\",\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.719,\n        \"lng\": -77.1067\n      },\n      \"storeId\": \"STORE_ID_123456\",\n      \"name\": \"My Cool Store\",\n      \"address\": {\n        \"lines\": [\n          \"Building Centre\",\n          \"26 Store Street\"\n        ],\n        \"countryCode\": \"UK\",\n        \"city\": \"London\",\n        \"zipcode\": \"WC1E 7BT\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"Europe/London\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        },\n        \"special\": {\n          \"2015-02-07\": [\n            {\n              \"start\": \"08:00\",\n              \"end\": \"23:00\"\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"types\": [\n        \"drive\"\n      ],\n      \"tags\": [\n        \"covered_parking\"\n      ],\n      \"location\": {\n        \"lat\": 38.5239,\n        \"lng\": -77.0157\n      },\n      \"storeId\": \"STORE_ID_45678\",\n      \"name\": \"My Cool Store 2\",\n      \"address\": {\n        \"lines\": [\n          \"1805-1899\",\n          \"Orchard St\"\n        ],\n        \"countryCode\": \"US\",\n        \"city\": \"Alexandria\",\n        \"zipcode\": \"22309\"\n      },\n      \"contact\": {\n        \"website\": \"https://www.woosmap.com\",\n        \"phone\": \"+44 20 7693 4000\",\n        \"email\": \"contact@woosmap.com\"\n      },\n      \"userProperties\": {\n        \"some_user_properties\": \"associated user value\"\n      },\n      \"openingHours\": {\n        \"timezone\": \"America/New_York\",\n        \"usual\": {\n          \"1\": [],\n          \"default\": [\n            {\n              \"start\": \"08:30\",\n              \"end\": \"22:00\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/stores/replace?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/stores/search": {
      "get": {
        "summary": "Search for assets",
        "operationId": "storeSearch",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Store Search API"
        ],
        "description": "Used to retrieve assets from query.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/search_lat"
          },
          {
            "$ref": "#/components/parameters/search_lng"
          },
          {
            "$ref": "#/components/parameters/search_radius"
          },
          {
            "$ref": "#/components/parameters/search_encoded_polyline"
          },
          {
            "$ref": "#/components/parameters/search_stores_by_page"
          },
          {
            "$ref": "#/components/parameters/search_page"
          },
          {
            "$ref": "#/components/parameters/search_zone"
          }
        ],
        "responses": {
          "200": {
            "description": "Assets successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFeatureCollectionResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Search stores nearby a latlng and given a radius",
                    "value": {
                      "type": "FeatureCollection",
                      "features": [
                        {
                          "type": "Feature",
                          "properties": {
                            "store_id": "2354",
                            "name": "Berkeley Street/Berkeley Square",
                            "contact": {
                              "phone": "02076295779",
                              "website": "https://www.starbucks.com/store-locator/store/2354/berkeley-street-berkeley-square-27-berkeley-st-berkeley-square-london-eng-w-1-x-5-"
                            },
                            "address": {
                              "lines": [
                                "27 Berkeley St",
                                "London, ENG W1X 5AD"
                              ],
                              "country_code": "GB",
                              "city": "London",
                              "zipcode": "W1X 5AD"
                            },
                            "user_properties": {
                              "take_away": "available"
                            },
                            "tags": [
                              "WA",
                              "WF",
                              "CD",
                              "DR",
                              "XO"
                            ],
                            "types": [
                              "Coffee shop"
                            ],
                            "last_updated": "2022-11-10T13:23:53.564829+00:00",
                            "distance": 135.28682936,
                            "open": {
                              "open_now": true,
                              "open_hours": [
                                {
                                  "end": "18:00",
                                  "start": "06:30"
                                }
                              ],
                              "week_day": 3,
                              "current_slice": {
                                "end": "18:00",
                                "start": "06:30"
                              }
                            },
                            "weekly_opening": {
                              "1": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "2": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "3": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "4": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "5": {
                                "hours": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "6": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "7": {
                                "hours": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ],
                                "isSpecial": false
                              },
                              "timezone": "Europe/London"
                            },
                            "opening_hours": {
                              "usual": {
                                "1": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "2": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "3": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "4": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "5": [
                                  {
                                    "end": "18:00",
                                    "start": "06:30"
                                  }
                                ],
                                "6": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ],
                                "7": [
                                  {
                                    "end": "17:00",
                                    "start": "08:00"
                                  }
                                ]
                              },
                              "special": {},
                              "timezone": "Europe/London"
                            }
                          },
                          "geometry": {
                            "type": "Point",
                            "coordinates": [
                              -0.14408,
                              51.5088
                            ]
                          }
                        }
                      ],
                      "pagination": {
                        "page": 1,
                        "pageCount": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/search/?lat=51.50976&lng=-0.145276&radius=300&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/search/?lat=51.50976&lng=-0.145276&radius=300&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/search/?lat=51.50976&lng=-0.145276&radius=300&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/stores/autocomplete": {
      "get": {
        "summary": "Autocomplete for assets",
        "operationId": "storeAutocomplete",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Store Search API"
        ],
        "description": "Autocomplete on `localizedNames` with highlighted results on asset name. Use the field `localized` in your query parameter to search for localized names.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/search_language"
          },
          {
            "$ref": "#/components/parameters/search_limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Assets Successfully Replaced",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetAutocompleteResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Autocomplete on stores in localized names nearby a latlng and specifying a radius",
                    "value": {
                      "predictions": [
                        {
                          "store_id": "2670",
                          "name": "Sun Street",
                          "types": [
                            "Coffee shop"
                          ],
                          "matched_substrings": [
                            {
                              "offset": 4,
                              "length": 6
                            }
                          ],
                          "highlighted": "Sun <b>Street</b>"
                        },
                        {
                          "store_id": "16069",
                          "name": "7th Street",
                          "types": [
                            "Coffee shop"
                          ],
                          "matched_substrings": [
                            {
                              "offset": 4,
                              "length": 6
                            }
                          ],
                          "highlighted": "7th <b>Street</b>"
                        },
                        {
                          "store_id": "1013873",
                          "name": "The Street",
                          "types": [
                            "Coffee shop"
                          ],
                          "matched_substrings": [
                            {
                              "offset": 4,
                              "length": 6
                            }
                          ],
                          "highlighted": "The <b>Street</b>"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/autocomplete/?language=en&query=localized%3Astreet&limit=3&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/autocomplete/?language=en&query=localized%3Astreet&limit=3&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/autocomplete/?language=en&query=localized%3Astreet&limit=3&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/stores/search/bounds": {
      "get": {
        "summary": "Bounds for assets",
        "operationId": "storesBounds",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Store Search API"
        ],
        "description": "Used to retrieve Bounds for assets.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/search_query"
          },
          {
            "$ref": "#/components/parameters/search_lat"
          },
          {
            "$ref": "#/components/parameters/search_lng"
          },
          {
            "$ref": "#/components/parameters/search_radius"
          }
        ],
        "responses": {
          "200": {
            "description": "Bounds successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoundsResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Retrieve Bounds nearby a latlng and given a radius",
                    "value": {
                      "bounds": {
                        "west": -0.14408,
                        "south": 51.5088,
                        "east": -0.14408,
                        "north": 51.5088
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/stores/search/bounds?lat=51.50976&lng=-0.145276&radius=300&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/stores/search/bounds?lat=51.50976&lng=-0.145276&radius=300&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/stores/search/bounds?lat=51.50976&lng=-0.145276&radius=300&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/localities/autocomplete": {
      "get": {
        "summary": "Autocomplete for Localities",
        "operationId": "localitiesAutocomplete",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Localities API"
        ],
        "description": "Autocomplete on worldwide suggestions for a for text-based geographic searches. It can match on full words as well as substrings. You can therefore send queries as the user types, to provide on-the-fly addresses, city names, postal codes or suburb name suggestions.\n>â ï¸ To retrieve fields marked as  **deprecated** in response schema, please read [Details endpoint](#operation/localitiesDetails)\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_input"
          },
          {
            "$ref": "#/components/parameters/localities_types"
          },
          {
            "$ref": "#/components/parameters/localities_components"
          },
          {
            "$ref": "#/components/parameters/localities_language"
          },
          {
            "$ref": "#/components/parameters/localities_location"
          },
          {
            "$ref": "#/components/parameters/localities_radius"
          },
          {
            "$ref": "#/components/parameters/localities_data"
          },
          {
            "$ref": "#/components/parameters/localities_extended"
          },
          {
            "$ref": "#/components/parameters/localities_custom_description"
          }
        ],
        "responses": {
          "200": {
            "description": "Autocompletion Localities successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalitiesAutocompleteCollectionResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Autocomplete localities results for input `Lond` and components `country:gb`",
                    "value": {
                      "localities": [
                        {
                          "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
                          "type": "locality",
                          "description": "London, City of London, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              },
                              {
                                "offset": 16,
                                "length": 4
                              }
                            ]
                          }
                        },
                        {
                          "public_id": "m/T2C4YI2LgszkKXrELBC+9dfC8=",
                          "type": "locality",
                          "description": "Derry/Londonderry, Derry City and Strabane, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "offset": 6,
                                "length": 4
                              }
                            ]
                          }
                        },
                        {
                          "public_id": "J6eISGMjjvQwPkao8rsByB3aVwM=",
                          "type": "locality",
                          "description": "London Colney, Hertfordshire, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          }
                        },
                        {
                          "public_id": "52MnrbHVWH21CLWH8VY/YWKhqeM=",
                          "type": "locality",
                          "description": "London Apprentice, Cornwall, United Kingdom",
                          "matched_substrings": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          }
                        },
                        {
                          "public_id": "Js0mQmmeI46X3hiqRj/R4pvb8mQ=",
                          "type": "locality",
                          "description": "Long Stratton, Norfolk, United Kingdom"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/localities/autocomplete/?input=Lond&components=country%3Agb&no_deprecated_fields=true&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/localities/autocomplete/?input=Lond&components=country%3Agb&no_deprecated_fields=true&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/localities/autocomplete/?input=Lond&components=country%3Agb&no_deprecated_fields=true&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/localities/details": {
      "get": {
        "summary": "Details of a Locality",
        "operationId": "localitiesDetails",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Localities API"
        ],
        "description": "Provides details of an autocomplete suggestion (using the suggestionâs `public_id`).\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_public_id"
          },
          {
            "$ref": "#/components/parameters/localities_language"
          },
          {
            "$ref": "#/components/parameters/localities_fields"
          },
          {
            "$ref": "#/components/parameters/address_cc_format"
          },
          {
            "$ref": "#/components/parameters/localities_page"
          },
          {
            "$ref": "#/components/parameters/localities_addresses_per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Details Localities successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/LocalitiesDetailsAddressResponse"
                    },
                    {
                      "$ref": "#/components/schemas/LocalitiesDetailsPostalCodeResponse"
                    }
                  ]
                },
                "examples": {
                  "Address": {
                    "summary": "Localities Address details from a `public_id` retrieved using Localities autocomplete",
                    "value": {
                      "result": {
                        "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ==",
                        "types": [
                          "address"
                        ],
                        "formatted_address": "House Of Commons, Houses Of Parliament, London, SW1A 0AA",
                        "geometry": {
                          "location": {
                            "lat": 51.4998415,
                            "lng": -0.1246375
                          },
                          "accuracy": "ROOFTOP"
                        },
                        "address_components": [
                          {
                            "short_name": "GB",
                            "long_name": "United Kingdom",
                            "types": [
                              "country",
                              "administrative_area_level_0"
                            ]
                          },
                          {
                            "short_name": "City of London",
                            "long_name": "City of London",
                            "types": [
                              "administrative_area_level_1"
                            ]
                          },
                          {
                            "short_name": "City of London",
                            "long_name": "City of London",
                            "types": [
                              "county"
                            ]
                          },
                          {
                            "short_name": "London SW",
                            "long_name": "London SW",
                            "types": [
                              "district"
                            ]
                          },
                          {
                            "short_name": "London",
                            "long_name": "London",
                            "types": [
                              "locality"
                            ]
                          },
                          {
                            "short_name": "SW1A 0AA",
                            "long_name": "SW1A 0AA",
                            "types": [
                              "postal_codes"
                            ]
                          },
                          {
                            "short_name": "Houses Of Parliament",
                            "long_name": "Houses Of Parliament",
                            "types": [
                              "premise"
                            ]
                          },
                          {
                            "short_name": "House Of Commons",
                            "long_name": "House Of Commons",
                            "types": [
                              "organisation"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "PostalCode": {
                    "summary": "Localities Postal Code details from a `public_id` retrieved using Localities autocomplete",
                    "value": {
                      "result": {
                        "public_id": "QaCU+fBtigK65ztSrqHqUoUDwZw=",
                        "types": [
                          "postal_code"
                        ],
                        "formatted_address": "SW1A 0AA, City of London",
                        "geometry": {
                          "location": {
                            "lat": 51.49984,
                            "lng": -0.124663
                          }
                        },
                        "name": "SW1A 0AA",
                        "address_components": [
                          {
                            "short_name": "GB",
                            "long_name": "United Kingdom",
                            "types": [
                              "country",
                              "administrative_area_level_0"
                            ]
                          },
                          {
                            "short_name": "City of London",
                            "long_name": "City of London",
                            "types": [
                              "administrative_area_level_1"
                            ]
                          }
                        ],
                        "addresses": {
                          "pagination": {
                            "page": 1,
                            "page_count": 1,
                            "addresses_per_page": 1,
                            "address_count": 1
                          },
                          "list": [
                            {
                              "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ==",
                              "description": "House Of Commons, Houses Of Parliament, London, SW1A 0AA"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/localities/details?public_id=TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ%3D%3D&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/localities/details?public_id=TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ%3D%3D&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/localities/details?public_id=TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ%3D%3D&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/localities/geocode": {
      "get": {
        "summary": "Geocode a locality or Reverse Geocode a latlng",
        "operationId": "localitiesGeocode",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Localities API"
        ],
        "description": "Provides details for an address or a geographic position. Either parameter `address` **or** `latlng` is required.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/localities_address"
          },
          {
            "$ref": "#/components/parameters/localities_latlng"
          },
          {
            "$ref": "#/components/parameters/localities_geocode_types"
          },
          {
            "$ref": "#/components/parameters/localities_list_sub_buildings"
          },
          {
            "$ref": "#/components/parameters/localities_components"
          },
          {
            "$ref": "#/components/parameters/localities_language"
          },
          {
            "$ref": "#/components/parameters/localities_fields"
          },
          {
            "$ref": "#/components/parameters/localities_data"
          },
          {
            "$ref": "#/components/parameters/localities_cc_format"
          }
        ],
        "responses": {
          "200": {
            "description": "Request Localities Geocode successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalitiesGeocodeCollectionResponse"
                },
                "examples": {
                  "geocode": {
                    "summary": "Geocode Results for address `Place Jeanne-d'Arc` with components `country:FR`",
                    "value": {
                      "results": [
                        {
                          "public_id": "MCtGVFlkLzFNc2lCU3hMQUtxKy9GaXl5K3VNPV9f",
                          "types": [
                            "route"
                          ],
                          "formatted_address": "Place Jeanne D'Arc, 75013, Paris",
                          "geometry": {
                            "location": {
                              "lat": 48.829941,
                              "lng": 2.369083
                            },
                            "location_type": "GEOMETRIC_CENTER"
                          },
                          "address_components": [
                            {
                              "short_name": "FR",
                              "long_name": "France",
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ]
                            },
                            {
                              "short_name": "Ãle-de-France",
                              "long_name": "Ãle-de-France",
                              "types": [
                                "state"
                              ]
                            },
                            {
                              "short_name": "Paris",
                              "long_name": "Paris",
                              "types": [
                                "county"
                              ]
                            },
                            {
                              "short_name": "Paris",
                              "long_name": "Paris",
                              "types": [
                                "locality"
                              ]
                            },
                            {
                              "short_name": "75013",
                              "long_name": "75013",
                              "types": [
                                "postal_codes"
                              ]
                            },
                            {
                              "short_name": "Place Jeanne D'Arc",
                              "long_name": "Place Jeanne D'Arc",
                              "types": [
                                "route"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "reverse": {
                    "summary": "Reverse Geocode Results for latlng `51.52089223979333, -0.195460973340401` with list_sub_buildings `true`",
                    "value": {
                      "results": [
                        {
                          "public_id": "",
                          "types": [
                            "address"
                          ],
                          "formatted_address": "Radway House, Alfred Road, London, W2 5ER",
                          "geometry": {
                            "location": {
                              "lat": 51.5211258,
                              "lng": -0.1956346
                            },
                            "location_type": "ROOFTOP"
                          },
                          "address_components": [
                            {
                              "short_name": "GB",
                              "long_name": "United Kingdom",
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ]
                            },
                            {
                              "short_name": "City of London",
                              "long_name": "City of London",
                              "types": [
                                "administrative_area_level_1"
                              ]
                            },
                            {
                              "short_name": "City of London",
                              "long_name": "City of London",
                              "types": [
                                "county"
                              ]
                            },
                            {
                              "short_name": "London W",
                              "long_name": "London W",
                              "types": [
                                "district"
                              ]
                            },
                            {
                              "short_name": "London",
                              "long_name": "London",
                              "types": [
                                "locality"
                              ]
                            },
                            {
                              "short_name": "W2 5ER",
                              "long_name": "W2 5ER",
                              "types": [
                                "postal_codes"
                              ]
                            },
                            {
                              "short_name": "Alfred Road",
                              "long_name": "Alfred Road",
                              "types": [
                                "route"
                              ]
                            },
                            {
                              "short_name": "Radway House",
                              "long_name": "Radway House",
                              "types": [
                                "premise"
                              ]
                            }
                          ],
                          "distance": 28.62347934634507,
                          "sub_buildings": [
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9faitia1pNNURnOWYvQmRjMUdweXl5SjdLZUZnPQ==",
                              "description": "Flat 1, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fbTRoZVpxYkhBYVVXSytqek04UGtGQ1VLTVI0PQ==",
                              "description": "Flat 2, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fcmY1MHV6aE5kVytLWWZLV3JabzFzR2lnbThzPQ==",
                              "description": "Flat 3, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fajlaWXJJUDFKSmI1Y0dpNElDanBQejF2YUg4PQ==",
                              "description": "Flat 4, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fbkdEZTNOODZNL0VlWGtoR0pSa2tBS1NMYndVPQ==",
                              "description": "Flat 5, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fTGxlWUlKN2NhU1JXcTBuSEs1RExiamliNlpNPQ==",
                              "description": "Flat 6, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9feVZXa05ISjhzVGNHK2NQUHFpNlFIUWgvSnpJPQ==",
                              "description": "Flat 7, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fTVc5NldSeWpuOENUS2xST21vZzdnNGxGQldrPQ==",
                              "description": "Flat 8, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fN3RkdE9HeHBwT2M5R1hQMUFwNDJUc3NwRklZPQ==",
                              "description": "Flat 9, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fR2RVRHpoYll4a2RlTldjLzF3NVNFTXNZYzlFPQ==",
                              "description": "Flat 10, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fL3FXbnVZU2h4bjAwMDNKK3hJeU9OL3lnemFzPQ==",
                              "description": "Flat 11, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fVVVCUWhpNVJQWWk2eTl1WFBTVTRmK3Zma3VBPQ==",
                              "description": "Flat 12, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fV2hSUDNadnFMN3ZzaWJ6UFd2MWM3aW1qT3hBPQ==",
                              "description": "Flat 13, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fcWxGbFRlcE1TVStZVElodzFSdVhiTGxZTXl3PQ==",
                              "description": "Flat 14, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fYjR5VHRXMmZTQ0FOMGwwZHJNaFh5TFRnVHlnPQ==",
                              "description": "Flat 15, Radway House, Alfred Road, London, W2 5ER"
                            },
                            {
                              "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9fNmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PQ==",
                              "description": "Flat 16, Radway House, Alfred Road, London, W2 5ER"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/localities/geocode?address=Place%20Jeanne-d'\\''Arc&components=country%3AFR&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/localities/geocode?address=Place%20Jeanne-d'Arc&components=country%3AFR&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/localities/geocode?address=Place%20Jeanne-d'Arc&components=country%3AFR&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/localities/nearby": {
      "get": {
        "summary": "Nearby points of interest",
        "operationId": "localitiesNearby",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Localities API"
        ],
        "description": "Retrieve worldwide points of interest surrounding a given location. They can be filtered by categories.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "name": "types",
            "required": true,
            "description": "types of targeted items.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "point_of_interest"
              ]
            }
          },
          {
            "name": "location",
            "description": "Center of the search circle.\n",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "40.71399,-74.00499",
            "in": "query"
          },
          {
            "name": "radius",
            "description": "radius of the search circle, in meter.\n",
            "schema": {
              "type": "integer",
              "default": 1000,
              "minimum": 10,
              "maximum": 50000
            },
            "in": "query",
            "required": false,
            "example": 3000
          },
          {
            "name": "page",
            "description": "use `page` to navigate through paginated results.\n",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "in": "query",
            "example": 7
          },
          {
            "name": "limit",
            "description": "Defines how many results should be included in a page\n",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 30
            },
            "in": "query",
            "example": 15
          },
          {
            "$ref": "#/components/parameters/localities_categories"
          }
        ],
        "responses": {
          "200": {
            "description": "Points of interests surrounding `location` and matching provided `categories`, sorted by distance to `location`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalitiesNearbyCollectionResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Nearby points of interest with category `business.shop` around New-York center.",
                    "value": {
                      "results": [
                        {
                          "public_id": "emXdi2D7RXOpIthsEyKVGBYZVSc=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.finance.bank"
                          ],
                          "name": "Citibank",
                          "geometry": {
                            "location": {
                              "lat": 40.7130414767567,
                              "lng": -74.0074818610995
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "95FQZAdnETzbfFTEFVb/oofxJ4U=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.food_and_drinks.restaurant"
                          ],
                          "name": "Gran Morsi",
                          "geometry": {
                            "location": {
                              "lat": 40.71432885326513,
                              "lng": -74.00778746528921
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "c5rIR48wx55zG9RmeFYI7yujDwg=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.food_and_drinks.restaurant"
                          ],
                          "name": "Saffron",
                          "geometry": {
                            "location": {
                              "lat": 40.714654825479556,
                              "lng": -74.0077106032371
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "eFFoZUgHxyJJNH+Hpm2MbBXPg5Y=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.food_and_drinks.fast_food"
                          ],
                          "name": "Burger King",
                          "geometry": {
                            "location": {
                              "lat": 40.71619516782573,
                              "lng": -74.00480635760651
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "6GSB3ngwjf3vpdOUnj2TZO2ecOc=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.food_and_drinks.fast_food"
                          ],
                          "name": "Dunkin'",
                          "geometry": {
                            "location": {
                              "lat": 40.71471299588757,
                              "lng": -74.00777455715831
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "GjVqQF0y4/8+puILSl4GwcvTpG8=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.shop.grocery"
                          ],
                          "name": "Barakth & Saiful",
                          "geometry": {
                            "location": {
                              "lat": 40.71499001778744,
                              "lng": -74.00766701734061
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "FAs4bm8/XWAzeqIfWy3c5vNNuJM=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.food_and_drinks.cafe"
                          ],
                          "name": "Hungry Ghost",
                          "geometry": {
                            "location": {
                              "lat": 40.71527793616147,
                              "lng": -74.00745294353355
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "eev6v7sxhhbvAagkbC5NAKqzGV8=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.shop.grocery"
                          ],
                          "name": "Mr. Exotix",
                          "geometry": {
                            "location": {
                              "lat": 40.71523761920719,
                              "lng": -74.00749141646912
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "VDUWUBQS+dBD6NJyMqfEondAEZE=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.shop.grocery"
                          ],
                          "name": "Civic Deli",
                          "geometry": {
                            "location": {
                              "lat": 40.71606784671653,
                              "lng": -74.00377261748812
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        },
                        {
                          "public_id": "X8aAA+6/fLGaHeZkbc6EiqzOVR8=",
                          "types": [
                            "point_of_interest"
                          ],
                          "categories": [
                            "business.shop.grocery"
                          ],
                          "name": "Tribeca Deli Grill",
                          "geometry": {
                            "location": {
                              "lat": 40.7149423247584,
                              "lng": -74.00771462655064
                            }
                          },
                          "address_components": [
                            {
                              "types": [
                                "country",
                                "administrative_area_level_0"
                              ],
                              "long_name": "United States",
                              "short_name": "us"
                            }
                          ]
                        }
                      ],
                      "pagination": {
                        "previous_page": 2,
                        "next_page": 4
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/localities/nearby?types=point_of_interest&location=40.71399%2C-74.00499&categories=business&page=3&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/localities/nearby?types=point_of_interest&location=40.71399%2C-74.00499&categories=business&page=3&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/localities/nearby?types=point_of_interest&location=40.71399%2C-74.00499&categories=business&page=3&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/address/autocomplete/json": {
      "get": {
        "deprecated": true,
        "summary": "Autocomplete for Addresses",
        "operationId": "addressAutocomplete",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Address API"
        ],
        "description": "Autocomplete on worldwide suggestions for a for text-based geographic searches. It can match on full words as well as substrings.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/address_input"
          },
          {
            "$ref": "#/components/parameters/address_components"
          },
          {
            "$ref": "#/components/parameters/address_location"
          },
          {
            "$ref": "#/components/parameters/address_language"
          }
        ],
        "responses": {
          "200": {
            "description": "Autocompletion Address successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressAutocompleteCollectionResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Autocomplete address results for input `Lond` and components `country:gb`",
                    "value": {
                      "predictions": [
                        {
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
                          "description": "London, England, United Kingdom",
                          "matched_substring": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          },
                          "type": "locality"
                        },
                        {
                          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDE5Nzgz",
                          "description": "Londonderry, Northern Ireland, United Kingdom",
                          "matched_substring": {
                            "description": [
                              {
                                "offset": 0,
                                "length": 4
                              }
                            ]
                          },
                          "type": "locality"
                        }
                      ],
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/address/autocomplete/json?input=Lond&components=country%3Agb&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/address/autocomplete/json?input=Lond&components=country%3Agb&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/address/autocomplete/json?input=Lond&components=country%3Agb&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/address/details/json": {
      "get": {
        "deprecated": true,
        "summary": "Details of an Address",
        "operationId": "addressDetails",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Address API"
        ],
        "description": "Provides details of an address autocomplete suggestion (using the suggestionâs `public_id`).\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/address_public_id"
          },
          {
            "$ref": "#/components/parameters/address_fields"
          },
          {
            "$ref": "#/components/parameters/address_cc_format"
          }
        ],
        "responses": {
          "200": {
            "description": "Details Address successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDetailsResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Address Details for `London, England, United Kingdom`",
                    "value": {
                      "result": {
                        "formatted_address": "London, England, United Kingdom",
                        "types": [
                          "locality"
                        ],
                        "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
                        "address_components": [
                          {
                            "types": [
                              "country"
                            ],
                            "long_name": "United Kingdom",
                            "short_name": "GBR"
                          },
                          {
                            "types": [
                              "state"
                            ],
                            "long_name": "England",
                            "short_name": "England"
                          },
                          {
                            "types": [
                              "county"
                            ],
                            "long_name": "London",
                            "short_name": "LDN"
                          },
                          {
                            "long_name": "London",
                            "short_name": "London",
                            "types": [
                              "locality"
                            ]
                          },
                          {
                            "long_name": "SW1A 2",
                            "short_name": "SW1A 2",
                            "types": [
                              "postal_code"
                            ]
                          }
                        ],
                        "geometry": {
                          "location_type": "GEOMETRIC_CENTER",
                          "location": {
                            "lat": 51.50643,
                            "lng": -0.12719
                          },
                          "viewport": {
                            "northeast": {
                              "lat": 51.68629,
                              "lng": 0.28206
                            },
                            "southwest": {
                              "lat": 51.28043,
                              "lng": -0.56316
                            }
                          }
                        }
                      },
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/address/details/json?public_id=aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/address/details/json?public_id=aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/address/details/json?public_id=aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/address/geocode/json": {
      "get": {
        "deprecated": true,
        "summary": "Geocode an Address or Reverse Geocode a latlng",
        "operationId": "addressGeocode",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Address API"
        ],
        "description": "Provides details for an address or a geographic position. Either parameter `address` **or** `latlng` is required. Maximum of 25 queries per second (QPS)\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/address_address"
          },
          {
            "$ref": "#/components/parameters/address_latlng"
          },
          {
            "$ref": "#/components/parameters/address_components"
          },
          {
            "$ref": "#/components/parameters/address_language"
          },
          {
            "$ref": "#/components/parameters/address_location"
          },
          {
            "$ref": "#/components/parameters/address_cc_format"
          },
          {
            "$ref": "#/components/parameters/address_limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Request Address Geocode successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressGeocodeCollectionResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Geocode Results for address `Place de la Resistance` with components `country:FR`",
                    "value": {
                      "results": [
                        {
                          "formatted_address": "Place de la RÃ©sistance, 75007 Paris, France",
                          "types": [
                            "route"
                          ],
                          "address_components": [
                            {
                              "types": [
                                "country"
                              ],
                              "long_name": "France",
                              "short_name": "FRA"
                            },
                            {
                              "types": [
                                "state"
                              ],
                              "long_name": "Ile-de-France",
                              "short_name": "IDF"
                            },
                            {
                              "types": [
                                "county"
                              ],
                              "long_name": "Paris",
                              "short_name": "Paris"
                            },
                            {
                              "long_name": "Paris",
                              "short_name": "Paris",
                              "types": [
                                "locality"
                              ]
                            },
                            {
                              "long_name": "7th Arrondissement",
                              "short_name": "7th Arrondissement",
                              "types": [
                                "district"
                              ]
                            },
                            {
                              "long_name": "Place de la RÃ©sistance",
                              "short_name": "Place de la RÃ©sistance",
                              "types": [
                                "route"
                              ]
                            },
                            {
                              "long_name": "75007",
                              "short_name": "75007",
                              "types": [
                                "postal_code"
                              ]
                            }
                          ],
                          "geometry": {
                            "location_type": "GEOMETRIC_CENTER",
                            "location": {
                              "lat": 48.86228,
                              "lng": 2.30345
                            },
                            "viewport": {
                              "northeast": {
                                "lat": 48.86231,
                                "lng": 2.30544
                              },
                              "southwest": {
                                "lat": 48.86191,
                                "lng": 2.30147
                              }
                            }
                          }
                        }
                      ],
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/address/geocode/json?address=Place%20de%20la%20Resistance%20Paris&components=country%3AFR&limit=5&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/address/geocode/json?address=Place%20de%20la%20Resistance%20Paris&components=country%3AFR&limit=5&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/address/geocode/json?address=Place%20de%20la%20Resistance%20Paris&components=country%3AFR&limit=5&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/zones": {
      "get": {
        "summary": "List your Zones",
        "operationId": "listZones",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Zones API"
        ],
        "description": "List all zones for the current project, sorted by `zone_id`.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/zones_limit"
          },
          {
            "$ref": "#/components/parameters/zones_offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Zones successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZonesCollectionResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Zones data",
                    "value": {
                      "zones": [
                        {
                          "store_id": "STORE_ID_123456",
                          "zone_id": "ZoneB",
                          "polygon": "POLYGON ((-122.4546384 37.774656, -122.4515485 37.7595934, -122.4354306 37.7602172, -122.4333707 37.7512596, -122.423071 37.7511239, -122.4242726 37.7687665, -122.4259893 37.7691736, -122.4289075 37.7732444, -122.4306241 37.7850483, -122.4472753 37.7830133, -122.445902 37.7759581, -122.4546384 37.774656))",
                          "types": [
                            "delivery"
                          ],
                          "description": "Delivery Zone for Store B"
                        },
                        {
                          "store_id": "STORE_ID_45678",
                          "zone_id": "ZoneC",
                          "polygon": "POLYGON ((-122.4758889 37.7524995, -122.4751594 37.7321718, -122.4688079 37.7299995, -122.4648597 37.7261979, -122.4519851 37.7228035, -122.4483802 37.7215815, -122.4458053 37.726741, -122.4365356 37.7310857, -122.4315574 37.7324433, -122.4246909 37.7312214, -122.4219444 37.731493, -122.423071 37.7511239, -122.4333707 37.7512596, -122.4354306 37.7602172, -122.4515485 37.7595934, -122.4528628 37.7582744, -122.4540375 37.7566755, -122.4565266 37.7513144, -122.4601315 37.7521288, -122.4618481 37.7514501, -122.4635648 37.7530788, -122.4758889 37.7524995))",
                          "types": [
                            "delivery"
                          ],
                          "description": "Delivery Zone for Store C"
                        }
                      ],
                      "status": "ok"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Incorrect authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                },
                "examples": {
                  "Unauthorized": {
                    "summary": "Error 401",
                    "value": {
                      "detail": "Incorrect authentication credentials. Please check or use a valid API Key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. This Woosmap API is not enabled for this project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                },
                "examples": {
                  "Forbidden": {
                    "summary": "Error 403",
                    "value": {
                      "detail": "This Woosmap API is not enabled for this project."
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The rate limit for this endpoint has been exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                },
                "examples": {
                  "Forbidden": {
                    "summary": "Error 429",
                    "value": {
                      "detail": "The rate limit for this endpoint has been exceeded"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY&limit=2&offset=1'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY&limit=2&offset=1\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY&limit=2&offset=1\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "post": {
        "summary": "Create your Zones",
        "operationId": "createZones",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Zones API"
        ],
        "description": "Used to batch create Zones to a specific project identified with the `private_key` parameter.\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body of Zones Creation must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZonesCollectionRequest"
              },
              "examples": {
                "default": {
                  "summary": "Zones data as JSON",
                  "value": {
                    "zones": [
                      {
                        "zone_id": "ZoneA",
                        "description": "Delivery Zone for Store A",
                        "store_id": "STORE_ID_123456",
                        "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneB",
                        "description": "Delivery Zone for Store B",
                        "store_id": "STORE_ID_123456",
                        "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneC",
                        "description": "Delivery Zone for Store C",
                        "store_id": "STORE_ID_45678",
                        "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
                        "types": [
                          "delivery"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Zones successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessZones"
                },
                "examples": {
                  "default": {
                    "summary": "Success response for Zones Created",
                    "value": {
                      "status": "ok",
                      "message": "Zones successfully added."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "x-codeSamples": [
          {
            "$ref": "#/paths/~1zones/put/x-codeSamples/0"
          },
          {
            "$ref": "#/paths/~1zones/put/x-codeSamples/1"
          },
          {
            "$ref": "#/paths/~1zones/put/x-codeSamples/2"
          }
        ]
      },
      "put": {
        "summary": "Update the Zones",
        "operationId": "updateZones",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Zones API"
        ],
        "description": "Used to update zones in batch. `zone_id` must exists when using `PUT` method, if one zone does not exists, the batch will be refused.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body of Zones Update must be formatted as JSON.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZonesCollectionRequest"
              },
              "examples": {
                "default": {
                  "summary": "Zones data",
                  "value": {
                    "zones": [
                      {
                        "zone_id": "ZoneA",
                        "description": "Delivery Zone for Store A",
                        "store_id": "STORE_ID_123456",
                        "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneB",
                        "description": "Delivery Zone for Store B",
                        "store_id": "STORE_ID_123456",
                        "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
                        "types": [
                          "delivery"
                        ]
                      },
                      {
                        "zone_id": "ZoneC",
                        "description": "Delivery Zone for Store C",
                        "store_id": "STORE_ID_45678",
                        "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
                        "types": [
                          "delivery"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Zones successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessZones"
                },
                "examples": {
                  "default": {
                    "summary": "Success response for Zones updated",
                    "value": {
                      "status": "ok",
                      "message": "Zones successfully added."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid. The data is not a valid JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                },
                "examples": {
                  "Invalid": {
                    "summary": "Error 400",
                    "value": {
                      "status": "error",
                      "value": "The request is invalid, the data is not a valid JSON."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X POST 'https://api.woosmap.com/zones?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"zones\": [\n    {\n      \"zone_id\": \"ZoneA\",\n      \"description\": \"Delivery Zone for Store A\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneB\",\n      \"description\": \"Delivery Zone for Store B\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneC\",\n      \"description\": \"Delivery Zone for Store C\",\n      \"store_id\": \"STORE_ID_45678\",\n      \"polygon\": \"POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    }\n  ]\n}'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/zones?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"zones\": [\n        {\n            \"zone_id\": \"ZoneA\",\n            \"description\": \"Delivery Zone for Store A\",\n            \"store_id\": \"STORE_ID_123456\",\n            \"polygon\": \"POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))\",\n            \"types\": [\n                \"delivery\"\n            ]\n        },\n        {\n            \"zone_id\": \"ZoneB\",\n            \"description\": \"Delivery Zone for Store B\",\n            \"store_id\": \"STORE_ID_123456\",\n            \"polygon\": \"POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))\",\n            \"types\": [\n                \"delivery\"\n            ]\n        },\n        {\n            \"zone_id\": \"ZoneC\",\n            \"description\": \"Delivery Zone for Store C\",\n            \"store_id\": \"STORE_ID_45678\",\n            \"polygon\": \"POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))\",\n            \"types\": [\n                \"delivery\"\n            ]\n        }\n    ]\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"zones\": [\n    {\n      \"zone_id\": \"ZoneA\",\n      \"description\": \"Delivery Zone for Store A\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneB\",\n      \"description\": \"Delivery Zone for Store B\",\n      \"store_id\": \"STORE_ID_123456\",\n      \"polygon\": \"POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    },\n    {\n      \"zone_id\": \"ZoneC\",\n      \"description\": \"Delivery Zone for Store C\",\n      \"store_id\": \"STORE_ID_45678\",\n      \"polygon\": \"POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))\",\n      \"types\": [\n        \"delivery\"\n      ]\n    }\n  ]\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/zones?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete the Zones",
        "operationId": "deleteZones",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Zones API"
        ],
        "description": "Used to delete one or more Zones. The `zone_id` is the id of the zone to delete. To delete several zones, use the comma as a separator.",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "zone_id",
            "description": "The zone ID to delete",
            "in": "query",
            "example": "ZoneA",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Zones successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessZones"
                },
                "examples": {
                  "default": {
                    "summary": "Success response for Zones deleted",
                    "value": {
                      "status": "ok",
                      "message": "Zones deleted."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X DELETE 'https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\n\nvar config = {\n  method: 'delete',\n  url: 'https://api.woosmap.com/zones/?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { }\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/zones/{zone_id}": {
      "get": {
        "summary": "Get Zone from ID",
        "operationId": "getZone",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Zones API"
        ],
        "description": "Used to retrieve a zone from his `zone_id`\n",
        "security": [
          {
            "PrivateApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "zone_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "ZoneA",
            "description": "ID of the zone to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Zone successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zone"
                },
                "examples": {
                  "default": {
                    "summary": "Get a zone from its zone_id",
                    "value": {
                      "store_id": "STORE_ID_123456",
                      "zone_id": "ZoneA",
                      "polygon": "POLYGON ((-122.496116 37.7648181, -122.4954079 37.751518, -122.4635648 37.7530788, -122.4618481 37.7514501, -122.4601315 37.7521288, -122.4565266 37.7513144, -122.4540375 37.7566755, -122.4528359 37.7583041, -122.4515485 37.7595934, -122.4546384 37.774656, -122.4718903 37.7731635, -122.472577 37.772485, -122.4755811 37.7725529, -122.4791001 37.7723493, -122.4793576 37.7713995, -122.4784993 37.769839, -122.4783276 37.7680071, -122.4774693 37.766718, -122.4772118 37.7652931, -122.496116 37.7648181))",
                      "types": [
                        "delivery"
                      ],
                      "description": "Delivery Zone for Store A",
                      "status": "ok"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "404": {
            "description": "Not Found - `zone_id` do not exist."
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/zones/ZoneA/?private_key=YOUR_PRIVATE_API_KEY'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/zones/ZoneA/?private_key=YOUR_PRIVATE_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/zones/ZoneA/?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload={}\nheaders = {}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/distance/distancematrix/json": {
      "get": {
        "summary": "Distance Matrix",
        "operationId": "getDistanceMatrix",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Distance API"
        ],
        "description": "Get distances and durations for a matrix of origins and destinations, based on the recommended route between start and end points for a specified travel mode.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origins"
          },
          {
            "$ref": "#/components/parameters/distance_destinations"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_elements"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          },
          {
            "$ref": "#/components/parameters/distance_avoid"
          },
          {
            "$ref": "#/components/parameters/distance_departure_time"
          }
        ],
        "responses": {
          "200": {
            "description": "Distance Matrix successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceMatrixResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result for driving from origins `48.709,2.403` to destinations `48.709,2.303|48.768,2.338`,",
                    "value": {
                      "status": "OK",
                      "rows": [
                        {
                          "elements": [
                            {
                              "status": "OK",
                              "duration": {
                                "value": 986,
                                "text": "16 mins"
                              },
                              "distance": {
                                "value": 10797,
                                "text": "10.8 km"
                              }
                            },
                            {
                              "status": "OK",
                              "duration": {
                                "value": 928,
                                "text": "15 mins"
                              },
                              "distance": {
                                "value": 10334,
                                "text": "10.3 km"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/distance/distancematrix/json?origins=48.709%2C2.403&destinations=48.709%2C2.303%7C48.768%2C2.338&mode=driving&language=en&elements=duration_distance&method=distance&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/distance/distancematrix/json?origins=48.709%2C2.403&destinations=48.709%2C2.303%7C48.768%2C2.338&mode=driving&language=en&elements=duration_distance&method=distance&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/distance/distancematrix/json?origins=48.709%2C2.403&destinations=48.709%2C2.303%7C48.768%2C2.338&mode=driving&language=en&elements=duration_distance&method=distance&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "post": {
        "summary": "Distance Matrix using POST",
        "operationId": "postDistanceMatrix",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Distance API"
        ],
        "description": "Get distances and durations for a matrix of origins and destinations, based on the recommended route between start and end points for a specified travel mode. If the URL size is too short for your origins and destinations, you should request the server using this POST method and passing arguments as json.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body of Distance Matrix must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistanceMatrixRequest"
              },
              "examples": {
                "default": {
                  "summary": "Request as a JSON for a distance matrix call",
                  "value": {
                    "origins": "48.73534,2.368308|48.73534,2.368308",
                    "destinations": "48.83534,2.368308",
                    "units": "imperial",
                    "elements": "duration_distance",
                    "method": "distance",
                    "departure_time": "now"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Distance Matrix with POST successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceMatrixResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result for driving from origins `48.73534,2.368308|48.73534,2.368308` to destinations `48.83534,2.368308`,",
                    "value": {
                      "status": "OK",
                      "rows": [
                        {
                          "elements": [
                            {
                              "status": "OK",
                              "duration": {
                                "value": 986,
                                "text": "16 mins"
                              },
                              "distance": {
                                "value": 10797,
                                "text": "10.8 km"
                              }
                            },
                            {
                              "status": "OK",
                              "duration": {
                                "value": 928,
                                "text": "15 mins"
                              },
                              "distance": {
                                "value": 10334,
                                "text": "10.3 km"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X POST 'https://api.woosmap.com/distance/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"elements\": \"duration_distance\",\n  \"method\": \"distance\",\n  \"departure_time\": \"now\"\n}'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/distance/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n    \"destinations\": \"48.83534,2.368308\",\n    \"units\": \"imperial\",\n    \"elements\": \"duration_distance\",\n    \"method\": \"distance\",\n    \"departure_time\": \"now\"\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"elements\": \"duration_distance\",\n  \"method\": \"distance\",\n  \"departure_time\": \"now\"\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/distance/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/distance/route/json": {
      "get": {
        "summary": "Route",
        "operationId": "getRoute",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Distance API"
        ],
        "description": "Get distance, duration and path (as a polyline) for a pair of origin and destination, based on the recommended route between those two points for a specified travel mode.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origin"
          },
          {
            "$ref": "#/components/parameters/distance_destination"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_alternatives"
          },
          {
            "$ref": "#/components/parameters/distance_waypoints"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          },
          {
            "$ref": "#/components/parameters/distance_details"
          },
          {
            "$ref": "#/components/parameters/distance_avoid"
          },
          {
            "$ref": "#/components/parameters/distance_departure_time"
          },
          {
            "$ref": "#/components/parameters/distance_arrival_time"
          }
        ],
        "responses": {
          "200": {
            "description": "Route successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceRouteResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Distance Route Result for driving from origin `49.31067,4.14525` to destination `49.31344,4.15293` and retrieving alternatives routes.",
                    "value": {
                      "status": "OK",
                      "routes": [
                        {
                          "overview_polyline": {
                            "points": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?QBIBU?WFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELCJBJAHGFIDMBSASBKDILURa@LWt@eAHQ"
                          },
                          "bounds": {
                            "northeast": {
                              "lat": 49.315678,
                              "lng": 4.15292
                            },
                            "southwest": {
                              "lat": 49.31073,
                              "lng": 4.145162
                            }
                          },
                          "notice": "",
                          "legs": [
                            {
                              "distance": {
                                "text": "1 km",
                                "value": 1038
                              },
                              "duration": {
                                "text": "1 min",
                                "value": 75
                              },
                              "start_location": {
                                "lat": 49.31067,
                                "lng": 4.14525
                              },
                              "end_location": {
                                "lat": 49.31344,
                                "lng": 4.15293
                              },
                              "start_waypoint": 0,
                              "end_waypoint": 1,
                              "end_address": "D 30",
                              "start_address": "D 151",
                              "steps": [
                                {
                                  "distance": "676 m",
                                  "duration": "1 min",
                                  "polyline": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?Q",
                                  "start_location": {
                                    "lat": 49.31073,
                                    "lng": 4.145163
                                  },
                                  "end_location": {
                                    "lat": 49.315679,
                                    "lng": 4.149621
                                  },
                                  "travel_mode": "DRIVING",
                                  "instructions": {
                                    "action": 2,
                                    "summary": "Drive northeast on D 151.",
                                    "verbal_succint": "Drive northeast. Then Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_before": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_after": "Continue for 700 meters."
                                  }
                                },
                                {
                                  "distance": "22 m",
                                  "duration": "1 min",
                                  "polyline": "}}~kHcniXBIBU?W",
                                  "start_location": {
                                    "lat": 49.315679,
                                    "lng": 4.149621
                                  },
                                  "end_location": {
                                    "lat": 49.31563,
                                    "lng": 4.149905
                                  },
                                  "travel_mode": "DRIVING",
                                  "instructions": {
                                    "action": 26,
                                    "summary": "Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_alert": "Enter the roundabout and take the 2nd exit onto D 30.",
                                    "verbal_succint": "Enter the roundabout and take the 2nd exit.",
                                    "verbal_before": "Enter the roundabout and take the 2nd exit onto D 30."
                                  }
                                },
                                {
                                  "distance": "198 m",
                                  "duration": "1 min",
                                  "polyline": "u}~kH{oiXFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELC",
                                  "start_location": {
                                    "lat": 49.31563,
                                    "lng": 4.149905
                                  },
                                  "end_location": {
                                    "lat": 49.314292,
                                    "lng": 4.151623
                                  },
                                  "travel_mode": "DRIVING",
                                  "instructions": {
                                    "action": 27,
                                    "summary": "Exit the roundabout onto D 30.",
                                    "verbal_succint": "Exit the roundabout.",
                                    "verbal_before": "Exit the roundabout onto D 30.",
                                    "verbal_after": "Continue for 200 meters."
                                  }
                                },
                                {
                                  "distance": "46 m",
                                  "duration": "1 min",
                                  "polyline": "iu~kHsziXJBJAHGFIDMBSAS",
                                  "start_location": {
                                    "lat": 49.314292,
                                    "lng": 4.151623
                                  },
                                  "end_location": {
                                    "lat": 49.314041,
                                    "lng": 4.151976
                                  },
                                  "travel_mode": "DRIVING",
                                  "instructions": {
                                    "action": 26,
                                    "summary": "Enter the roundabout and take the 1st exit onto D 30.",
                                    "verbal_alert": "Enter the roundabout and take the 1st exit onto D 30.",
                                    "verbal_succint": "Enter the roundabout and take the 1st exit.",
                                    "verbal_before": "Enter the roundabout and take the 1st exit onto D 30."
                                  }
                                },
                                {
                                  "distance": "96 m",
                                  "duration": "1 min",
                                  "polyline": "ws~kHy|iXBKDILURa@LWt@eAHQ",
                                  "start_location": {
                                    "lat": 49.314041,
                                    "lng": 4.151976
                                  },
                                  "end_location": {
                                    "lat": 49.313434,
                                    "lng": 4.152921
                                  },
                                  "travel_mode": "DRIVING",
                                  "instructions": {
                                    "action": 27,
                                    "summary": "Exit the roundabout onto D 30.",
                                    "verbal_succint": "Exit the roundabout. Then, in 100 meters, You will arrive at your destination.",
                                    "verbal_before": "Exit the roundabout onto D 30. Then, in 100 meters, You will arrive at your destination.",
                                    "verbal_after": "Continue for 100 meters."
                                  }
                                },
                                {
                                  "distance": "1 m",
                                  "duration": "1 min",
                                  "polyline": "}o~kHwbjX",
                                  "start_location": {
                                    "lat": 49.313434,
                                    "lng": 4.152921
                                  },
                                  "end_location": {
                                    "lat": 49.313434,
                                    "lng": 4.152921
                                  },
                                  "travel_mode": "DRIVING",
                                  "instructions": {
                                    "action": 4,
                                    "summary": "You have arrived at your destination.",
                                    "verbal_alert": "You will arrive at your destination.",
                                    "verbal_before": "You have arrived at your destination."
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/distance/route/json?origin=49.31067%2C4.14525&destination=49.31344%2C4.15293&mode=driving&language=en&alternatives=true&method=distance&details=full&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/distance/route/json?origin=49.31067%2C4.14525&destination=49.31344%2C4.15293&mode=driving&language=en&alternatives=true&method=distance&details=full&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/distance/route/json?origin=49.31067%2C4.14525&destination=49.31344%2C4.15293&mode=driving&language=en&alternatives=true&method=distance&details=full&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/distance/isochrone/json": {
      "get": {
        "summary": "Isochrone (Early Access)",
        "operationId": "getIsochrone",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Distance API"
        ],
        "description": "Find all destinations that can be reached in a specific amount of time or a maximum travel distance\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origin"
          },
          {
            "$ref": "#/components/parameters/distance_value"
          },
          {
            "$ref": "#/components/parameters/distance_mode"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_method"
          }
        ],
        "responses": {
          "200": {
            "description": "Isochrone successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistanceIsochroneResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Distance Isochrone Result for driving 1km by car from origin `48.709,2.403`",
                    "value": {
                      "status": "OK",
                      "isoline": {
                        "origin": {
                          "lat": 48.709,
                          "lng": 2.403
                        },
                        "distance": {
                          "value": 1,
                          "text": "1 km"
                        },
                        "geometry": "s|ihHouuMZ`GdClCsA~QhCnQmBhEpCfF|HxGpBtFfEnBnHqJpH}AF_EeCcB@sBnEiEYiGmVyFaG{G[eFoCw@gAiIkDYg@_DwA@"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/distance/isochrone/json?origin=48.709%2C2.403&value=1&mode=driving&language=en&method=distance&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/distance/isochrone/json?origin=48.709%2C2.403&value=1&mode=driving&language=en&method=distance&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/distance/isochrone/json?origin=48.709%2C2.403&value=1&mode=driving&language=en&method=distance&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/traffic/distancematrix/json": {
      "get": {
        "deprecated": true,
        "summary": "Traffic Distance Matrix",
        "operationId": "getTrafficDistanceMatrix",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Traffic API"
        ],
        "description": "Get distances and durations (including traffic) for a matrix of origins and destinations, based on the recommended routes between start and end points for a specified travel mode.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origins"
          },
          {
            "$ref": "#/components/parameters/distance_destinations"
          },
          {
            "$ref": "#/components/parameters/traffic_routing"
          },
          {
            "$ref": "#/components/parameters/traffic_departure_time"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          }
        ],
        "responses": {
          "200": {
            "description": "Traffic Distance Matrix successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrafficDistanceMatrixResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result (including traffic) for driving from origins `48.709,2.403` to destinations `48.709,2.303|48.768,2.338`,",
                    "value": {
                      "rows": [
                        {
                          "elements": [
                            {
                              "status": "OK",
                              "duration_with_traffic": {
                                "value": 1186,
                                "text": "20 mins"
                              },
                              "distance": {
                                "value": 10577,
                                "text": "10.6 km"
                              }
                            },
                            {
                              "status": "OK",
                              "duration_with_traffic": {
                                "value": 1154,
                                "text": "19 mins"
                              },
                              "distance": {
                                "value": 10198,
                                "text": "10.2 km"
                              }
                            }
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/traffic/distancematrix/json?origins=48.709%2C2.403&destinations=48.709%2C2.303%7C48.768%2C2.338&routing=shortest&language=en&departure_time=now&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/traffic/distancematrix/json?origins=48.709%2C2.403&destinations=48.709%2C2.303%7C48.768%2C2.338&routing=shortest&language=en&departure_time=now&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/traffic/distancematrix/json?origins=48.709%2C2.403&destinations=48.709%2C2.303%7C48.768%2C2.338&routing=shortest&language=en&departure_time=now&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "post": {
        "deprecated": true,
        "summary": "Traffic Distance Matrix using POST",
        "operationId": "postTrafficDistanceMatrix",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Traffic API"
        ],
        "description": "Get distances and durations (including traffic) for a matrix of origins and destinations, based on the recommended routes between start and end points. If the URL size is too short for your origins and destinations, you should request the server using this POST method and passing arguments as json.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body of Traffic Distance Matrix must be formatted as JSON.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrafficDistanceMatrixRequest"
              },
              "examples": {
                "default": {
                  "summary": "Request as a JSON for a distance matrix (including traffic) call",
                  "value": {
                    "origins": "48.73534,2.368308|48.73534,2.368308",
                    "destinations": "48.83534,2.368308",
                    "units": "imperial",
                    "routing": "fastest",
                    "departure_time": "now"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Traffic Distance Matrix with POST successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrafficDistanceMatrixResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Distance Matrix Result (including traffic) for driving from origins `48.73534,2.368308|48.73534,2.368308` to destinations `48.83534,2.368308`,",
                    "value": {
                      "rows": [
                        {
                          "elements": [
                            {
                              "status": "OK",
                              "duration_with_traffic": {
                                "value": 1186,
                                "text": "20 mins"
                              },
                              "distance": {
                                "value": 10577,
                                "text": "10.6 km"
                              }
                            },
                            {
                              "status": "OK",
                              "duration_with_traffic": {
                                "value": 1154,
                                "text": "19 mins"
                              },
                              "distance": {
                                "value": 10198,
                                "text": "10.2 km"
                              }
                            }
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1zones/put/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X POST 'https://api.woosmap.com/traffic/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY' \\\n-H 'content-type: application/json' \\\n--data-raw '{\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"routing\": \"fastest\",\n  \"departure_time\": \"now\"\n}'"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://api.woosmap.com/traffic/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY\"\n\npayload = json.dumps({\n    \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n    \"destinations\": \"48.83534,2.368308\",\n    \"units\": \"imperial\",\n    \"routing\": \"fastest\",\n    \"departure_time\": \"now\"\n})\nheaders = {\n    'content-type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "nodejs",
            "label": "NodeJS",
            "source": "var axios = require('axios');\nvar data = JSON.stringify({\n  \"origins\": \"48.73534,2.368308|48.73534,2.368308\",\n  \"destinations\": \"48.83534,2.368308\",\n  \"units\": \"imperial\",\n  \"routing\": \"fastest\",\n  \"departure_time\": \"now\"\n});\n\nvar config = {\n  method: 'post',\n  url: 'https://api.woosmap.com/traffic/distancematrix/json?private_key=YOUR_PRIVATE_API_KEY',\n  headers: { \n    'content-type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"
          }
        ]
      }
    },
    "/traffic/route/json": {
      "get": {
        "deprecated": true,
        "summary": "Traffic Route",
        "operationId": "getTrafficRoute",
        "servers": [
          {
            "url": "https://api.woosmap.com"
          }
        ],
        "tags": [
          "Traffic API"
        ],
        "description": "Get distance, duration and path (as a polyline) for a pair of origin and destination, based on the recommended route between those two points, while taking traffic into account.\n",
        "security": [
          {
            "PublicApiKeyAuth": [],
            "RefererHeader": []
          },
          {
            "PrivateApiKeyAuth": []
          },
          {
            "PrivateApiKeyHeaderAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/distance_origin"
          },
          {
            "$ref": "#/components/parameters/distance_destination"
          },
          {
            "$ref": "#/components/parameters/traffic_routing"
          },
          {
            "$ref": "#/components/parameters/distance_language"
          },
          {
            "$ref": "#/components/parameters/distance_units"
          },
          {
            "$ref": "#/components/parameters/distance_alternatives"
          },
          {
            "$ref": "#/components/parameters/traffic_waypoints"
          },
          {
            "$ref": "#/components/parameters/traffic_departure_time"
          },
          {
            "$ref": "#/components/parameters/traffic_arrival_time"
          },
          {
            "$ref": "#/components/parameters/traffic_avoid"
          }
        ],
        "responses": {
          "200": {
            "description": "Traffic Route successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrafficDistanceRouteResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Distance Route Result (including traffic) for driving from origin `49.31067,4.14525` to destination `49.31344,4.15293` and retrieving alternatives routes with `departure_time=now`.",
                    "value": {
                      "routes": [
                        {
                          "legs": [
                            {
                              "distance": {
                                "value": 1068.2679083828243,
                                "text": "1.1 km"
                              },
                              "duration_with_traffic": {
                                "value": 96,
                                "text": "2 mins"
                              },
                              "duration_without_traffic": {
                                "value": 86,
                                "text": "1 min"
                              },
                              "start_location": {
                                "lat": 49.310753,
                                "lng": 4.1451221
                              },
                              "end_location": {
                                "lat": 49.313436,
                                "lng": 4.1529229
                              }
                            }
                          ],
                          "overview_polyline": {
                            "points": "e_~kH_rhXkBcDsAwBeAaB]c@a@g@c@g@c@a@[[a@_@YS[Ui@Y]O]K_@Gc@Gi@AcBCg@?_@ESCOMMMMUKYI]Ow@FIFMBI@G@O?IAMCMCKjCsDNShBaCDFDDDBF@F?FABADADIBC@GBM@M?KAKCKCG|@kA`AsA"
                          },
                          "summary": "route_0",
                          "bounds": {
                            "northeast": {
                              "lat": 49.31575,
                              "lng": 4.152923
                            },
                            "southwest": {
                              "lat": 49.310753,
                              "lng": 4.145122
                            }
                          }
                        }
                      ],
                      "status": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1zones/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1zones/get/responses/403"
          },
          "429": {
            "$ref": "#/paths/~1zones/get/responses/429"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -L -X GET 'https://api.woosmap.com/traffic/route/json?origin=49.31067%2C4.14525&destination=49.31344%2C4.15293&routing=shortest&language=en&alternatives=true&departure_time=now&key=YOUR_PUBLIC_API_KEY' \\\n-H 'Referer: http://localhost'"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "var requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://api.woosmap.com/traffic/route/json?origin=49.31067%2C4.14525&destination=49.31344%2C4.15293&routing=shortest&language=en&alternatives=true&departure_time=now&key=YOUR_PUBLIC_API_KEY\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.woosmap.com/traffic/route/json?origin=49.31067%2C4.14525&destination=49.31344%2C4.15293&routing=shortest&language=en&alternatives=true&departure_time=now&key=YOUR_PUBLIC_API_KEY\"\n\npayload={}\nheaders = {\n    'Referer': 'http://localhost'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "address_address": {
        "name": "address",
        "description": "The address of which to find the coordinates for. A partial address is less likely to return the proper coordinates than the complete address.\n",
        "schema": {
          "type": "string"
        },
        "required": false,
        "in": "query",
        "example": "224%20Rue%20de%20Rivoli%2C%20Paris"
      },
      "address_cc_format": {
        "name": "cc_format",
        "description": "To specify the format for the short [country code](https://en.wikipedia.org/wiki/ISO_3166-1) expected to be returned in the address_components field (default is `alpha3`).\n",
        "schema": {
          "type": "string",
          "enum": [
            "alpha2",
            "alpha3"
          ]
        },
        "example": "alpha2",
        "in": "query"
      },
      "address_components": {
        "name": "components",
        "description": "To restrict your results to specific areas. Currently, you can use components to filter over countries. Countries must be passed as three characters string (ISO 3166-1 Alpha 3). Components should be passed as an array of different options which are separated by a `|`.\n",
        "schema": {
          "type": "string"
        },
        "example": "country:CAN|country:BEL",
        "in": "query"
      },
      "address_fields": {
        "name": "fields",
        "description": "Used to limit the returning fields (by default, all fields are return). Available fields are (geometry) (fields should be separated by a `,`). By using this parameter you will limit content of responses to the geometry part. No address component will be returned.\n",
        "schema": {
          "type": "string",
          "enum": [
            "geometry"
          ]
        },
        "in": "query",
        "example": "geometry"
      },
      "address_input": {
        "name": "input",
        "description": "The text string on which to search, for example: \"london\" or \"123 Cross Road\". The Woosmap Address API will return predictions matches based on this string and order the results based on their perceived relevance.\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "London"
      },
      "address_language": {
        "name": "language",
        "description": "The language code, using ISO 639-1 country codes, indicating in which language the results should be returned, if possible. If language is not supplied, the Localities service will use the default language of each country.\n",
        "schema": {
          "type": "string"
        },
        "in": "query",
        "example": "en"
      },
      "address_latlng": {
        "name": "latlng",
        "description": "Geographic coordinates. Should be pass in `lat`,`lng` format.\n",
        "schema": {
          "type": "string"
        },
        "required": false,
        "example": "5.2,-2.3",
        "in": "query"
      },
      "address_limit": {
        "name": "limit",
        "description": "Maximum number of results to be returned (value from 1 to 100, default values for geocode request [20] and for reverse geocode request [1])\n",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        },
        "example": 10,
        "in": "query"
      },
      "address_location": {
        "name": "location",
        "description": "Bias for the results. Should be pass in `lat`,`lng` format.\n",
        "schema": {
          "type": "string"
        },
        "example": "5.2,-2.3",
        "in": "query"
      },
      "address_public_id": {
        "name": "public_id",
        "description": "A textual identifier that uniquely identifies a locality, returned from an [Address Autocomplete](https://developers.woosmap.com/products/address-api/autocomplete/).\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMDA1MTI2"
      },
      "distance_alternatives": {
        "name": "alternatives",
        "in": "query",
        "example": true,
        "schema": {
          "type": "boolean"
        },
        "description": "Specifies if alternative routes should be returned. default is `false`. Depending on the calculated route, alternatives may not be provided.\n`alternatives` and `waypoints` can not be used at the same time.\n"
      },
      "distance_arrival_time": {
        "name": "arrival_time",
        "in": "query",
        "example": "1600799173",
        "schema": {
          "type": "string"
        },
        "description": "By using this parameter, Distance will calculate the duration with traffic Specifies the arrival date/time as a timestamp to base the calculation on (e.g. `1600799173` for the date:`22/09/2020 20:26:13`).\nUse either `arrival_time` or `departure_time`, not both.\n"
      },
      "distance_avoid": {
        "name": "avoid",
        "in": "query",
        "example": "tolls|highways|43.3,3.4;42.1,3.5;41.4,3.6",
        "schema": {
          "type": "string"
        },
        "description": "The list of features that you want to avoid. Valid values are `tolls`, `highways`, `ferries` or polygons coordinates whose vertex latlng are separated by a semicolon. To add multiple polygons, separate them with the `|` character.\n"
      },
      "distance_departure_time": {
        "name": "departure_time",
        "in": "query",
        "example": "1600799173",
        "schema": {
          "type": "string"
        },
        "description": "By using this parameter, Distance will calculate the duration with traffic Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\nUse either `arrival_time` or `departure_time`, not both.\n"
      },
      "distance_destination": {
        "name": "destination",
        "in": "query",
        "example": "48.768,2.338",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The ending point for the route. It should be supplied in the form of latitude/longitude coordinates. Ensure that no space exists between the latitude and longitude values.\n"
      },
      "distance_destinations": {
        "name": "destinations",
        "in": "query",
        "example": "48.709,2.403|48.768,2.338",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "One or more locations to use as the finishing point for calculating travel distance. The options for the destinations parameter are the same as for the origins parameter, described above. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
      },
      "distance_details": {
        "name": "details",
        "in": "query",
        "example": "full",
        "schema": {
          "type": "string",
          "enum": [
            "full",
            "none"
          ]
        },
        "description": "Specifies if maneuver instructions should be returned (roadbook). Valid values are `none` and `full` (default is `none`)\n"
      },
      "distance_elements": {
        "name": "elements",
        "in": "query",
        "example": "duration_distance",
        "schema": {
          "type": "string",
          "enum": [
            "distance",
            "duration",
            "duration_distance"
          ]
        },
        "description": "Specifies element values that will be part of the API response (distance and/or duration). if not specified default is `distance`\n"
      },
      "distance_language": {
        "name": "language",
        "in": "query",
        "example": "en",
        "schema": {
          "type": "string"
        },
        "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or âenâ.\n"
      },
      "distance_method": {
        "name": "method",
        "example": "distance",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "time",
            "distance"
          ]
        },
        "description": "Specifies the method to compute the route between the start point and the end point:\n- `time`: fastest route (default) - `distance`: shortest route\n"
      },
      "distance_mode": {
        "name": "mode",
        "in": "query",
        "example": "driving",
        "schema": {
          "type": "string",
          "enum": [
            "driving",
            "cycling",
            "walking"
          ]
        },
        "description": "Specifies the mode of transport to use when calculating distance\n"
      },
      "distance_origin": {
        "name": "origin",
        "in": "query",
        "example": "48.709,2.403",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The starting point. It should be supplied in the form of latitude/longitude coordinates. Ensure that no space exists between the latitude and longitude values.\n"
      },
      "distance_origins": {
        "name": "origins",
        "in": "query",
        "example": "48.709,2.403",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The starting point for calculating travel distance. You can supply one or more locations separated by the pipe character (|), in the form of latitude/longitude coordinates. They are used unchanged to calculate distance. Ensure that no space exists between the latitude and longitude values. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
      },
      "distance_units": {
        "name": "units",
        "example": "metric",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "imperial",
            "metric"
          ]
        },
        "description": "Specifies the unit system parameter to use when expressing distance as text. Two different units supported:\n  * `metric` (default) returns distances in kilometers and meters\n  * `imperial` returns distances in miles and feet\n"
      },
      "distance_value": {
        "name": "value",
        "in": "query",
        "example": 120,
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 120
        },
        "description": "The value to use for isochrone contour. You can specify time in minutes or distance in kilometers (cf. method parameter). The maximum value that can be specified is 120 (120 minutes : 2 hours or 120 km).\n"
      },
      "distance_waypoints": {
        "name": "waypoints",
        "in": "query",
        "example": "optimize:true|48.850077,3.311124|48.850077,3.411124",
        "schema": {
          "type": "string"
        },
        "description": "A list of points by which the route should pass (route response is divided into legs, one leg corresponding to a route between two waypoints). Waypoints should be separated by | character.\nOptionally, you may pass `optimize:true` as the first argument within the waypoints parameter. This way the provided route is optimized by rearranging the waypoints in a more efficient order based on distance or time according to the method parameter. The route start point and end point order is not changed, their position is considered fixed.\n`alternatives` and `waypoints` can not be used at the same time.\n"
      },
      "geolocation_ip_address": {
        "name": "ip_address",
        "description": "The ip_address you want to geolocate. For **server call with private_key** only. Without this parameter, the API will geolocate the IP Address attached to the raw TCP request.\n",
        "in": "query",
        "example": "75.134.29.90",
        "schema": {
          "type": "string"
        }
      },
      "geolocation_limit": {
        "name": "limit",
        "description": "To limit number of assets retrieved from an IP location.\n",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 300
        },
        "example": 10,
        "in": "query"
      },
      "localities_address": {
        "name": "address",
        "description": "The input string to geocode. Can represent an address, a street, a locality or a postal code. The `address` parameter must be URL encoded.\n",
        "schema": {
          "type": "string"
        },
        "required": false,
        "in": "query",
        "example": "224%20Rue%20de%20Rivoli%2C%20Paris"
      },
      "localities_addresses_per_page": {
        "name": "addresses_per_page",
        "description": "In a few cases, a postal code details may contain addresses (UK postal codes). The address list is paginated. In that case, you can navigate in the address list thanks to the `addresses_per_page` and `page` parameters. Notice: as all the addresses are now automatically returned in the response, the `addresses_per_page` parameter is deprecated and has been turned off on December 31, 2021.\n",
        "schema": {
          "type": "integer"
        },
        "in": "query",
        "deprecated": true,
        "example": 10
      },
      "localities_categories": {
        "name": "categories",
        "description": "The categories of points of interest to return.  Not specifying any category will not filter returned results.  Multiple categories can be passed using the pipe character (`|`) as a separator. For example: `categories=business.shop|medical.pharmacy|bank`.\n",
        "schema": {
          "$ref": "#/components/schemas/LocalitiesNearbyCategory"
        },
        "in": "query",
        "example": "business.food_and_drinks.restaurant"
      },
      "localities_cc_format": {
        "name": "cc_format",
        "description": "To specify the format for the short [country code](https://en.wikipedia.org/wiki/ISO_3166-1) expected to be returned in the address_components field. Default is the format used to specify `components` or `alpha2` if no components are specified.\n",
        "schema": {
          "type": "string",
          "enum": [
            "alpha2",
            "alpha3"
          ]
        },
        "example": "alpha2",
        "in": "query"
      },
      "localities_components": {
        "name": "components",
        "description": "A grouping of places to which you would like to restrict your results. Components can and should be used when applicable to filter over countries and retrieve more accurate results. Countries must be passed as an ISO 3166-1 Alpha-2 or Alpha-3 compatible country code. For example: `components=country:fr` or `components=country:fra` would restrict your results to places within France and `components=country:fr-fr` returns locations only in Metropolitan France. Multiple countries must be passed as multiple `country:XX` filters, with the pipe character (`|`) as a separator. For example: `components=country:gb|country:fr|country:be|country:sp|country:it` would restrict your results to city names or postal codes within the United Kingdom, France, Belgium, Spain and Italy.\n",
        "schema": {
          "type": "string"
        },
        "example": "country:fr|country:es",
        "in": "query"
      },
      "localities_custom_description": {
        "name": "custom_description",
        "description": "This parameter allows to choose the description format for all or some of the suggestion types selected. The custom formats are described as follows (available fields depend on the returned type): `custom_description=type_A:\"{field_1}, {field_2}, [...]\"|type_B:\"{field_1}, {field_2}, [...]\"`\n",
        "schema": {
          "type": "string"
        },
        "required": false,
        "in": "query",
        "example": "locality:\"{name} - {administrative_area_level_0}\"|postal_code:\"{name} ({administrative_area_level_1})\""
      },
      "localities_data": {
        "name": "data",
        "description": "Two values for this parameter: `standard` or `advanced`. By default, if the parameter is not defined, value is set as `standard`. The `advanced` value opens suggestions to worldwide postal codes in addition to postal codes for Western Europe. ***A dedicated option subject to specific billing on your license is needed to use this parameter. Please contact us if you are interested in using this parameter and you do not have subscribed the proper option yet.***\n",
        "schema": {
          "type": "string",
          "enum": [
            "standard",
            "advanced"
          ]
        },
        "in": "query",
        "example": "advanced"
      },
      "localities_extended": {
        "name": "extended",
        "description": "If set, this parameter allows a refined search over locality names that bears the same postal code. By triggering this parameter, integrators will benefit from a search spectrum on the `locality` type that ***includes postal codes***. To avoid confusion, it is recommended not to activate this parameter along with the `postal_code` type which could lead to duplicate locations. Also, the default description returned by the API changes to `name (postal code), admin_1, admin_0`. It is only available for France, Italy, Spain and Belgium.\n",
        "schema": {
          "type": "string",
          "enum": [
            "postal_code"
          ]
        },
        "in": "query",
        "example": "postal_code"
      },
      "localities_fields": {
        "name": "fields",
        "description": "If set, it will limit the content of responses to the specified fields. This parameter can be any combination of `geometry`, `address_components` or `shape` (defaults to `geometry|address_components`).\n",
        "schema": {
          "type": "string",
          "enum": [
            "geometry"
          ]
        },
        "in": "query",
        "example": "geometry"
      },
      "localities_geocode_types": {
        "name": "types",
        "description": "The types of geocoding response to return. Multiple types can be passed using the pipe character (`|`) as a separator. This parameter will be ignored when used with the `latlng` parameter. When running a geocode request with the `address` parameter, it can be used to select the expected type of result.\n  * `locality`: includes locality names (from city to village) and suburbs\n  * `postal_code`: publicly-used postal codes around the world\n  * `address`: addresses\n  * `admin_level`: most commonly used administrative areas\n  * `country`: countries as whole point of interest\n  * `airport`: includes all medium sized to international sized airports\n  * `train_station`: includes all train stations\n  * `metro_station`: includes all metro stations\n  * `shopping`: includes shopping malls (or \"shopping centers\") - *may include private retail brands*\n  * `museum`: includes museums\n  * `tourist_attraction`: includes tourist attractions like the Eiffel tower\n  * `amusement_park`: includes amusement parks like Disneyland Paris\n  * `art_gallery`: includes art galleries\n  * `zoo`: includes zoos\n",
        "schema": {
          "type": "string",
          "default": "locality|postal_code|address"
        },
        "in": "query",
        "example": "locality|admin_level"
      },
      "localities_input": {
        "name": "input",
        "description": "The text string on which to search, for example: \"london\" or \"123 Cross Road\". The Woosmap Localities API will return predictions matches based on this string and order the results based on their perceived relevance.\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "London"
      },
      "localities_language": {
        "name": "language",
        "description": "The language code, using ISO 639-2 Alpha-2 country codes, indicating in which language the results should be returned, if possible. If language is not supplied, first `Accept-Language` of the browser will be used.  If neither the provided `language` or the `Accept-Language` are known, the Localities service uses the international default language (English).  No `language` is necessary for a postal_code request. According to requested language, only parts of the address components might be translated.\n",
        "schema": {
          "type": "string"
        },
        "in": "query",
        "example": "en"
      },
      "localities_latlng": {
        "name": "latlng",
        "description": "The latlng parameter is used for reverse geocoding, itâs required if the `address` parameter is missing.\n",
        "schema": {
          "type": "string"
        },
        "required": false,
        "example": "5.2,-2.3",
        "in": "query"
      },
      "localities_list_sub_buildings": {
        "name": "list_sub_buildings",
        "description": "When latlng parameter is used for reverse geocoding, setting `list_sub_building=true` allows to retrieve all addresses at the same location for a common street number or building. Results may contain an additional key \"sub_buildings\" with \"public_id\" and \"description\" values for every addresses at the same location sharing the same address components.\n",
        "schema": {
          "type": "boolean"
        },
        "required": false,
        "example": true,
        "in": "query"
      },
      "localities_location": {
        "name": "location",
        "description": "This parameter is used to add a bias to the autocomplete feature. The location defines the point around which to retrieve results in priority. It must be specified in the `latitude,longitude` string format.\n",
        "schema": {
          "type": "string"
        },
        "required": false,
        "example": "5.2,-2.3",
        "in": "query"
      },
      "localities_page": {
        "name": "page",
        "description": "In a few cases, a postal code details may contain addresses (UK postal codes). The address list is paginated. In that case, you can navigate in the address list thanks to the `addresses_per_page` and `page` parameters. Notice: as all the addresses are now automatically returned in the response, the `page` parameter is deprecated and has been turned off on December 31, 2021.\n",
        "schema": {
          "type": "integer"
        },
        "in": "query",
        "deprecated": true,
        "example": 1
      },
      "localities_public_id": {
        "name": "public_id",
        "description": "A textual identifier that uniquely identifies a locality, returned from a [Localities Autocomplete](https://developers.woosmap.com/products/localities/autocomplete/).\n",
        "schema": {
          "type": "string"
        },
        "required": true,
        "in": "query",
        "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
      },
      "localities_radius": {
        "name": "radius",
        "description": "This parameter may be used in addition to the `location` parameter to define the distance in meters within which the API will return results in priority. Results outside of the defined area may still be displayed. Default radius if this parameter is not set is 100 000.\n",
        "schema": {
          "type": "integer"
        },
        "in": "query",
        "required": false,
        "example": 200000
      },
      "localities_types": {
        "name": "types",
        "description": "The types of suggestion to return. Multiple types can be passed using the pipe character (`|`) as a separator.\n  * `locality`: includes locality names (from city to village) and suburbs\n  * `postal_code`: publicly-used postal codes around the world\n  * `address`: addresses\n  * `admin_level`: most commonly used administrative areas\n  * `country`: countries as whole point of interest\n  * `airport`: includes all medium sized to international sized airports\n  * `train_station`: includes all train stations\n  * `metro_station`: includes all metro stations\n  * `shopping`: includes shopping malls (or \"shopping centers\") - *may include private retail brands*\n  * `museum`: includes museums\n  * `tourist_attraction`: includes tourist attractions like the Eiffel tower\n  * `amusement_park`: includes amusement parks like Disneyland Paris\n  * `art_gallery`: includes art galleries\n  * `zoo`: includes zoos\n",
        "schema": {
          "type": "string",
          "default": "locality|postal_code"
        },
        "in": "query",
        "example": "locality|airport|admin_level"
      },
      "search_encoded_polyline": {
        "name": "encoded_polyline",
        "description": "Find assets nearby an [encoded polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) and inside a defined radius.\n",
        "schema": {
          "type": "string"
        },
        "example": "_p~iF~ps|U_ulLnnqC_mqNvxq`@",
        "in": "query"
      },
      "search_language": {
        "name": "language",
        "description": "The language code, using ISO 639-2 Alpha-2 country codes, indicating in which language the `localized` name  property should be searched , if present, or else the default `name` property.\n",
        "schema": {
          "type": "string"
        },
        "in": "query",
        "example": "en"
      },
      "search_lat": {
        "name": "lat",
        "description": "Latitude bias for the results. Should be pass with `lng`.\n",
        "schema": {
          "type": "number"
        },
        "example": 5.2,
        "in": "query"
      },
      "search_limit": {
        "name": "limit",
        "description": "If your request returns a high number of assets you should use the `limit` parameters to return only the firsts matching elements (Default is 5, max is 50).\n",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50
        },
        "example": 15,
        "in": "query"
      },
      "search_lng": {
        "name": "lng",
        "description": "Longitude bias for the results. Should be pass with `lat`.\n",
        "schema": {
          "type": "number"
        },
        "example": 3.5,
        "in": "query"
      },
      "search_page": {
        "name": "page",
        "description": "Page number when accessing paginated assets feature collection\n",
        "schema": {
          "type": "integer"
        },
        "example": 2,
        "in": "query"
      },
      "search_query": {
        "name": "query",
        "in": "query",
        "example": "name:'My cool store'|type:'click_and_collect'",
        "schema": {
          "type": "string"
        },
        "description": "Search query combining one or more search clauses. Each search clause is made up of three parts structured as `field` `:` `operator` `value`. , e.g. `name:=\"My cool store\"`\n### Vocabulary\n\n  - **Field**: attribute of the Store that is searched, e.g. the attribute `name` of the store.\n\n  - **Operator**: test that is performed on the data to provide a match, e.g. `=`.\n  Each field has a default operator. If none operator follow the `:`, the default one is used.\n\n  - **Value**: the content of the attribute that is tested, e.g. the name of the store `\"My cool store\"`.\n\nCombine clauses with the conjunctions `AND` or `OR`, and negate the query with `NOT`.\n### Fields\n\n  - `type`: An element is contained within `type` collection. e.g. `type:\"myType\"`\n\n  - `tag`: An element is contained within `tag` collection. e.g. `tag:\"myTag\"`\n\n  - `city`: text matching: the value match the `city` field. e.g. `city:=\"Paris\"`\n\n  - `country`: text matching: the value match the `countryCode` field. e.g. `country:=\"FR\"`\n\n  - `name`: text matching: the value match the `name` field. e.g. `name:=\"myName\"`\n\n  - `idstore`: text matching: the value match the `idstore` field.  e.g. `idstore:=\"myIdStore\"`\n\n  - `user`: concerns all fields inside `user_properties`. text matching or numerical comparison.  e.g. `user.myAttribute:=\"myValue\"`\n\n  - `localized`: used for [localizedNames](https://developers.woosmap.com/products/data-api/data-structure/#localizednames) to search in native language. text matching in collection: the value match one of the the `localizedNames`. e.g. `localized:=\"centro\"`\n\n> **userProperties** field has no restriction regarding the data you can put in it (Arrays, Object, Boolean, String, Numeric...) but you can only query for **text matching or numerical comparison**.\n### Operators\n\n  - `:` : Default and mandatory operator. For `type` and `tag` fields, define that an element is contained within a collection.\n\n  - `=` : The content of a string or a number is equal to the other.\n\n  - `>` : A number is greater than another.\n\n  - `<` : A number is smaller than another.\n\n  - `>=` : A number is greater than or equal to another.\n\n  - `<=` : A number is smaller than or equal to another.\n\n  - `AND` : Return assets that match both clauses.\n\n  - `OR` : Return assets that match either clauses.\n\n  - `NOT` : Negates a search clause.\n\nFor compound clauses, you can use parentheses to group clauses together. For example: ```(type:\"type1\" OR type:\"type2\") AND tag:\"hockey\"```\nYou can use `NOT` operator to negates a search clause. For example: ```not type:\"type1\"```\n"
      },
      "search_radius": {
        "name": "radius",
        "description": "Unit in meters. Used to combine with lat/lng or encoded polyline. To bias the results within a given circular area. 3000 means to search for Assets that are at the most far from 3kms to search area (latlng or polyline).\n",
        "schema": {
          "type": "number"
        },
        "example": 3000,
        "in": "query"
      },
      "search_stores_by_page": {
        "name": "stores_by_page",
        "description": "If your request returns a high number of assets, the result will be paginated. If so, you can request assets by page using `page` and `stores_by_page` parameters (Default is 100, max is 300).\n",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 300
        },
        "example": 150,
        "in": "query"
      },
      "search_zone": {
        "name": "zone",
        "in": "query",
        "example": true,
        "schema": {
          "type": "boolean"
        },
        "description": "returns the stores that are linked to a zone intersecting the provided `lat`,`lng` query parameters.\n"
      },
      "traffic_arrival_time": {
        "name": "arrival_time",
        "in": "query",
        "example": "1600799173",
        "schema": {
          "type": "string"
        },
        "description": "Specifies the arrival date/time as a timestamp to base the calculation on (e.g. `1600799173` for the date:`22/09/2020 20:26:13`).\nUse either `arrival_time` or `departure_time`, not both.\n"
      },
      "traffic_avoid": {
        "name": "avoid",
        "in": "query",
        "example": "tolls",
        "schema": {
          "type": "string",
          "enum": [
            "tolls"
          ]
        },
        "description": "The list of features that you want to avoid. Valid values are `tolls`.\n"
      },
      "traffic_departure_time": {
        "name": "departure_time",
        "in": "query",
        "example": "1600799173",
        "schema": {
          "type": "string"
        },
        "description": "Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\nUse either `arrival_time` or `departure_time`, not both.\n"
      },
      "traffic_routing": {
        "name": "routing",
        "in": "query",
        "example": "fastest",
        "schema": {
          "type": "string",
          "enum": [
            "fastest",
            "shortest"
          ]
        },
        "description": "Specifies what to base the cost calculation on. If not specified default is `fastest`.\n  * `fastest` will include traffic and optimise the route based on the smallest travel time.\n  * `shortest` will optimise based on travel distance.\n"
      },
      "traffic_waypoints": {
        "name": "waypoints",
        "in": "query",
        "example": "48.850077,3.311124|48.850077,3.411124",
        "schema": {
          "type": "string"
        },
        "description": "A list of points by which the route should pass (traffic route response is divided into legs, one leg corresponding to a route between two waypoints). Waypoints should be separated by `|` character.\n  \n`alternatives` and `waypoints` can not be used at the same time.\n"
      },
      "zones_limit": {
        "name": "limit",
        "description": "To limit number of zones retrieved (max 50).\n",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50
        },
        "example": 10,
        "in": "query"
      },
      "zones_offset": {
        "name": "offset",
        "description": "To retrieve zones starting from an offset value.\n",
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "example": 20,
        "in": "query"
      }
    },
    "schemas": {
      "Bounds": {
        "title": "Bounds",
        "type": "object",
        "description": "A rectangle in geographical coordinates from points at the southwest and northeast corners.",
        "properties": {
          "northeast": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "southwest": {
            "$ref": "#/components/schemas/LatLngLiteral"
          }
        },
        "example": {
          "northeast": {
            "lat": 49.315678,
            "lng": 4.15292
          },
          "southwest": {
            "lat": 49.31073,
            "lng": 4.145162
          }
        }
      },
      "LatLngLiteral": {
        "title": "LatLngLiteral",
        "type": "object",
        "description": "An object describing a specific location with Latitude and Longitude in decimal degrees.",
        "required": [
          "lat",
          "lng"
        ],
        "example": {
          "lat": 43.3,
          "lng": 3.46
        },
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude in decimal degrees",
            "example": 42.3
          },
          "lng": {
            "type": "number",
            "description": "Longitude in decimal degrees",
            "example": 3.46
          }
        }
      },
      "LatLngArrayString": {
        "title": "LatLngArrayString",
        "description": "An array of comma separated {latitude,longitude} strings.",
        "example": [
          43.4,
          -2.1
        ],
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": {
          "type": "number"
        }
      },
      "GeoJsonPoint": {
        "title": "GeoJsonPoint",
        "type": "object",
        "description": "GeoJSon Point Geometry",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Point"
            ],
            "description": "the geometry type"
          },
          "coordinates": {
            "$ref": "#/components/schemas/LatLngArrayString"
          }
        },
        "example": {
          "type": "Point",
          "coordinates": [
            -0.14408,
            51.5088
          ]
        }
      },
      "GeoJsonGeometry": {
        "title": "GeoJsonGeometry",
        "type": "object",
        "description": "A GeoJSon Geometry representing the shape of the area, as specified in [RFC7946](https://datatracker.ietf.org/doc/html/rfc7946). \nTo display on the map, simply wrap this object in a feature:\n```json\n{\n  \"type\": \"Feature\",\n  \"geometry\": this_geojson_geometry\n}\n```\n",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Polygon",
              "MultiPoligon"
            ],
            "description": "the geometry type"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoJsonCoords"
            }
          }
        },
        "example": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                2.06984,
                48.77919
              ],
              [
                2.07984,
                48.77919
              ],
              [
                2.07984,
                48.78919
              ],
              [
                2.06984,
                48.78919
              ],
              [
                2.06984,
                48.77919
              ]
            ]
          ]
        }
      },
      "Position": {
        "title": "Position",
        "description": "an array containing longitude, latitude, in that order.",
        "type": "array",
        "items": {
          "type": "number"
        },
        "minItems": 2,
        "maxItems": 2,
        "example": [
          2.06984,
          48.77919
        ]
      },
      "GeoJsonCoords": {
        "title": "GeoJsonCoords",
        "description": "an array containing Positions.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Position"
        },
        "example": [
          [
            2.06984,
            48.77919
          ],
          [
            2.07984,
            48.77919
          ],
          [
            2.07984,
            48.78919
          ],
          [
            2.06984,
            48.78919
          ],
          [
            2.06984,
            48.77919
          ]
        ]
      },
      "Timezone": {
        "title": "Timezone",
        "description": "Timezone for the Opening Hours of an Asset. It is used to compute the `open_now` property of an asset. see <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>",
        "type": "string",
        "example": "Europe/London"
      },
      "FormattedAddress": {
        "title": "FormattedAddress",
        "description": "Contains the readable text description of the result.",
        "type": "string",
        "example": "London, England, United Kingdom"
      },
      "AdministrativeAreaLabel": {
        "title": "AdministrativeAreaLabel",
        "description": "Only available for `admin_level` suggestions, this contains the local english name of the administration level (\"department\" for France or \"federal_state\" for Germany).",
        "type": "string",
        "example": "district"
      },
      "AssetResponse": {
        "title": "AssetResponse",
        "type": "object",
        "description": "Attributes describing an Asset.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AssetName"
          },
          "store_id": {
            "$ref": "#/components/schemas/AssetId"
          },
          "address": {
            "$ref": "#/components/schemas/AssetAddressResponse"
          },
          "contact": {
            "$ref": "#/components/schemas/AssetContact"
          },
          "open": {
            "$ref": "#/components/schemas/AssetOpenResponse"
          },
          "weekly_opening": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningResponse"
          },
          "types": {
            "$ref": "#/components/schemas/AssetTypes"
          },
          "tags": {
            "$ref": "#/components/schemas/AssetTags"
          },
          "last_updated": {
            "type": "string",
            "nullable": true,
            "description": "the previous date timestamp when the asset has been updated",
            "example": "2022-11-08T15:48:08.556803+00:00"
          },
          "user_properties": {
            "description": "Contains all additional information relative to an Asset. If not set it returns null value.",
            "nullable": true,
            "type": "object",
            "additionalProperties": true,
            "example": {
              "some_user_properties": "some_value"
            }
          },
          "opening_hours": {
            "$ref": "#/components/schemas/AssetOpeningHours"
          },
          "distance": {
            "description": "The distance in meters from the geolocated position or searched position if exist",
            "type": "number",
            "example": 544.581
          }
        }
      },
      "AssetFeatureResponse": {
        "title": "AssetFeatureResponse",
        "type": "object",
        "description": "Asset Response as a GeoJSon Feature with Asset properties",
        "properties": {
          "type": {
            "description": "the Geojson Type (only 'Feature')",
            "type": "string",
            "enum": [
              "Feature"
            ]
          },
          "properties": {
            "$ref": "#/components/schemas/AssetResponse"
          },
          "geometry": {
            "$ref": "#/components/schemas/GeoJsonPoint"
          }
        },
        "example": {
          "type": "Feature",
          "properties": {
            "store_id": "10031",
            "name": "Santa Rosa & Yolanda",
            "contact": {
              "phone": "707-527-1006",
              "website": "https://www.starbucks.com/store-locator/store/10031/santa-rosa-yolanda-2688-santa-rosa-ave-santa-rosa-ca-954077625-us"
            },
            "address": {
              "lines": [
                "2688 Santa Rosa Ave",
                "Santa Rosa, CA 95407"
              ],
              "country_code": "US",
              "city": "Santa Rosa",
              "zipcode": "954077625"
            },
            "user_properties": {
              "take_away": "available"
            },
            "tags": [
              "DT",
              "WA",
              "CD",
              "DR",
              "LB",
              "GO",
              "XO",
              "MX",
              "NB",
              "BE",
              "LU"
            ],
            "types": [
              "Coffee shop"
            ],
            "last_updated": "2022-11-10T13:26:55.066524+00:00",
            "open": {
              "open_now": true,
              "open_hours": [
                {
                  "end": "20:00",
                  "start": "05:00"
                }
              ],
              "week_day": 3,
              "current_slice": {
                "end": "20:00",
                "start": "05:00"
              }
            },
            "weekly_opening": {
              "1": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "2": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "3": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "4": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "5": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "6": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "7": {
                "hours": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "isSpecial": false
              },
              "timezone": "America/Los_Angeles"
            },
            "opening_hours": {
              "usual": {
                "1": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "2": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "3": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "4": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "5": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "6": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ],
                "7": [
                  {
                    "end": "20:00",
                    "start": "05:00"
                  }
                ]
              },
              "special": {},
              "timezone": "America/Los_Angeles"
            }
          },
          "geometry": {
            "type": "Point",
            "coordinates": [
              -122.712924,
              38.41244
            ]
          }
        }
      },
      "AssetFeatureCollectionResponse": {
        "title": "AssetFeatureCollectionResponse",
        "type": "object",
        "description": "Assets Collection Response as a GeoJSon FeatureCollection with Asset properties",
        "properties": {
          "type": {
            "description": "the Geojson Type (only 'FeatureCollection')",
            "type": "string",
            "enum": [
              "FeatureCollection"
            ]
          },
          "features": {
            "description": "the Assets Features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetFeatureResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "example": {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "properties": {
                "store_id": "2354",
                "name": "Berkeley Street/Berkeley Square",
                "contact": {
                  "phone": "02076295779",
                  "website": "https://www.starbucks.com/store-locator/store/2354/berkeley-street-berkeley-square-27-berkeley-st-berkeley-square-london-eng-w-1-x-5-"
                },
                "address": {
                  "lines": [
                    "27 Berkeley St",
                    "London, ENG W1X 5AD"
                  ],
                  "country_code": "GB",
                  "city": "London",
                  "zipcode": "W1X 5AD"
                },
                "user_properties": {
                  "take_away": "available"
                },
                "tags": [
                  "WA",
                  "WF",
                  "CD",
                  "DR",
                  "XO"
                ],
                "types": [
                  "Coffee shop"
                ],
                "last_updated": "2022-11-10T13:23:53.564829+00:00",
                "distance": 135.28682936,
                "open": {
                  "open_now": true,
                  "open_hours": [
                    {
                      "end": "18:00",
                      "start": "06:30"
                    }
                  ],
                  "week_day": 3,
                  "current_slice": {
                    "end": "18:00",
                    "start": "06:30"
                  }
                },
                "weekly_opening": {
                  "1": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "2": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "3": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "4": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "5": {
                    "hours": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "isSpecial": false
                  },
                  "6": {
                    "hours": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ],
                    "isSpecial": false
                  },
                  "7": {
                    "hours": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ],
                    "isSpecial": false
                  },
                  "timezone": "Europe/London"
                },
                "opening_hours": {
                  "usual": {
                    "1": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "2": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "3": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "4": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "5": [
                      {
                        "end": "18:00",
                        "start": "06:30"
                      }
                    ],
                    "6": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ],
                    "7": [
                      {
                        "end": "17:00",
                        "start": "08:00"
                      }
                    ]
                  },
                  "special": {},
                  "timezone": "Europe/London"
                }
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  -0.14408,
                  51.5088
                ]
              }
            }
          ],
          "pagination": {
            "page": 1,
            "pageCount": 1
          }
        }
      },
      "AssetAutocompleteResponse": {
        "title": "AssetAutocompleteResponse",
        "type": "object",
        "description": "Asset Autocomplete Response with highlighted results on asset name.",
        "properties": {
          "predictions": {
            "description": "A list of predictions based on similarity in all the `localizedNames` passed in query (or similarity to `store_name` if no `localizedNames` exist)",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "The `name` property of each prediction will be filled with the localized name of your asset in the `language` you provided in your query if it exists, or else the default name property.\n",
                  "type": "string",
                  "example": "Centro Commerciale Deria"
                },
                "highlighted": {
                  "type": "string",
                  "description": "an HTML formatted string with, if it exists, the matched substring(s) in bold font.",
                  "example": "Centro <b>Commercial</b>e Deria"
                },
                "store_id": {
                  "$ref": "#/components/schemas/AssetId"
                },
                "types": {
                  "$ref": "#/components/schemas/AssetTypes"
                },
                "matched_substrings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchedSubstring"
                  }
                }
              }
            }
          }
        },
        "example": {
          "predictions": [
            {
              "store_id": "2670",
              "name": "Sun Street",
              "types": [
                "Coffee shop"
              ],
              "matched_substrings": [
                {
                  "offset": 4,
                  "length": 6
                }
              ],
              "highlighted": "Sun <b>Street</b>"
            },
            {
              "store_id": "16069",
              "name": "7th Street",
              "types": [
                "Coffee shop"
              ],
              "matched_substrings": [
                {
                  "offset": 4,
                  "length": 6
                }
              ],
              "highlighted": "7th <b>Street</b>"
            },
            {
              "store_id": "1013873",
              "name": "The Street",
              "types": [
                "Coffee shop"
              ],
              "matched_substrings": [
                {
                  "offset": 4,
                  "length": 6
                }
              ],
              "highlighted": "The <b>Street</b>"
            }
          ]
        }
      },
      "Pagination": {
        "title": "Pagination",
        "type": "object",
        "description": "Pagination to reach all returned assets. max 300 assets par page.",
        "properties": {
          "page": {
            "type": "integer",
            "description": "the request page",
            "example": 1
          },
          "pageCount": {
            "type": "integer",
            "description": "the number of available pages",
            "example": 10
          }
        }
      },
      "MatchedSubstring": {
        "title": "MatchedSubstring",
        "type": "object",
        "properties": {
          "length": {
            "description": "Length of the matched substring in the prediction result text.",
            "type": "number"
          },
          "offset": {
            "description": "Start location of the matched substring in the prediction result text.",
            "type": "number"
          }
        },
        "example": {
          "offset": 0,
          "length": 4
        }
      },
      "AddressComponents": {
        "title": "AddressComponents",
        "type": "array",
        "description": "An array containing Address Components with additional information",
        "items": {
          "type": "object",
          "description": "The address component object",
          "properties": {
            "long_name": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "The full text description or name of the address component, or a list of names (ie. list of postal codes).",
              "example": "United Kingdom"
            },
            "short_name": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ],
              "description": "An abbreviated textual name for the address component, if available. For example, an address component for the state of United Kingdom may have a `long_name` of `United Kingdom` and a `short_name` of `UK` using the 2-letter postal abbreviation.",
              "example": "UK"
            },
            "types": {
              "description": "An array indicating the type of the address component.",
              "type": "array",
              "items": {
                "type": "string",
                "description": "address component type"
              },
              "example": [
                "country",
                "administrative_area_level_0"
              ]
            }
          },
          "example": {
            "types": [
              "country"
            ],
            "long_name": "United Kingdom",
            "short_name": "GBR"
          }
        },
        "example": [
          {
            "types": [
              "country"
            ],
            "long_name": "United Kingdom",
            "short_name": "GBR"
          },
          {
            "long_name": "London",
            "short_name": "London",
            "types": [
              "locality"
            ]
          }
        ]
      },
      "AddressTypes": {
        "title": "AddressTypes",
        "type": "string",
        "description": "Contains the type of result.",
        "enum": [
          "house_number",
          "route",
          "address_block",
          "locality",
          "admin_level",
          "country"
        ]
      },
      "AddressGeocodeTypes": {
        "title": "AddressGeocodeTypes",
        "type": "string",
        "description": "Contains the type of result.",
        "enum": [
          "house_number",
          "route",
          "address_block",
          "locality",
          "admin_level",
          "country",
          "place"
        ]
      },
      "AddressGeometry": {
        "title": "AddressGeometry",
        "type": "object",
        "description": "The location of the result, in latitude and longitude. Accuracy is also provided.",
        "properties": {
          "location_type": {
            "description": "Specifies additional data about the geocoded location. The following values are currently supported: \n  - `ROOFTOP` result is a precise geocode for which we have location information accurate down to street address precision.\n  - `RANGE_INTERPOLATED` result reflects an approximation (usually on a road) interpolated between two precise points (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n  - `GEOMETRIC_CENTER` result is the geometric center of a result such as a polyline (for example, a street) or polygon (city, region, â¦).\n  - `APPROXIMATE` result is approximate (usually when no other above value applies)\n",
            "type": "string",
            "enum": [
              "ROOFTOP",
              "RANGE_INTERPOLATED",
              "GEOMETRIC_CENTER",
              "APPROXIMATE"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          }
        },
        "example": {
          "location": {
            "lat": 48.829405,
            "lng": 2.367944
          },
          "location_type": "GEOMETRIC_CENTER"
        }
      },
      "Destinations": {
        "title": "Destinations",
        "example": "48.709,2.403|48.768,2.338",
        "type": "string",
        "description": "One or more locations to use as the finishing point for calculating travel distance. The options for the destinations parameter are the same as for the origins parameter, described above. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
      },
      "Origins": {
        "title": "Origins",
        "example": "48.709,2.403",
        "type": "string",
        "description": "The starting point for calculating travel distance. You can supply one or more locations separated by the pipe character, in the form of latitude/longitude coordinates. They are used unchanged to calculate distance. Ensure that no space exists between the latitude and longitude values. In order to reduce URL size, [encoded polylines](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) are also supported using `enc:encoded-polyline:`\n"
      },
      "Units": {
        "title": "Units",
        "example": "metric",
        "type": "string",
        "enum": [
          "imperial",
          "metric"
        ],
        "description": "Specifies the unit system to use when expressing distance as text. Two different units supported:\n  * `metric` (default) returns distances in kilometers and meters\n  * `imperial` returns distances in miles and feet\n"
      },
      "Success": {
        "title": "Success",
        "type": "object",
        "description": "Message returned to a success request",
        "properties": {
          "status": {
            "type": "string",
            "description": "the status of the 200 response",
            "example": "success"
          },
          "value": {
            "description": "The value of request for this 200 response",
            "example": "129 stores",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "Error400": {
        "title": "Error400",
        "type": "object",
        "description": "The request is invalid",
        "properties": {
          "status": {
            "type": "string",
            "description": "the status of the 400 response",
            "example": "error"
          },
          "value": {
            "description": "the value of request causing the Error",
            "example": "The request is invalid, the data is not a valid JSON.",
            "type": "string"
          }
        }
      },
      "Error401": {
        "title": "Error401",
        "type": "object",
        "description": "Authentication credentials are incorrect",
        "properties": {
          "detail": {
            "description": "Details for the credentials error",
            "example": "Incorrect authentication credentials. Please check or use a valid API Key",
            "type": "string"
          }
        }
      },
      "Error403": {
        "title": "Error403",
        "type": "object",
        "description": "API Request is authenticated but API Key don't have permission to access the resources",
        "properties": {
          "detail": {
            "description": "Details for the forbidden error message",
            "example": "This Woosmap API is not enabled for this project.",
            "type": "string"
          }
        }
      },
      "Error429": {
        "title": "Error429",
        "type": "object",
        "description": "Over Query Limit. Check the API Documentation for available QPS.",
        "properties": {
          "detail": {
            "description": "Details for the Over Query Limit error message",
            "example": "The rate limit for this endpoint has been exceeded",
            "type": "string"
          }
        }
      },
      "GeolocationResponse": {
        "title": "GeolocationResponse",
        "type": "object",
        "description": "A successful geolocation request will return a JSON-formatted response defining a location and radius.",
        "properties": {
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          },
          "accuracy": {
            "description": "The accuracy of the estimated location, in meters. This represents the radius of a circle around the given `location` where the IP address is likely to be. If your Geolocation response shows a low value in the `accuracy` field (<=50), the IP has strong chance to be correctly located.",
            "type": "number",
            "example": 5
          },
          "latitude": {
            "description": "Approximate latitude of the geographical area associated with the IP address",
            "type": "number",
            "example": 38.719
          },
          "longitude": {
            "description": "Approximate longitude of the geographical area associated with the IP address",
            "type": "number",
            "example": -77.1067
          },
          "country_code": {
            "description": "ISO 3166-1 Alpha-2 compatible country code",
            "type": "string",
            "nullable": true,
            "example": "US"
          },
          "country_name": {
            "description": "Country name",
            "type": "string",
            "example": "United States"
          },
          "continent": {
            "description": "Continent name",
            "type": "string",
            "example": "North America"
          },
          "region_state": {
            "description": "Region name when available",
            "type": "string",
            "example": "Virginia"
          },
          "city": {
            "description": "City name when available",
            "type": "string",
            "example": "Alexandria"
          },
          "postal_code": {
            "description": "A postal code close to the user's location, when available",
            "type": "string",
            "example": "22309"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          }
        },
        "example": {
          "country_code": "US",
          "country_name": "United States",
          "continent": "North America",
          "latitude": 38.719,
          "longitude": -77.1067,
          "accuracy": 5,
          "viewport": {
            "northeast": {
              "lat": 38.763915764205976,
              "lng": -77.0491321464058
            },
            "southwest": {
              "lat": 38.674084235794034,
              "lng": -77.16426785359421
            }
          },
          "city": "Alexandria",
          "region_state": "Virginia",
          "postal_code": "22309",
          "timezone": "America/New_York"
        }
      },
      "GeolocationStoresResponse": {
        "title": "GeolocationStoresResponse",
        "description": "JSON-formatted response defining a location, radius, and stores if accuracy of geocoded IP is 20km or less.",
        "type": "object",
        "properties": {
          "stores": {
            "$ref": "#/components/schemas/AssetFeatureCollectionResponse"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          },
          "accuracy": {
            "description": "The accuracy of the estimated location, in meters. This represents the radius of a circle around the given `location` where the IP address is likely to be. If your Geolocation response shows a low value in the `accuracy` field (<=50), the IP has strong chance to be correctly located.",
            "type": "number",
            "example": 5
          },
          "latitude": {
            "description": "Approximate latitude of the geographical area associated with the IP address",
            "type": "number",
            "example": 38.719
          },
          "longitude": {
            "description": "Approximate longitude of the geographical area associated with the IP address",
            "type": "number",
            "example": -77.1067
          },
          "country_code": {
            "description": "ISO 3166-1 Alpha-2 compatible country code",
            "type": "string",
            "nullable": true,
            "example": "US"
          },
          "country_name": {
            "description": "Country name",
            "type": "string",
            "example": "United States"
          },
          "continent": {
            "description": "Continent name",
            "type": "string",
            "example": "North America"
          },
          "region_state": {
            "description": "Region name when available",
            "type": "string",
            "example": "Virginia"
          },
          "city": {
            "description": "City name when available",
            "type": "string",
            "example": "Alexandria"
          },
          "postal_code": {
            "description": "A postal code close to the user's location, when available",
            "type": "string",
            "example": "22309"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          }
        },
        "example": {
          "country_code": "US",
          "country_name": "United States",
          "continent": "North America",
          "latitude": 38.719,
          "longitude": -77.1067,
          "accuracy": 5,
          "viewport": {
            "northeast": {
              "lat": 38.763915764205976,
              "lng": -77.0491321464058
            },
            "southwest": {
              "lat": 38.674084235794034,
              "lng": -77.16426785359421
            }
          },
          "city": "Alexandria",
          "region_state": "Virginia",
          "postal_code": "22309",
          "timezone": "America/New_York",
          "stores": {
            "type": "FeatureCollection",
            "features": [
              {
                "type": "Feature",
                "properties": {
                  "store_id": "STORE_ID_123456",
                  "name": "My Cool Store",
                  "contact": {
                    "email": "contact@woosmap.com",
                    "phone": "+44 20 7693 4000",
                    "website": "https://www.woosmap.com"
                  },
                  "address": {
                    "lines": [
                      "Building Centre",
                      "26 Store Street"
                    ],
                    "country_code": "UK",
                    "city": "London",
                    "zipcode": "WC1E 7BT"
                  },
                  "user_properties": {
                    "some_user_properties": "associated user value"
                  },
                  "tags": [
                    "wifi",
                    "covered_parking"
                  ],
                  "types": [
                    "drive",
                    "click_and_collect"
                  ],
                  "last_updated": "2024-03-20T15:14:51.067524+00:00",
                  "distance": 0,
                  "open": {
                    "open_now": true,
                    "open_hours": [
                      {
                        "end": "22:00",
                        "start": "08:30"
                      }
                    ],
                    "week_day": 3,
                    "current_slice": {
                      "end": "22:00",
                      "start": "08:30"
                    }
                  },
                  "weekly_opening": {
                    "1": {
                      "hours": [],
                      "isSpecial": false
                    },
                    "2": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "3": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "4": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "5": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "6": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "7": {
                      "hours": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ],
                      "isSpecial": false
                    },
                    "timezone": "Europe/London"
                  },
                  "opening_hours": {
                    "usual": {
                      "1": [],
                      "default": [
                        {
                          "end": "22:00",
                          "start": "08:30"
                        }
                      ]
                    },
                    "special": {
                      "2015-02-07": [
                        {
                          "end": "23:00",
                          "start": "08:00"
                        }
                      ]
                    },
                    "timezone": "Europe/London"
                  }
                },
                "geometry": {
                  "type": "Point",
                  "coordinates": [
                    -77.1067,
                    38.719
                  ]
                }
              }
            ],
            "pagination": {
              "page": 1,
              "pageCount": 2
            }
          }
        }
      },
      "AssetRequest": {
        "title": "AssetRequest",
        "type": "object",
        "description": "Attributes describing an Asset Request.",
        "required": [
          "location",
          "name",
          "storeId"
        ],
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "name": {
            "$ref": "#/components/schemas/AssetName"
          },
          "storeId": {
            "$ref": "#/components/schemas/AssetId"
          },
          "address": {
            "$ref": "#/components/schemas/AssetAddressRequest"
          },
          "contact": {
            "$ref": "#/components/schemas/AssetContact"
          },
          "types": {
            "$ref": "#/components/schemas/AssetTypes"
          },
          "tags": {
            "$ref": "#/components/schemas/AssetTags"
          },
          "userProperties": {
            "description": "Contains all additional information relative to an Asset. If not set it returns null value.",
            "nullable": true,
            "type": "object",
            "additionalProperties": true,
            "example": {
              "some_user_properties": "some_value"
            }
          },
          "localizedNames": {
            "description": "Alternate names for your assets. These localized names are useful for multi-language integrations. Combined with our Autocomplete API endpoint you can let your users find your store in their native language.",
            "type": "object",
            "example": {
              "ar": "ÙØ±ÙØ² ÙÙÙÙØªØ²Ù Ø§ÙØªØ¬Ø§Ø±Ù",
              "fr": "Centre Commercial Velizy",
              "it": "Centro Commerciale Velizy",
              "gb": "Velizy Shopping Center"
            }
          },
          "openingHours": {
            "$ref": "#/components/schemas/AssetOpeningHours"
          }
        }
      },
      "AssetId": {
        "title": "AssetId",
        "description": "A textual identifier that uniquely identifies an Asset. It must matches the following regexp `[A-Za-z0-9]+`\n",
        "type": "string",
        "example": "STORE_ID_12345"
      },
      "AssetName": {
        "title": "AssetName",
        "description": "The asset's name.",
        "type": "string",
        "example": "My Cool Store"
      },
      "AssetTypes": {
        "title": "AssetTypes",
        "description": "Contains an array of types describing the Asset.",
        "type": "array",
        "items": {
          "type": "string",
          "example": "drive"
        },
        "example": [
          "drive",
          "click_and_collect"
        ]
      },
      "AssetTags": {
        "title": "AssetTags",
        "description": "Contains an array of tags describing the Asset. For example a list of available amenities.",
        "type": "array",
        "items": {
          "type": "string",
          "example": "wifi"
        },
        "example": [
          "wifi",
          "covered_parking"
        ]
      },
      "AssetsCollectionRequest": {
        "title": "AssetsCollectionRequest",
        "description": "A Collection of Woosmap Assets as expected for Data Management Data API.",
        "type": "object",
        "required": [
          "stores"
        ],
        "properties": {
          "stores": {
            "description": "The Assets collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetRequest"
            }
          }
        },
        "example": {
          "stores": [
            {
              "types": [
                "drive",
                "click_and_collect"
              ],
              "tags": [
                "wifi",
                "covered_parking"
              ],
              "location": {
                "lat": 38.719,
                "lng": -77.1067
              },
              "storeId": "STORE_ID_123456",
              "name": "My Cool Store",
              "address": {
                "lines": [
                  "Building Centre",
                  "26 Store Street"
                ],
                "countryCode": "UK",
                "city": "London",
                "zipcode": "WC1E 7BT"
              },
              "contact": {
                "website": "https://www.woosmap.com",
                "phone": "+44 20 7693 4000",
                "email": "contact@woosmap.com"
              },
              "userProperties": {
                "some_user_properties": "associated user value"
              },
              "openingHours": {
                "timezone": "Europe/London",
                "usual": {
                  "1": [],
                  "default": [
                    {
                      "start": "08:30",
                      "end": "22:00"
                    }
                  ]
                },
                "special": {
                  "2015-02-07": [
                    {
                      "start": "08:00",
                      "end": "23:00"
                    }
                  ]
                }
              }
            },
            {
              "types": [
                "drive"
              ],
              "tags": [
                "covered_parking"
              ],
              "location": {
                "lat": 38.5239,
                "lng": -77.0157
              },
              "storeId": "STORE_ID_45678",
              "name": "My Cool Store 2",
              "address": {
                "lines": [
                  "1805-1899",
                  "Orchard St"
                ],
                "countryCode": "US",
                "city": "Alexandria",
                "zipcode": "22309"
              },
              "contact": {
                "website": "https://www.woosmap.com",
                "phone": "+44 20 7693 4000",
                "email": "contact@woosmap.com"
              },
              "userProperties": {
                "some_user_properties": "associated user value"
              },
              "openingHours": {
                "timezone": "America/New_York",
                "usual": {
                  "1": [],
                  "default": [
                    {
                      "start": "08:30",
                      "end": "22:00"
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "AssetAddressRequest": {
        "title": "AssetAddressRequest",
        "type": "object",
        "description": "An object containing the separate components applicable to this address.",
        "properties": {
          "lines": {
            "$ref": "#/components/schemas/AssetAddressLines"
          },
          "countryCode": {
            "description": "An ISO_3166-1 Country Code where the Asset is located (see <https://en.wikipedia.org/wiki/ISO_3166-1> for full list)",
            "type": "string",
            "example": "UK",
            "nullable": true
          },
          "city": {
            "description": "A City where belongs an Asset",
            "type": "string",
            "example": "London"
          },
          "zipcode": {
            "description": "An Zipcode / Postal code of an Asset Address",
            "type": "string",
            "example": "WC1E 7BT"
          }
        },
        "example": {
          "lines": [
            "8 Southwark St"
          ],
          "countryCode": "UK",
          "city": "London",
          "zipcode": "WC1E 7BT"
        }
      },
      "AssetAddressResponse": {
        "title": "AssetAddressResponse",
        "type": "object",
        "description": "An object containing the separate components applicable to this address.",
        "properties": {
          "lines": {
            "$ref": "#/components/schemas/AssetAddressLines"
          },
          "country_code": {
            "description": "An ISO_3166-1 Country Code where the Asset is located (see <https://en.wikipedia.org/wiki/ISO_3166-1> for full list)",
            "type": "string",
            "example": "UK",
            "nullable": true
          },
          "city": {
            "description": "A City where belongs an Asset",
            "type": "string",
            "example": "London"
          },
          "zipcode": {
            "description": "An Zipcode / Postal code of an Asset Address",
            "type": "string",
            "example": "WC1E 7BT"
          }
        },
        "example": {
          "lines": [
            "8 Southwark St"
          ],
          "country_code": "UK",
          "city": "London",
          "zipcode": "SE1 1TL"
        }
      },
      "AssetAddressLines": {
        "title": "AssetAddressLines",
        "description": "An Array for lines of an Asset Address",
        "type": "array",
        "example": [
          "Building Centre",
          "26 Store Street"
        ],
        "items": {
          "type": "string",
          "example": "26 Store Street"
        }
      },
      "AssetContact": {
        "title": "AssetContact",
        "type": "object",
        "description": "An object containing the asset's contact available information.",
        "properties": {
          "website": {
            "description": "The website contact for this Asset, such as a business' homepage.",
            "type": "string",
            "example": "https://www.woosmap.com"
          },
          "phone": {
            "description": "Contains the Asset's phone number in its [local format](https://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers).",
            "type": "string",
            "example": "+44 20 7693 4000"
          },
          "email": {
            "description": "Contains the Asset's email contact.",
            "type": "string",
            "example": "contact@woosmap.com"
          }
        },
        "example": {
          "website": "https://www.woosmap.com",
          "phone": "+44 20 7693 4000",
          "email": "contact@woosmap.com"
        }
      },
      "AssetOpeningHours": {
        "title": "AssetOpeningHours",
        "type": "object",
        "nullable": true,
        "description": "An object describing the opening hours of an Asset.",
        "properties": {
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          },
          "usual": {
            "$ref": "#/components/schemas/AssetOpeningHoursUsual"
          },
          "special": {
            "$ref": "#/components/schemas/AssetOpeningHoursSpecial"
          }
        },
        "example": {
          "timezone": "Europe/London",
          "usual": {
            "1": [],
            "default": [
              {
                "start": "08:30",
                "end": "22:00"
              }
            ]
          },
          "special": {
            "2015-02-07": [
              {
                "start": "08:00",
                "end": "23:00"
              }
            ]
          }
        }
      },
      "AssetOpeningHoursPeriod": {
        "title": "AssetOpeningHoursPeriod",
        "type": "object",
        "description": "The hours for an opening period. To define a slice of time where the asset is open you must define a `start` and `end` keys. `start` and `end` must belong to the same day (crossing midnight may result in open_now being always false.)",
        "example": {
          "start": "08:30",
          "end": "19:30"
        },
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "description": "Contains a time of day in 24-hour hh:mm format for the begin of opening period. Values are in the range 00:00â23:59",
            "type": "string",
            "example": "08:30"
          },
          "end": {
            "description": "Contains a time of day in 24-hour hh:mm format for the end of opening period. Values are in the range 00:00â23:59",
            "type": "string",
            "example": "19:30"
          }
        }
      },
      "AssetOpeningHoursUsual": {
        "title": "AssetOpeningHoursUsual",
        "description": "An object describing the usual opening hours of an Asset.",
        "type": "object",
        "properties": {
          "1": {
            "description": "The opening Hours for Monday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "2": {
            "description": "The opening Hours for Tuesday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "3": {
            "description": "The opening Hours for Wednesday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "4": {
            "description": "The opening Hours for Thursday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "5": {
            "description": "The opening Hours for Friday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "6": {
            "description": "The opening Hours for Saturday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "7": {
            "description": "The opening Hours for Sunday",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "default": {
            "description": "Contains the default opening hours to apply to all week days",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          }
        }
      },
      "AssetOpeningHoursSpecial": {
        "title": "AssetOpeningHoursSpecial",
        "description": "An object describing the special opening hours of an Asset.",
        "type": "object",
        "properties": {
          "2015-02-07": {
            "description": "The format for defining opening and closing hours for a particular day is the same as the usual. Instead of using numeric week day for keys you must use a date YYYY-MM-DD like \"2015-03-08\" (see ISO-8601).\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "2015-02-08": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          }
        }
      },
      "AssetOpenResponse": {
        "title": "AssetOpenResponse",
        "type": "object",
        "description": "The Current opening status for an Asset",
        "properties": {
          "current_slice": {
            "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
          },
          "open_hours": {
            "description": "the opening hours for the day",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "open_now": {
            "description": "Boolean value indicating the status of the opening hours",
            "type": "boolean"
          },
          "next_opening": {
            "description": "the next opening hours period",
            "type": "object",
            "properties": {
              "end": {
                "description": "the hours of next opening",
                "type": "string",
                "example": "17:30"
              },
              "start": {
                "description": "the hours of next closing",
                "type": "string",
                "example": "06:00"
              },
              "day": {
                "type": "string",
                "description": "the day of next opening",
                "example": "2021-11-16"
              }
            }
          },
          "week_day": {
            "description": "the day of the week starting from 1 to 7",
            "type": "integer",
            "minimum": 1,
            "maximum": 7
          }
        },
        "example": {
          "open_now": true,
          "open_hours": [
            {
              "end": "20:00",
              "start": "05:00"
            }
          ],
          "week_day": 1,
          "current_slice": {
            "end": "20:00",
            "start": "05:00"
          }
        }
      },
      "AssetWeeklyOpeningResponse": {
        "title": "AssetWeeklyOpeningResponse",
        "type": "object",
        "description": "The current Weekly Opening taking into account the special hours",
        "properties": {
          "1": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "2": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "3": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "4": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "5": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "6": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "7": {
            "$ref": "#/components/schemas/AssetWeeklyOpeningHoursPeriod"
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          }
        },
        "example": {
          "1": {
            "hours": [],
            "isSpecial": false
          },
          "2": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "3": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "4": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "5": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "6": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "7": {
            "hours": [
              {
                "end": "22:00",
                "start": "08:30"
              }
            ],
            "isSpecial": false
          },
          "timezone": "Europe/London"
        }
      },
      "AssetWeeklyOpeningHoursPeriod": {
        "title": "AssetWeeklyOpeningHoursPeriod",
        "type": "object",
        "description": "The opening Hours for Monday",
        "properties": {
          "hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOpeningHoursPeriod"
            }
          },
          "isSpecial": {
            "type": "boolean",
            "description": "Define if the hours comes from a special opening hours day.",
            "example": false
          }
        },
        "example": {
          "hours": [
            {
              "start": "06:30",
              "end": "18:00"
            }
          ],
          "isSpecial": false
        }
      },
      "LocalitiesAddressSummary": {
        "title": "LocalitiesAddressSummary",
        "type": "object",
        "description": "A short description of an address",
        "required": [
          "public_id",
          "description"
        ],
        "example": {
          "public_id": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9faitia1pNNURnOWYvQmRjMUdweXl5SjdLZUZnPQ==",
          "description": "Flat 1, Radway House, Alfred Road, London, W2 5ER"
        },
        "properties": {
          "public_id": {
            "type": "string",
            "description": "The public_id of the address can be used to gather details on that specific address",
            "example": "Nmp0K1VVUFQ4eFI3S1BuaDZEZVVJVWhYY3A4PV9faitia1pNNURnOWYvQmRjMUdweXl5SjdLZUZnPQ=="
          },
          "description": {
            "type": "string",
            "description": "A human readable description of the address",
            "example": "Flat 1, Radway House, Alfred Road, London, W2 5ER"
          }
        }
      },
      "LocalitiesAddressGeometry": {
        "title": "LocalitiesAddressGeometry",
        "type": "object",
        "description": "The location of the result, in latitude and longitude. Accuracy is also provided.",
        "properties": {
          "location_type": {
            "description": "Specifies additional data about the geocoded location. The following values are currently supported: \n  - `ROOFTOP` result is a precise geocode for which we have location information accurate down to street address precision.\n  - `RANGE_INTERPOLATED` result reflects an approximation (usually on a road) interpolated between two precise points (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n  - `GEOMETRIC_CENTER` result is the geometric center of a result such as a polyline (for example, a street) or polygon (city, region, â¦).\n  - `APPROXIMATE` result is approximate (usually when no other above value applies)\n  - `POSTAL_CODE` Address has inherited from the location of the postal code it is part of (for NYB addresses)\n  - `DISTRICT` Address has inherited from the location of the district it is part of (for NYB addresses)\n",
            "type": "string",
            "enum": [
              "ROOFTOP",
              "RANGE_INTERPOLATED",
              "GEOMETRIC_CENTER",
              "APPROXIMATE",
              "POSTAL_CODE",
              "DISTRICT"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "viewport": {
            "$ref": "#/components/schemas/Bounds"
          },
          "shape": {
            "$ref": "#/components/schemas/GeoJsonGeometry"
          }
        },
        "example": {
          "location": {
            "lat": 48.829405,
            "lng": 2.367944
          },
          "location_type": "GEOMETRIC_CENTER"
        }
      },
      "LocalitiesAutocompleteCollectionResponse": {
        "title": "LocalitiesAutocompleteCollectionResponse",
        "type": "object",
        "description": "Localities Collection Response containing Localities",
        "properties": {
          "localities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesAutocompleteResponse"
            }
          }
        },
        "example": {
          "localities": [
            {
              "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
              "type": "locality",
              "description": "London, City of London, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  },
                  {
                    "offset": 16,
                    "length": 4
                  }
                ]
              }
            },
            {
              "public_id": "m/T2C4YI2LgszkKXrELBC+9dfC8=",
              "type": "locality",
              "description": "Derry/Londonderry, Derry City and Strabane, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "offset": 6,
                    "length": 4
                  }
                ]
              }
            },
            {
              "public_id": "J6eISGMjjvQwPkao8rsByB3aVwM=",
              "type": "locality",
              "description": "London Colney, Hertfordshire, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              }
            },
            {
              "public_id": "52MnrbHVWH21CLWH8VY/YWKhqeM=",
              "type": "locality",
              "description": "London Apprentice, Cornwall, United Kingdom",
              "matched_substrings": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              }
            },
            {
              "public_id": "Js0mQmmeI46X3hiqRj/R4pvb8mQ=",
              "type": "locality",
              "description": "Long Stratton, Norfolk, United Kingdom"
            }
          ]
        }
      },
      "LocalitiesAutocompleteMatchedFields": {
        "title": "LocalitiesAutocompleteMatchedFields",
        "type": "object",
        "description": "Contains a set of substrings in the `description` field that match elements in the `input`. It can be used to highlight those substrings. Each substring is identified by an `offset` and a `length`.`",
        "properties": {
          "description": {
            "description": "match substrings for localities `description`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          }
        }
      },
      "LocalitiesAutocompleteRelated": {
        "title": "LocalitiesAutocompleteRelated",
        "type": "object",
        "description": "Contains a set of related elements to the locality suggestion.",
        "properties": {
          "postal_codes": {
            "description": "Postal codes related to the locality suggestion.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesAutocompleteRelatedItem"
            }
          }
        }
      },
      "LocalitiesAutocompleteRelatedItem": {
        "title": "LocalitiesAutocompleteRelatedItem",
        "type": "object",
        "description": "Contains a set of related elements to the locality suggestion.",
        "properties": {
          "public_id": {
            "type": "string",
            "description": "Public ID of a related Postal Code."
          },
          "description": {
            "type": "string",
            "description": "Formatted description for the related Postal Code."
          }
        }
      },
      "LocalitiesAutocompleteResponse": {
        "title": "LocalitiesAutocompleteResponse",
        "type": "object",
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "properties": {
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID if you need to give us feedbacks on results. This ID is also required to perform Localities Details request.",
            "type": "string",
            "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
          },
          "type": {
            "$ref": "#/components/schemas/LocalitiesTypes"
          },
          "description": {
            "description": "Concatenation of `name`, `admin_1`, `admin_0` to be used as suggestion in drop down list if needed. The description can vary depending on the type requested.",
            "type": "string",
            "example": "20121, Milano, Italy"
          },
          "matched_substrings": {
            "$ref": "#/components/schemas/LocalitiesAutocompleteMatchedFields"
          },
          "related": {
            "$ref": "#/components/schemas/LocalitiesAutocompleteRelated"
          },
          "has_addresses": {
            "description": "On the specific territory of United Kingdom, Localities autocomplete request can return the additional attribute `has_addresses` for a postal code, which indicates if a postal code bears addresses. When `has_addresses` is `true`, it is possible to display a list of the available addresses by requesting `details` with the Localities `public_id`. To get the details of an address you will need to request again `/details` endpoint passing in the dedicated address `public_id`.\n",
            "type": "boolean",
            "example": true
          }
        },
        "example": {
          "public_id": "Ch6qA8cLmvyvEEoFy6nYeFcEdNU=",
          "description": "London, City of London, United Kingdom",
          "type": "locality",
          "matched_substrings": {
            "description": [
              {
                "offset": 0,
                "length": 6
              },
              {
                "offset": 16,
                "length": 6
              }
            ]
          }
        }
      },
      "LocalitiesDetailsPostalCodeResponse": {
        "title": "LocalitiesDetailsPostalCodeResponse",
        "type": "object",
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "properties": {
          "result": {
            "description": "The Root Node for Localities Details",
            "type": "object",
            "properties": {
              "formatted_address": {
                "$ref": "#/components/schemas/FormattedAddress"
              },
              "types": {
                "description": "available localities types",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LocalitiesTypes"
                }
              },
              "administrative_area_label": {
                "$ref": "#/components/schemas/AdministrativeAreaLabel"
              },
              "public_id": {
                "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
                "type": "string",
                "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
              },
              "name": {
                "description": "The postal code name",
                "type": "string",
                "example": "SW1A 0AA"
              },
              "geometry": {
                "description": "The location of the PostalCode, in latitude and longitude, eventually associated with a Viewport and a shape.",
                "type": "object",
                "properties": {
                  "location": {
                    "$ref": "#/components/schemas/LatLngLiteral"
                  },
                  "viewport": {
                    "$ref": "#/components/schemas/Bounds"
                  },
                  "shape": {
                    "$ref": "#/components/schemas/GeoJsonGeometry"
                  }
                },
                "example": {
                  "location": {
                    "lat": 51.49984,
                    "lng": -0.124663
                  }
                }
              },
              "address_components": {
                "$ref": "#/components/schemas/AddressComponents"
              },
              "addresses": {
                "description": "UK Only. List of addresses attached to this Postal Code.",
                "type": "object",
                "properties": {
                  "pagination": {
                    "type": "object",
                    "deprecated": true,
                    "description": "The pagination part of the response is deprecated as all the addresses are now automatically returned in the response. It will be turned off at some point. From now on, the pagination will systematically return `page=1`, `pages_count=1`, `addresses_per_page=total addresses count` and `address_count=total addresses count`.",
                    "properties": {
                      "page": {
                        "type": "integer",
                        "description": "the request page",
                        "deprecated": true
                      },
                      "page_count": {
                        "type": "integer",
                        "description": "the number of available pages",
                        "deprecated": true
                      },
                      "addresses_per_page": {
                        "type": "integer",
                        "description": "the number of available addresses per page",
                        "deprecated": true
                      },
                      "address_count": {
                        "type": "integer",
                        "description": "the number of available addresses",
                        "deprecated": true
                      }
                    }
                  },
                  "list": {
                    "type": "array",
                    "description": "List of addresses",
                    "items": {
                      "$ref": "#/components/schemas/LocalitiesAddressSummary"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "result": {
            "public_id": "QaCU+fBtigK65ztSrqHqUoUDwZw=",
            "types": [
              "postal_code"
            ],
            "formatted_address": "SW1A 0AA, City of London",
            "geometry": {
              "location": {
                "lat": 51.49984,
                "lng": -0.124663
              }
            },
            "name": "SW1A 0AA",
            "address_components": [
              {
                "short_name": "GB",
                "long_name": "United Kingdom",
                "types": [
                  "country",
                  "administrative_area_level_0"
                ]
              },
              {
                "short_name": "City of London",
                "long_name": "City of London",
                "types": [
                  "administrative_area_level_1"
                ]
              }
            ],
            "addresses": {
              "pagination": {
                "page": 1,
                "page_count": 1,
                "addresses_per_page": 1,
                "address_count": 1
              },
              "list": [
                {
                  "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ==",
                  "description": "House Of Commons, Houses Of Parliament, London, SW1A 0AA"
                }
              ]
            }
          }
        }
      },
      "LocalitiesStatus": {
        "title": "LocalitiesStatus",
        "type": "string",
        "description": "This optional field is only available for UK addresses referenced as not yey built by Royal Mail. Only one value yet.",
        "enum": [
          "not_yet_built"
        ]
      },
      "LocalitiesTypes": {
        "title": "LocalitiesTypes",
        "type": "string",
        "description": "Contains the type of the localities suggestion.",
        "enum": [
          "locality",
          "postal_code",
          "admin_level",
          "airport",
          "train_station",
          "metro_station",
          "shopping",
          "museum",
          "zoo",
          "amusement_park",
          "art_gallery",
          "tourist_attraction",
          "country",
          "address",
          "route"
        ]
      },
      "LocalitiesGeocodeTypes": {
        "title": "LocalitiesGeocodeTypes",
        "type": "string",
        "description": "Contains the type of the geocoded suggestion.",
        "enum": [
          "locality",
          "postal_code",
          "route",
          "address"
        ]
      },
      "LocalitiesDetailsAddressResponse": {
        "title": "LocalitiesDetailsAddressResponse",
        "type": "object",
        "description": "Attributes describing. Not all attributes will be available for all locality types.",
        "properties": {
          "result": {
            "description": "The Root Node for Localities Details",
            "type": "object",
            "properties": {
              "formatted_address": {
                "$ref": "#/components/schemas/FormattedAddress"
              },
              "types": {
                "description": "available localities types",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LocalitiesTypes"
                }
              },
              "public_id": {
                "description": "Contains a unique ID for the response. Please use this ID to give feedbacks on results.",
                "type": "string",
                "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
              },
              "geometry": {
                "description": "The location of the result, in latitude and longitude, eventually associated with a Viewport. Accuracy is also provided for locality of type Address.",
                "type": "object",
                "properties": {
                  "location": {
                    "$ref": "#/components/schemas/LatLngLiteral"
                  },
                  "viewport": {
                    "$ref": "#/components/schemas/Bounds"
                  },
                  "accuracy": {
                    "type": "string",
                    "description": "This accuracy represents the type of address returned - `DISTRICT` and `POSTAL_CODE` are for UK only.",
                    "enum": [
                      "ROOFTOP",
                      "ROUTE",
                      "DISTRICT",
                      "POSTAL_CODE"
                    ]
                  }
                },
                "example": {
                  "location": {
                    "lat": 51.4998415,
                    "lng": -0.1246375
                  },
                  "accuracy": "ROOFTOP"
                }
              },
              "status": {
                "$ref": "#/components/schemas/LocalitiesStatus"
              },
              "address_components": {
                "$ref": "#/components/schemas/AddressComponents"
              }
            }
          }
        },
        "example": {
          "result": {
            "public_id": "TVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPV9fTVZaV0JmR1pRbkFRbjlKdEU5Q0paamdlQjRRPQ==",
            "types": [
              "address"
            ],
            "formatted_address": "House Of Commons, Houses Of Parliament, London, SW1A 0AA",
            "geometry": {
              "location": {
                "lat": 51.4998415,
                "lng": -0.1246375
              },
              "accuracy": "ROOFTOP"
            },
            "address_components": [
              {
                "short_name": "GB",
                "long_name": "United Kingdom",
                "types": [
                  "country",
                  "administrative_area_level_0"
                ]
              },
              {
                "short_name": "City of London",
                "long_name": "City of London",
                "types": [
                  "administrative_area_level_1"
                ]
              },
              {
                "short_name": "City of London",
                "long_name": "City of London",
                "types": [
                  "county"
                ]
              },
              {
                "short_name": "London SW",
                "long_name": "London SW",
                "types": [
                  "district"
                ]
              },
              {
                "short_name": "London",
                "long_name": "London",
                "types": [
                  "locality"
                ]
              },
              {
                "short_name": "SW1A 0AA",
                "long_name": "SW1A 0AA",
                "types": [
                  "postal_codes"
                ]
              },
              {
                "short_name": "Houses Of Parliament",
                "long_name": "Houses Of Parliament",
                "types": [
                  "premise"
                ]
              },
              {
                "short_name": "House Of Commons",
                "long_name": "House Of Commons",
                "types": [
                  "organisation"
                ]
              }
            ]
          }
        }
      },
      "LocalitiesGeocodeCollectionResponse": {
        "title": "LocalitiesGeocodeCollectionResponse",
        "type": "object",
        "description": "Localities Geocode Collection Response. Contains one or more detailed Localities or Addresses in FR or in the UK, with coordinates (default to one result for reverse geocoding)",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesGeocodeResponse"
            }
          }
        },
        "example": {
          "results": [
            {
              "public_id": "MCtGVFlkLzFNc2lCU3hMQUtxKy9GaXl5K3VNPV9f",
              "types": [
                "route"
              ],
              "formatted_address": "Place Jeanne D'Arc, 75013, Paris",
              "geometry": {
                "location": {
                  "lat": 48.829941,
                  "lng": 2.369083
                },
                "location_type": "GEOMETRIC_CENTER"
              },
              "address_components": [
                {
                  "short_name": "FR",
                  "long_name": "France",
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ]
                },
                {
                  "short_name": "Ãle-de-France",
                  "long_name": "Ãle-de-France",
                  "types": [
                    "state"
                  ]
                },
                {
                  "short_name": "Paris",
                  "long_name": "Paris",
                  "types": [
                    "county"
                  ]
                },
                {
                  "short_name": "Paris",
                  "long_name": "Paris",
                  "types": [
                    "locality"
                  ]
                },
                {
                  "short_name": "75013",
                  "long_name": "75013",
                  "types": [
                    "postal_codes"
                  ]
                },
                {
                  "short_name": "Place Jeanne D'Arc",
                  "long_name": "Place Jeanne D'Arc",
                  "types": [
                    "route"
                  ]
                }
              ]
            }
          ]
        }
      },
      "LocalitiesGeocodeResponse": {
        "title": "LocalitiesGeocodeResponse",
        "type": "object",
        "description": "Attributes describing a locality. Not all attributes will be available for all locality types.",
        "properties": {
          "formatted_address": {
            "$ref": "#/components/schemas/FormattedAddress"
          },
          "types": {
            "description": "An array containing the types of the result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesGeocodeTypes"
            }
          },
          "administrative_area_label": {
            "$ref": "#/components/schemas/AdministrativeAreaLabel"
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. `public_id` will be empty for interpolated locations. Please use this ID to give feedbacks on results.",
            "type": "string",
            "example": "MkvnYy6K6oVGqeqfWJGO/6eCgqo="
          },
          "geometry": {
            "$ref": "#/components/schemas/LocalitiesAddressGeometry"
          },
          "status": {
            "$ref": "#/components/schemas/LocalitiesStatus"
          },
          "address_components": {
            "$ref": "#/components/schemas/AddressComponents"
          },
          "distance": {
            "description": "When reverse geocoding, this field represents the distance (in meter) to the requested latlng",
            "type": "number",
            "example": 5.234
          },
          "sub_buildings": {
            "description": "When reverse geocoding with `list_sub_buildings=true`, this field will contain a list of precise addresses that can be found at that location, i.e. all flats within a building.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesAddressSummary"
            }
          },
          "scores_per_components": {
            "description": "For each component (street_name, postal_code, and locality), it indicates the degree of correspondence with the original query. This value ranges from 0 to 1, with 0 indicating no match with the original query, and enables you to assess the quality of the Geocodeâs result.",
            "$ref": "#/components/schemas/LocalitiesScoresPerComponents"
          }
        }
      },
      "LocalitiesScoresPerComponents": {
        "title": "LocalitiesScoresPerComponents",
        "type": "object",
        "properties": {
          "street_name": {
            "description": "Street score",
            "type": "number"
          },
          "postal_code": {
            "description": "Postal code score",
            "type": "number"
          },
          "locality": {
            "description": "Postal code score",
            "type": "number"
          }
        },
        "example": {
          "scores_per_components": {
            "street_name": 0.6153846153846154,
            "postal_code": 0.8,
            "locality": 1
          }
        }
      },
      "LocalitiesNearbyCollectionResponse": {
        "title": "LocalitiesNearbyCollectionResponse",
        "type": "object",
        "description": "Collection of nearby points of interest.",
        "properties": {
          "results": {
            "description": "The array of nearby points of interest.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesNearbyResponse"
            }
          },
          "pagination": {
            "description": "Helps to navigate through paginated results.",
            "type": "object",
            "properties": {
              "next_page": {
                "description": "If more results are available, this will contain the value to pass to the `page` parameter to get the next page",
                "type": "integer",
                "nullable": true
              },
              "previous_page": {
                "description": "If previous results are available, this will contain the value to pass to the `page` parameter to get the previous page",
                "type": "integer",
                "nullable": true
              }
            }
          }
        },
        "example": {
          "results": [
            {
              "public_id": "emXdi2D7RXOpIthsEyKVGBYZVSc=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.finance.bank"
              ],
              "name": "Citibank",
              "geometry": {
                "location": {
                  "lat": 40.7130414767567,
                  "lng": -74.0074818610995
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "95FQZAdnETzbfFTEFVb/oofxJ4U=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.food_and_drinks.restaurant"
              ],
              "name": "Gran Morsi",
              "geometry": {
                "location": {
                  "lat": 40.71432885326513,
                  "lng": -74.00778746528921
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "c5rIR48wx55zG9RmeFYI7yujDwg=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.food_and_drinks.restaurant"
              ],
              "name": "Saffron",
              "geometry": {
                "location": {
                  "lat": 40.714654825479556,
                  "lng": -74.0077106032371
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "eFFoZUgHxyJJNH+Hpm2MbBXPg5Y=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.food_and_drinks.fast_food"
              ],
              "name": "Burger King",
              "geometry": {
                "location": {
                  "lat": 40.71619516782573,
                  "lng": -74.00480635760651
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "6GSB3ngwjf3vpdOUnj2TZO2ecOc=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.food_and_drinks.fast_food"
              ],
              "name": "Dunkin'",
              "geometry": {
                "location": {
                  "lat": 40.71471299588757,
                  "lng": -74.00777455715831
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "GjVqQF0y4/8+puILSl4GwcvTpG8=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.shop.grocery"
              ],
              "name": "Barakth & Saiful",
              "geometry": {
                "location": {
                  "lat": 40.71499001778744,
                  "lng": -74.00766701734061
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "FAs4bm8/XWAzeqIfWy3c5vNNuJM=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.food_and_drinks.cafe"
              ],
              "name": "Hungry Ghost",
              "geometry": {
                "location": {
                  "lat": 40.71527793616147,
                  "lng": -74.00745294353355
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "eev6v7sxhhbvAagkbC5NAKqzGV8=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.shop.grocery"
              ],
              "name": "Mr. Exotix",
              "geometry": {
                "location": {
                  "lat": 40.71523761920719,
                  "lng": -74.00749141646912
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "VDUWUBQS+dBD6NJyMqfEondAEZE=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.shop.grocery"
              ],
              "name": "Civic Deli",
              "geometry": {
                "location": {
                  "lat": 40.71606784671653,
                  "lng": -74.00377261748812
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            },
            {
              "public_id": "X8aAA+6/fLGaHeZkbc6EiqzOVR8=",
              "types": [
                "point_of_interest"
              ],
              "categories": [
                "business.shop.grocery"
              ],
              "name": "Tribeca Deli Grill",
              "geometry": {
                "location": {
                  "lat": 40.7149423247584,
                  "lng": -74.00771462655064
                }
              },
              "address_components": [
                {
                  "types": [
                    "country",
                    "administrative_area_level_0"
                  ],
                  "long_name": "United States",
                  "short_name": "us"
                }
              ]
            }
          ],
          "pagination": {
            "previous_page": 2,
            "next_page": 4
          }
        }
      },
      "LocalitiesNearbyResponse": {
        "title": "LocalitiesNearbyResponse",
        "type": "object",
        "description": "Attributes describing a point of interest.",
        "properties": {
          "types": {
            "description": "An array containing the types of the result.",
            "type": "array",
            "items": {
              "type": "string",
              "description": "type of result.",
              "enum": [
                "point_of_interest"
              ]
            }
          },
          "name": {
            "description": "The name of the result.",
            "type": "string"
          },
          "public_id": {
            "description": "Contains a unique ID for each result. Please use this ID to give feedbacks on results.",
            "type": "string",
            "example": "NOAeiQADqqisOuN3NM7oXlhkROI="
          },
          "geometry": {
            "description": "The location of the result, in latitude and longitude, eventually associated with a Viewport.",
            "type": "object",
            "properties": {
              "location": {
                "$ref": "#/components/schemas/LatLngLiteral"
              },
              "viewport": {
                "$ref": "#/components/schemas/Bounds"
              }
            },
            "example": {
              "location": {
                "lat": 51.4998415,
                "lng": -0.1246375
              }
            }
          },
          "address_components": {
            "$ref": "#/components/schemas/AddressComponents"
          },
          "categories": {
            "description": "An array containing the categories of the result.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalitiesNearbyCategory"
            }
          }
        }
      },
      "LocalitiesNearbyCategory": {
        "title": "LocalitiesNearbyCategory",
        "type": "string",
        "enum": [
          "transit.station",
          "transit.station.airport",
          "transit.station.rail",
          "business",
          "business.cinema",
          "business.theatre",
          "business.nightclub",
          "business.finance",
          "business.finance.bank",
          "business.fuel",
          "business.parking",
          "business.mall",
          "business.food_and_drinks",
          "business.food_and_drinks.bar",
          "business.food_and_drinks.biergarten",
          "business.food_and_drinks.cafe",
          "business.food_and_drinks.fast_food",
          "business.food_and_drinks.pub",
          "business.food_and_drinks.restaurant",
          "business.food_and_drinks.food_court",
          "business.shop",
          "business.shop.mall",
          "business.shop.bakery",
          "business.shop.butcher",
          "business.shop.library",
          "business.shop.grocery",
          "business.shop.sports",
          "business.shop.toys",
          "business.shop.clothes",
          "business.shop.furniture",
          "business.shop.electronics",
          "education",
          "education.school",
          "education.kindergarten",
          "education.university",
          "education.college",
          "education.library",
          "hospitality",
          "hospitality.hotel",
          "hospitality.hostel",
          "hospitality.guest_house",
          "hospitality.bed_and_breakfast",
          "hospitality.motel",
          "medical",
          "medical.hospital",
          "medical.pharmacy",
          "medical.clinic",
          "tourism",
          "tourism.attraction",
          "tourism.attraction.amusement_park",
          "tourism.attraction.zoo",
          "tourism.attraction.aquarium",
          "tourism.monument",
          "tourism.monument.castle",
          "tourism.museum",
          "government",
          "park",
          "place_of_worship",
          "police",
          "post_office",
          "sports"
        ]
      },
      "AddressAutocompleteCollectionResponse": {
        "title": "AddressAutocompleteCollectionResponse",
        "type": "object",
        "description": "Address Collection Response containing Localities",
        "properties": {
          "predictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressAutocompleteResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "example": {
          "predictions": [
            {
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
              "description": "London, England, United Kingdom",
              "matched_substring": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              },
              "type": "locality"
            },
            {
              "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwNDE5Nzgz",
              "description": "Londonderry, Northern Ireland, United Kingdom",
              "matched_substring": {
                "description": [
                  {
                    "offset": 0,
                    "length": 4
                  }
                ]
              },
              "type": "locality"
            }
          ],
          "status": "OK"
        }
      },
      "AddressAutocompleteMatchedFields": {
        "title": "AddressAutocompleteMatchedFields",
        "type": "object",
        "description": "Contains a set of substrings for description. Each substring is identified by an `offset` and a `length`.`",
        "properties": {
          "description": {
            "description": "match substrings for address `description`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedSubstring"
            }
          }
        }
      },
      "AddressAutocompleteResponse": {
        "title": "AddressAutocompleteResponse",
        "type": "object",
        "description": "Attributes describing an Address.",
        "properties": {
          "description": {
            "description": "Address description to be used as suggestion in drop down list if needed.",
            "type": "string",
            "example": "London, England, United Kingdom"
          },
          "public_id": {
            "description": "Contains a unique ID for each suggestion. Please use this ID if you need to give us feedbacks on results. This ID is also required to perform Address Details request.",
            "type": "string",
            "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0"
          },
          "matched_substring": {
            "$ref": "#/components/schemas/AddressAutocompleteMatchedFields"
          },
          "type": {
            "$ref": "#/components/schemas/AddressTypes"
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "example": {
          "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
          "description": "London, England, United Kingdom",
          "matched_substring": {
            "description": [
              {
                "offset": 0,
                "length": 4
              }
            ]
          },
          "type": "locality"
        }
      },
      "AddressDetailsResponse": {
        "title": "AddressDetailsResponse",
        "type": "object",
        "description": "Address Details Response",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          },
          "result": {
            "description": "the root node of address details",
            "type": "object",
            "properties": {
              "formatted_address": {
                "$ref": "#/components/schemas/FormattedAddress"
              },
              "types": {
                "description": "The types of result.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddressTypes"
                }
              },
              "public_id": {
                "description": "Contains a unique ID for each suggestion. Please use this ID to give feedbacks on results.",
                "type": "string",
                "example": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0"
              },
              "address_components": {
                "$ref": "#/components/schemas/AddressComponents"
              },
              "geometry": {
                "$ref": "#/components/schemas/AddressGeometry"
              }
            }
          }
        },
        "example": {
          "result": {
            "formatted_address": "London, England, United Kingdom",
            "types": [
              "locality"
            ],
            "public_id": "aGVyZTpjbTpuYW1lZHBsYWNlOjIwMzM3NDU0",
            "address_components": [
              {
                "types": [
                  "country"
                ],
                "long_name": "United Kingdom",
                "short_name": "GBR"
              },
              {
                "types": [
                  "state"
                ],
                "long_name": "England",
                "short_name": "England"
              },
              {
                "types": [
                  "county"
                ],
                "long_name": "London",
                "short_name": "LDN"
              },
              {
                "long_name": "London",
                "short_name": "London",
                "types": [
                  "locality"
                ]
              },
              {
                "long_name": "SW1A 2",
                "short_name": "SW1A 2",
                "types": [
                  "postal_code"
                ]
              }
            ],
            "geometry": {
              "location_type": "GEOMETRIC_CENTER",
              "location": {
                "lat": 51.50643,
                "lng": -0.12719
              },
              "viewport": {
                "northeast": {
                  "lat": 51.68629,
                  "lng": 0.28206
                },
                "southwest": {
                  "lat": 51.28043,
                  "lng": -0.56316
                }
              }
            }
          },
          "status": "OK"
        }
      },
      "AddressStatus": {
        "title": "AddressStatus",
        "type": "string",
        "example": "OK",
        "description": "Returns more info on if the request was successful or not, valid responses.\n  * `OK` indicates the response contains a valid result.\n  * `INVALID_REQUEST` indicates that the provided request was invalid (e.g. wrong URL syntax).\n  * `REQUEST_DENIED` indicates that the service denied use of the Address API (e.g. wrong API Key, wrong/no referer, â¦).\n  * `UNKNOWN_ERROR` indicates an Address API request could not be processed due to a server error. The request may succeed if you try again.\n",
        "enum": [
          "OK",
          "INVALID_REQUEST",
          "REQUEST_DENIED",
          "UNKNOWN_ERROR"
        ]
      },
      "AddressGeocodeCollectionResponse": {
        "title": "AddressGeocodeCollectionResponse",
        "type": "object",
        "description": "Address Geocode Collection Response. Contains one or more Addresses with coordinates (default to one result for reverse geocoding)",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressGeocodeResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/AddressStatus"
          }
        },
        "example": {
          "results": [
            {
              "formatted_address": "Place de la RÃ©sistance, 75007 Paris, France",
              "types": [
                "route"
              ],
              "address_components": [
                {
                  "types": [
                    "country"
                  ],
                  "long_name": "France",
                  "short_name": "FRA"
                },
                {
                  "types": [
                    "state"
                  ],
                  "long_name": "Ile-de-France",
                  "short_name": "IDF"
                },
                {
                  "types": [
                    "county"
                  ],
                  "long_name": "Paris",
                  "short_name": "Paris"
                },
                {
                  "long_name": "Paris",
                  "short_name": "Paris",
                  "types": [
                    "locality"
                  ]
                },
                {
                  "long_name": "7th Arrondissement",
                  "short_name": "7th Arrondissement",
                  "types": [
                    "district"
                  ]
                },
                {
                  "long_name": "Place de la RÃ©sistance",
                  "short_name": "Place de la RÃ©sistance",
                  "types": [
                    "route"
                  ]
                },
                {
                  "long_name": "75007",
                  "short_name": "75007",
                  "types": [
                    "postal_code"
                  ]
                }
              ],
              "geometry": {
                "location_type": "GEOMETRIC_CENTER",
                "location": {
                  "lat": 48.86228,
                  "lng": 2.30345
                },
                "viewport": {
                  "northeast": {
                    "lat": 48.86231,
                    "lng": 2.30544
                  },
                  "southwest": {
                    "lat": 48.86191,
                    "lng": 2.30147
                  }
                }
              }
            }
          ],
          "status": "OK"
        }
      },
      "AddressGeocodeResponse": {
        "title": "AddressGeocodeResponse",
        "type": "object",
        "description": "Address Geocode Response",
        "properties": {
          "formatted_address": {
            "$ref": "#/components/schemas/FormattedAddress"
          },
          "types": {
            "description": "The types of result. If result type is a `place`, additional types may be returned (`eat_and_drink`, `going_out_entertainment`, `sights_and_museums`, `natural_and_geographical`, `transport`, `accommodations`, `leisure_and_outdoor`, `shopping`, `business_and_services`, `facilities`, `areas_and_buildings`)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressGeocodeTypes"
            }
          },
          "address_components": {
            "$ref": "#/components/schemas/AddressComponents"
          },
          "geometry": {
            "$ref": "#/components/schemas/AddressGeometry"
          }
        }
      },
      "ZonesCollectionRequest": {
        "title": "ZonesCollectionRequest",
        "type": "object",
        "description": "A Collection of Woosmap Zones as expected for Data Management Data API.",
        "required": [
          "zones"
        ],
        "properties": {
          "zones": {
            "description": "The Zones collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          }
        },
        "example": {
          "zones": [
            {
              "zone_id": "ZoneA",
              "description": "Delivery Zone for Store A",
              "store_id": "STORE_ID_123456",
              "polygon": "POLYGON ((-122.496116 37.7648181,-122.4954079 37.751518,-122.4635648 37.7530788,-122.4618481 37.7514501,-122.4601315 37.7521288,-122.4565266 37.7513144,-122.4540375 37.7566755,-122.4528359 37.7583041,-122.4515485 37.7595934,-122.4546384 37.774656,-122.4718903 37.7731635,-122.472577 37.772485,-122.4755811 37.7725529,-122.4791001 37.7723493,-122.4793576 37.7713995,-122.4784993 37.769839,-122.4783276 37.7680071,-122.4774693 37.766718,-122.4772118 37.7652931,-122.496116 37.7648181))",
              "types": [
                "delivery"
              ]
            },
            {
              "zone_id": "ZoneB",
              "description": "Delivery Zone for Store B",
              "store_id": "STORE_ID_123456",
              "polygon": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))",
              "types": [
                "delivery"
              ]
            },
            {
              "zone_id": "ZoneC",
              "description": "Delivery Zone for Store C",
              "store_id": "STORE_ID_45678",
              "polygon": "POLYGON ((-122.4758889 37.7524995,-122.4751594 37.7321718,-122.4688079 37.7299995,-122.4648597 37.7261979,-122.4519851 37.7228035,-122.4483802 37.7215815,-122.4458053 37.726741,-122.4365356 37.7310857,-122.4315574 37.7324433,-122.4246909 37.7312214,-122.4219444 37.731493,-122.423071 37.7511239,-122.4333707 37.7512596,-122.4354306 37.7602172,-122.4515485 37.7595934,-122.4528628 37.7582744,-122.4540375 37.7566755,-122.4565266 37.7513144,-122.4601315 37.7521288,-122.4618481 37.7514501,-122.4635648 37.7530788,-122.4758889 37.7524995))",
              "types": [
                "delivery"
              ]
            }
          ]
        }
      },
      "ZonesCollectionResponse": {
        "title": "ZonesCollectionResponse",
        "type": "object",
        "description": "A Collection of Woosmap Zones retrieved in response to a get zones list.",
        "properties": {
          "zones": {
            "description": "The Zones collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          },
          "status": {
            "type": "string",
            "description": "the status as string",
            "example": "ok"
          }
        },
        "example": {
          "zones": [
            {
              "store_id": "STORE_ID_123456",
              "zone_id": "ZoneB",
              "polygon": "POLYGON ((-122.4546384 37.774656, -122.4515485 37.7595934, -122.4354306 37.7602172, -122.4333707 37.7512596, -122.423071 37.7511239, -122.4242726 37.7687665, -122.4259893 37.7691736, -122.4289075 37.7732444, -122.4306241 37.7850483, -122.4472753 37.7830133, -122.445902 37.7759581, -122.4546384 37.774656))",
              "types": [
                "delivery"
              ],
              "description": "Delivery Zone for Store B"
            },
            {
              "store_id": "STORE_ID_45678",
              "zone_id": "ZoneC",
              "polygon": "POLYGON ((-122.4758889 37.7524995, -122.4751594 37.7321718, -122.4688079 37.7299995, -122.4648597 37.7261979, -122.4519851 37.7228035, -122.4483802 37.7215815, -122.4458053 37.726741, -122.4365356 37.7310857, -122.4315574 37.7324433, -122.4246909 37.7312214, -122.4219444 37.731493, -122.423071 37.7511239, -122.4333707 37.7512596, -122.4354306 37.7602172, -122.4515485 37.7595934, -122.4528628 37.7582744, -122.4540375 37.7566755, -122.4565266 37.7513144, -122.4601315 37.7521288, -122.4618481 37.7514501, -122.4635648 37.7530788, -122.4758889 37.7524995))",
              "types": [
                "delivery"
              ],
              "description": "Delivery Zone for Store C"
            }
          ],
          "status": "ok"
        }
      },
      "Zone": {
        "title": "Zone",
        "type": "object",
        "description": "Attributes describing a Zone.",
        "required": [
          "store_id",
          "zone_id",
          "polygon"
        ],
        "properties": {
          "zone_id": {
            "description": "A textual identifier that uniquely identifies a Zone.",
            "type": "string",
            "example": "ZoneA"
          },
          "description": {
            "type": "string",
            "description": "Textual description of your Zone",
            "example": "Delivery Zone for Store A"
          },
          "store_id": {
            "$ref": "#/components/schemas/AssetId"
          },
          "polygon": {
            "type": "string",
            "description": "Zone geometry polygon as **Well Known Text**. WKT defines how to represent geometry of one object (cf. https://en.wikipedia.org/wiki/Well-known_text). Your zones could be complex and multipart polygons.",
            "example": "POLYGON ((-122.4546384 37.774656,-122.4515485 37.7595934,-122.4354306 37.7602172,-122.4333707 37.7512596,-122.423071 37.7511239,-122.4242726 37.7687665,-122.4259893 37.7691736,-122.4289075 37.7732444,-122.4306241 37.7850483,-122.4472753 37.7830133,-122.445902 37.7759581,-122.4546384 37.774656))"
          },
          "types": {
            "description": "Contains an array of types describing the Zone.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "delivery",
              "san_francisco_west"
            ]
          },
          "status": {
            "type": "string",
            "description": "the status as string",
            "example": "ok"
          }
        },
        "example": {
          "store_id": "STORE_ID_123456",
          "zone_id": "ZoneA",
          "polygon": "POLYGON ((-122.496116 37.7648181, -122.4954079 37.751518, -122.4635648 37.7530788, -122.4618481 37.7514501, -122.4601315 37.7521288, -122.4565266 37.7513144, -122.4540375 37.7566755, -122.4528359 37.7583041, -122.4515485 37.7595934, -122.4546384 37.774656, -122.4718903 37.7731635, -122.472577 37.772485, -122.4755811 37.7725529, -122.4791001 37.7723493, -122.4793576 37.7713995, -122.4784993 37.769839, -122.4783276 37.7680071, -122.4774693 37.766718, -122.4772118 37.7652931, -122.496116 37.7648181))",
          "types": [
            "delivery"
          ],
          "description": "Delivery Zone for Store A",
          "status": "ok"
        }
      },
      "SuccessZones": {
        "title": "SuccessZones",
        "type": "object",
        "description": "Message returned to a success Zones request",
        "properties": {
          "status": {
            "type": "string",
            "description": "the status of the 2OO Zones response",
            "example": "success"
          },
          "message": {
            "description": "message returned with the 2OO Zones request",
            "example": "Zones successfully updated.",
            "type": "string"
          }
        }
      },
      "DistanceLeg": {
        "title": "DistanceLeg",
        "type": "object",
        "description": "Leg in a route",
        "properties": {
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "start_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "end_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "start_waypoint": {
            "type": "integer",
            "description": "The start waypoint order number",
            "example": 1
          },
          "end_waypoint": {
            "type": "integer",
            "description": "The end waypoint order number",
            "example": 2
          },
          "start_address": {
            "type": "string",
            "description": "the starting address of the leg",
            "example": "Chemin de la Tuilerie"
          },
          "end_address": {
            "type": "string",
            "description": "the ending address of the leg",
            "example": "D 8043, E 44"
          },
          "steps": {
            "description": "List of steps constituting the leg. Steps are returned when `details=full` parameter is specified. A step is the most atomic unit of a route, containing a single step describing a specific, single instruction on the journey. The step not only describes the instruction but also contains distance and duration information relating to how this step relates to the following step.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistanceStep"
            }
          }
        },
        "example": {
          "distance": {
            "text": "1 km",
            "value": 1038
          },
          "duration": {
            "text": "1 min",
            "value": 75
          },
          "start_location": {
            "lat": 49.31067,
            "lng": 4.14525
          },
          "end_location": {
            "lat": 49.31344,
            "lng": 4.15293
          },
          "start_waypoint": 0,
          "end_waypoint": 1,
          "end_address": "D 30",
          "start_address": "D 151"
        }
      },
      "DistanceValue": {
        "title": "DistanceValue",
        "description": "The total distance expressed in meters (value) and as text. The textual value uses the unit system specified with the units parameter of the original request.",
        "type": "object",
        "properties": {
          "value": {
            "description": "The distance in meters.",
            "type": "number",
            "example": 2775.1
          },
          "text": {
            "description": "The readable distance using the unit system specified.",
            "type": "string",
            "example": "2.8 km"
          }
        },
        "example": {
          "value": 2775.1,
          "text": "2.8 km"
        }
      },
      "DurationValue": {
        "title": "DurationValue",
        "description": "The total duration to travel this route/leg, expressed in seconds (value) and as text. The textual value gives a structured string for duration in the specified language (if available).",
        "type": "object",
        "properties": {
          "value": {
            "description": "The duration in seconds",
            "type": "number",
            "example": 272.5
          },
          "text": {
            "type": "string",
            "description": "The readable duration value",
            "example": "5 mins"
          }
        },
        "example": {
          "value": 272.5,
          "text": "5 mins"
        }
      },
      "EncodedPolyline": {
        "title": "EncodedPolyline",
        "type": "object",
        "description": "The polyline of the route (encoded with the [poyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)).",
        "properties": {
          "points": {
            "type": "string",
            "description": "The encoded string value for points of the polyline",
            "example": "a_jyHfol@aAfEzGlIfER~JqV_KqLu@pDiHv@bAfEeCfE"
          }
        },
        "example": {
          "points": "a_jyHfol@aAfEzGlIfER~JqV_KqLu@pDiHv@bAfEeCfE"
        }
      },
      "DistanceMatrixElementsResponse": {
        "title": "DistanceMatrixElementsResponse",
        "type": "object",
        "description": "Attributes describing elements of origin and destination returned in distance Matrix response.",
        "properties": {
          "elements": {
            "type": "array",
            "description": "the route element",
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixElementResponse"
            }
          }
        },
        "example": {
          "elements": [
            {
              "status": "OK",
              "duration": {
                "value": 866,
                "text": "14 mins"
              },
              "distance": {
                "value": 10613,
                "text": "10.6 km"
              }
            },
            {
              "status": "OK",
              "duration": {
                "value": 935,
                "text": "16 mins"
              },
              "distance": {
                "value": 10287,
                "text": "10.3 km"
              }
            }
          ]
        }
      },
      "DistanceMatrixElementResponse": {
        "title": "DistanceMatrixElementResponse",
        "type": "object",
        "description": "Attributes describing an element of origin and destination returned in distance Matrix response.",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status returned for Distance Matrix Element Response.\n  - `OK` indicates the response contains a valid result.\n  - `NOT_FOUND` indicates that the origin and/or destination of this pairing could not be matched to the network.\n  - `ZERO_RESULTS` indicates no route could be found between the origin and destination.\n",
            "enum": [
              "OK",
              "NOT_FOUND",
              "ZERO_RESULTS"
            ]
          },
          "duration": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          }
        }
      },
      "DistanceMatrixResponse": {
        "title": "DistanceMatrixResponse",
        "type": "object",
        "description": "Attributes describing an distance Matrix response.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          },
          "rows": {
            "description": "Contains an array of elements for each pair of origin and destination",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistanceMatrixElementsResponse"
            }
          }
        },
        "example": {
          "status": "OK",
          "rows": [
            {
              "elements": [
                {
                  "status": "OK",
                  "duration": {
                    "value": 986,
                    "text": "16 mins"
                  },
                  "distance": {
                    "value": 10797,
                    "text": "10.8 km"
                  }
                },
                {
                  "status": "OK",
                  "duration": {
                    "value": 928,
                    "text": "15 mins"
                  },
                  "distance": {
                    "value": 10334,
                    "text": "10.3 km"
                  }
                }
              ]
            }
          ]
        }
      },
      "DistanceRouteElementsResponse": {
        "title": "DistanceRouteElementsResponse",
        "type": "object",
        "description": "Attributes describing routes from an origin to a destination returned in distance route response.",
        "properties": {
          "overview_polyline": {
            "$ref": "#/components/schemas/EncodedPolyline"
          },
          "bounds": {
            "$ref": "#/components/schemas/Bounds"
          },
          "notice": {
            "type": "string",
            "description": "Some noticeable information about the route",
            "example": "Has toll segments"
          },
          "legs": {
            "type": "array",
            "description": "Legs part of the route response",
            "items": {
              "$ref": "#/components/schemas/DistanceLeg"
            }
          }
        }
      },
      "DistanceRouteResponse": {
        "title": "DistanceRouteResponse",
        "type": "object",
        "description": "Attributes describing a distance route response.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          },
          "routes": {
            "description": "Contains an array of routes from origin to destination (only one if alternatives is not specified)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistanceRouteElementsResponse"
            }
          }
        },
        "example": {
          "status": "OK",
          "routes": [
            {
              "overview_polyline": {
                "points": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?QBIBU?WFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELCJBJAHGFIDMBSASBKDILURa@LWt@eAHQ"
              },
              "bounds": {
                "northeast": {
                  "lat": 49.315678,
                  "lng": 4.15292
                },
                "southwest": {
                  "lat": 49.31073,
                  "lng": 4.145162
                }
              },
              "notice": "",
              "legs": [
                {
                  "distance": {
                    "text": "1 km",
                    "value": 1038
                  },
                  "duration": {
                    "text": "1 min",
                    "value": 75
                  },
                  "start_location": {
                    "lat": 49.31067,
                    "lng": 4.14525
                  },
                  "end_location": {
                    "lat": 49.31344,
                    "lng": 4.15293
                  },
                  "start_waypoint": 0,
                  "end_waypoint": 1,
                  "end_address": "D 30",
                  "start_address": "D 151",
                  "steps": [
                    {
                      "distance": "676 m",
                      "duration": "1 min",
                      "polyline": "a_~kHgrhXu@yAe@y@c@q@e@q@c@o@e@m@y@eAa@g@a@c@Y[UUQQYUQOSOQKSKOKQISIWKSEUEMCQAa@CeA@[E}@EUAOEOGKKIOM[I]Ea@A[?Q",
                      "start_location": {
                        "lat": 49.31073,
                        "lng": 4.145163
                      },
                      "end_location": {
                        "lat": 49.315679,
                        "lng": 4.149621
                      },
                      "travel_mode": "DRIVING",
                      "instructions": {
                        "action": 2,
                        "summary": "Drive northeast on D 151.",
                        "verbal_succint": "Drive northeast. Then Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_before": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_after": "Continue for 700 meters."
                      }
                    },
                    {
                      "distance": "22 m",
                      "duration": "1 min",
                      "polyline": "}}~kHcniXBIBU?W",
                      "start_location": {
                        "lat": 49.315679,
                        "lng": 4.149621
                      },
                      "end_location": {
                        "lat": 49.31563,
                        "lng": 4.149905
                      },
                      "travel_mode": "DRIVING",
                      "instructions": {
                        "action": 26,
                        "summary": "Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_alert": "Enter the roundabout and take the 2nd exit onto D 30.",
                        "verbal_succint": "Enter the roundabout and take the 2nd exit.",
                        "verbal_before": "Enter the roundabout and take the 2nd exit onto D 30."
                      }
                    },
                    {
                      "distance": "198 m",
                      "duration": "1 min",
                      "polyline": "u}~kH{oiXFWDOLUP[P]j@y@^g@`@i@NUNONMJKJIFELC",
                      "start_location": {
                        "lat": 49.31563,
                        "lng": 4.149905
                      },
                      "end_location": {
                        "lat": 49.314292,
                        "lng": 4.151623
                      },
                      "travel_mode": "DRIVING",
                      "instructions": {
                        "action": 27,
                        "summary": "Exit the roundabout onto D 30.",
                        "verbal_succint": "Exit the roundabout.",
                        "verbal_before": "Exit the roundabout onto D 30.",
                        "verbal_after": "Continue for 200 meters."
                      }
                    },
                    {
                      "distance": "46 m",
                      "duration": "1 min",
                      "polyline": "iu~kHsziXJBJAHGFIDMBSAS",
                      "start_location": {
                        "lat": 49.314292,
                        "lng": 4.151623
                      },
                      "end_location": {
                        "lat": 49.314041,
                        "lng": 4.151976
                      },
                      "travel_mode": "DRIVING",
                      "instructions": {
                        "action": 26,
                        "summary": "Enter the roundabout and take the 1st exit onto D 30.",
                        "verbal_alert": "Enter the roundabout and take the 1st exit onto D 30.",
                        "verbal_succint": "Enter the roundabout and take the 1st exit.",
                        "verbal_before": "Enter the roundabout and take the 1st exit onto D 30."
                      }
                    },
                    {
                      "distance": "96 m",
                      "duration": "1 min",
                      "polyline": "ws~kHy|iXBKDILURa@LWt@eAHQ",
                      "start_location": {
                        "lat": 49.314041,
                        "lng": 4.151976
                      },
                      "end_location": {
                        "lat": 49.313434,
                        "lng": 4.152921
                      },
                      "travel_mode": "DRIVING",
                      "instructions": {
                        "action": 27,
                        "summary": "Exit the roundabout onto D 30.",
                        "verbal_succint": "Exit the roundabout. Then, in 100 meters, You will arrive at your destination.",
                        "verbal_before": "Exit the roundabout onto D 30. Then, in 100 meters, You will arrive at your destination.",
                        "verbal_after": "Continue for 100 meters."
                      }
                    },
                    {
                      "distance": "1 m",
                      "duration": "1 min",
                      "polyline": "}o~kHwbjX",
                      "start_location": {
                        "lat": 49.313434,
                        "lng": 4.152921
                      },
                      "end_location": {
                        "lat": 49.313434,
                        "lng": 4.152921
                      },
                      "travel_mode": "DRIVING",
                      "instructions": {
                        "action": 4,
                        "summary": "You have arrived at your destination.",
                        "verbal_alert": "You will arrive at your destination.",
                        "verbal_before": "You have arrived at your destination."
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "DistanceStatus": {
        "title": "DistanceStatus",
        "type": "string",
        "description": "Returns more info on if the request was successful or not.\n  * `OK` indicates the response contains a valid result.\n  * `INVALID_REQUEST` indicates that the provided request was invalid (e.g. wrong URL syntax).\n  * `MAX_ELEMENTS_EXCEEDED` indicates that the product of origins and destinations exceeds the per-query limit (fixed at 200 elts/q).\n  * `MAX_ROUTE_LENGTH_EXCEEDED` indicates that at least one of requested route is too long and the matrix cannot be processed (>500km).\n  * `REQUEST_DENIED` indicates that the service denied use of the Distance API service (e.g. wrong API Key, wrong/no referer, â¦).\n  * `BACKEND_ERROR` indicates a Distance API request could not be processed due to a server error. This may indicate that the origin and/or destination of this pairing could not be matched to the network. The request may or may not succeed if you try again.\n  * `OVER_QUERY_LIMIT` (associated to a 429 status code) indicates that the number of queries per second (QPS) or the number of elements per second (EPS) exceed the [usage limits](https://developers.woosmap.com/products/distance-api/distance-matrix-endpoint/#usage-limits)\n",
        "enum": [
          "OK",
          "INVALID_REQUEST",
          "MAX_ELEMENTS_EXCEEDED",
          "MAX_ROUTE_LENGTH_EXCEEDED",
          "REQUEST_DENIED",
          "BACKEND_ERROR",
          "OVER_QUERY_LIMIT"
        ]
      },
      "DistanceMatrixRequest": {
        "title": "DistanceMatrixRequest",
        "type": "object",
        "description": "Attributes describing a distance Matrix request",
        "required": [
          "origins",
          "destinations"
        ],
        "properties": {
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "destinations": {
            "$ref": "#/components/schemas/Destinations"
          },
          "mode": {
            "example": "driving",
            "type": "string",
            "enum": [
              "driving",
              "cycling",
              "walking"
            ],
            "description": "Specifies the mode of transport to use when calculating distance\n"
          },
          "language": {
            "example": "en",
            "type": "string",
            "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or âenâ.\n"
          },
          "units": {
            "$ref": "#/components/schemas/Units"
          },
          "elements": {
            "example": "duration_distance",
            "type": "string",
            "enum": [
              "distance",
              "duration",
              "duration_distance"
            ],
            "description": "Specifies element values that will be part of the API response (distance and/or duration). if not specified default is `distance`\n"
          },
          "method": {
            "example": "distance",
            "type": "string",
            "enum": [
              "time",
              "distance"
            ],
            "description": "Specifies the method to compute the route between the start point and the end point:\n  - `time`: fastest route (default)\n  - `distance`: shortest route\n"
          },
          "departure_time": {
            "example": "now",
            "type": "string",
            "description": "Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\n"
          }
        },
        "example": {
          "origins": "48.73534,2.368308|48.73534,2.368308",
          "destinations": "48.83534,2.368308",
          "units": "imperial",
          "elements": "duration_distance",
          "method": "distance",
          "departure_time": "now"
        }
      },
      "DistanceIsochroneResponse": {
        "title": "DistanceIsochroneResponse",
        "type": "object",
        "description": "Attributes describing a distance isochrone response.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          },
          "isoline": {
            "description": "Contains the properties of isoline",
            "type": "object",
            "properties": {
              "origin": {
                "$ref": "#/components/schemas/LatLngLiteral"
              },
              "time": {
                "description": "The time of the isochrone (returned as default or when specifying `method=time` in parameters)",
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The time in minutes",
                    "type": "number",
                    "example": 30
                  },
                  "text": {
                    "description": "The readable time in minutes",
                    "type": "string",
                    "example": "30 minutes"
                  }
                }
              },
              "distance": {
                "description": "The distance of the isochrone (returned only if `method=distance` in parameters)",
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The distance in kilometers",
                    "type": "number",
                    "example": 10
                  },
                  "text": {
                    "description": "The readable distance in kilometers",
                    "type": "string",
                    "example": "10 km"
                  }
                }
              },
              "geometry": {
                "type": "string",
                "description": "The polyline of the isoline (encoded with the [poyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)).",
                "example": "a_jyHfol@aAfEzGlIfER~JqV_KqLu@pDiHv@bAfEeCfE"
              }
            }
          }
        },
        "example": {
          "status": "OK",
          "isoline": {
            "origin": {
              "lat": 48.709,
              "lng": 2.403
            },
            "distance": {
              "value": 1,
              "text": "1 km"
            },
            "geometry": "s|ihHouuMZ`GdClCsA~QhCnQmBhEpCfF|HxGpBtFfEnBnHqJpH}AF_EeCcB@sBnEiEYiGmVyFaG{G[eFoCw@gAiIkDYg@_DwA@"
          }
        }
      },
      "DistanceStep": {
        "title": "DistanceStep",
        "type": "object",
        "description": "step in a leg",
        "properties": {
          "distance": {
            "description": "the distance as text covered by this step until the next step.",
            "type": "string",
            "example": "2.8 km"
          },
          "duration": {
            "description": "the typical time as text required to perform the step, until the next step",
            "type": "string",
            "example": "5 minutes"
          },
          "polyline": {
            "type": "string",
            "description": "the polyline representation of the step (encoded with the [poyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)",
            "example": "_igoHa~hYgApBMHOEKO"
          },
          "start_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "end_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "travel_mode": {
            "type": "string",
            "description": "the type of travel mode used",
            "example": "driving"
          },
          "instructions": {
            "$ref": "#/components/schemas/DistanceInstructions"
          }
        },
        "example": {
          "distance": "46 m",
          "duration": "1 min",
          "polyline": "iu~kHsziXJBJAHGFIDMBSAS",
          "start_location": {
            "lat": 49.314292,
            "lng": 4.151623
          },
          "end_location": {
            "lat": 49.314041,
            "lng": 4.151976
          },
          "travel_mode": "DRIVING"
        }
      },
      "DistanceInstructions": {
        "title": "DistanceInstructions",
        "type": "object",
        "description": "Formatted instructions for this leg",
        "properties": {
          "action": {
            "type": "integer",
            "description": "The action to take for the current step (turn left, merge, straight, etc.). See [list of available actions](https://developers.woosmap.com/products/distance-api/route-endpoint/#instructions).",
            "example": 2
          },
          "summary": {
            "type": "string",
            "description": "Written maneuver instruction.",
            "example": "Drive northeast on D 151."
          },
          "verbal_alert": {
            "type": "string",
            "description": "The transition alert instruction will prepare the user for the forthcoming transition.",
            "example": "Enter the roundabout and take the 2nd exit onto D 30."
          },
          "verbal_succint": {
            "type": "string",
            "description": "Text suitable for use as a verbal alert in a navigation application",
            "example": "Drive northeast. Then Enter the roundabout and take the 2nd exit onto D 30."
          },
          "verbal_before": {
            "type": "string",
            "description": "Text suitable for use as a verbal message immediately prior to the maneuver transition",
            "example": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30."
          },
          "verbal_after": {
            "type": "string",
            "description": "Text suitable for use as a verbal message immediately after the maneuver transition",
            "example": "Continue for 700 meters."
          }
        },
        "example": {
          "action": 2,
          "summary": "Drive northeast on D 151.",
          "verbal_alert": "Enter the roundabout and take the 2nd exit onto D 30.",
          "verbal_before": "Drive northeast on D 151. Then Enter the roundabout and take the 2nd exit onto D 30."
        }
      },
      "TrafficDistanceMatrixElementsResponse": {
        "title": "TrafficDistanceMatrixElementsResponse",
        "type": "object",
        "description": "Attributes describing elements of origin and destination returned in Traffic Distance Matrix response.",
        "properties": {
          "elements": {
            "type": "array",
            "description": "the route element",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceMatrixElementResponse"
            }
          }
        },
        "example": {
          "elements": [
            {
              "status": "OK",
              "duration_with_traffic": {
                "value": 1424,
                "text": "24 mins"
              },
              "distance": {
                "value": 10583,
                "text": "10.6 km"
              }
            },
            {
              "status": "OK",
              "duration_with_traffic": {
                "value": 1161,
                "text": "19 mins"
              },
              "distance": {
                "value": 10185,
                "text": "10.2 km"
              }
            }
          ]
        }
      },
      "TrafficDistanceMatrixElementResponse": {
        "title": "TrafficDistanceMatrixElementResponse",
        "type": "object",
        "description": "Attributes describing an element of origin and destination returned in Traffic Distance Matrix response.",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status returned for Distance Matrix Element Response.\n  - `OK` indicates the response contains a valid result.\n  - `NOT_FOUND` indicates that the origin and/or destination of this pairing could not be matched to the network.\n  - `ZERO_RESULTS` indicates no route could be found between the origin and destination.\n",
            "enum": [
              "OK",
              "NOT_FOUND",
              "ZERO_RESULTS"
            ]
          },
          "duration_with_traffic": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          }
        }
      },
      "TrafficDistanceMatrixResponse": {
        "title": "TrafficDistanceMatrixResponse",
        "type": "object",
        "description": "Attributes describing a Traffic Distance Matrix response.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          },
          "rows": {
            "description": "Contains an array of elements for each pair of origin and destination",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceMatrixElementsResponse"
            }
          }
        },
        "example": {
          "rows": [
            {
              "elements": [
                {
                  "status": "OK",
                  "duration_with_traffic": {
                    "value": 1186,
                    "text": "20 mins"
                  },
                  "distance": {
                    "value": 10577,
                    "text": "10.6 km"
                  }
                },
                {
                  "status": "OK",
                  "duration_with_traffic": {
                    "value": 1154,
                    "text": "19 mins"
                  },
                  "distance": {
                    "value": 10198,
                    "text": "10.2 km"
                  }
                }
              ]
            }
          ],
          "status": "OK"
        }
      },
      "TrafficDistanceMatrixRequest": {
        "title": "TrafficDistanceMatrixRequest",
        "type": "object",
        "description": "Attributes describing a Traffic Distance Matrix request",
        "required": [
          "origins",
          "destinations"
        ],
        "properties": {
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "destinations": {
            "$ref": "#/components/schemas/Destinations"
          },
          "routing": {
            "example": "fastest",
            "type": "string",
            "enum": [
              "fastest",
              "shortest"
            ],
            "description": "Specifies what to base the cost calculation on. If not specified default is `fastest`.\n  * `fastest` will include traffic and optimise the route based on the smallest travel time.\n  * `shortest` will optimise based on travel distance.\n"
          },
          "departure_time": {
            "type": "string",
            "example": "1600799173",
            "description": "Specifies the date/time at which to base the calculations on for traffic purposes. Valid values are a timestamp (e.g. `1600799173` for the date:`22/09/2020 20:26:13`) or `now`.\n"
          },
          "language": {
            "example": "en",
            "type": "string",
            "description": "The language code, indicating in which language the results should be returned, if possible. If language is not supplied, the Distance API service will use the navigator language or âenâ.\n"
          },
          "units": {
            "$ref": "#/components/schemas/Units"
          }
        },
        "example": {
          "origins": "48.73534,2.368308|48.73534,2.368308",
          "destinations": "48.83534,2.368308",
          "units": "imperial",
          "routing": "fastest",
          "departure_time": "now"
        }
      },
      "TrafficDistanceRouteElementsResponse": {
        "title": "TrafficDistanceRouteElementsResponse",
        "type": "object",
        "description": "Attributes describing routes from an origin to a destination returned in traffic distance route response.",
        "properties": {
          "overview_polyline": {
            "$ref": "#/components/schemas/EncodedPolyline"
          },
          "bounds": {
            "$ref": "#/components/schemas/Bounds"
          },
          "summary": {
            "type": "string",
            "description": "A short name for the route.",
            "example": "Route from A to Z"
          },
          "legs": {
            "type": "array",
            "description": "Legs part of the route response",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceLeg"
            }
          }
        }
      },
      "TrafficDistanceRouteResponse": {
        "title": "TrafficDistanceRouteResponse",
        "type": "object",
        "description": "Attributes describing a traffic distance route response.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DistanceStatus"
          },
          "routes": {
            "description": "Contains an array of routes from origin to destination (only one if alternatives is not specified)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrafficDistanceRouteElementsResponse"
            }
          }
        },
        "example": {
          "routes": [
            {
              "legs": [
                {
                  "distance": {
                    "value": 1068.2679083828243,
                    "text": "1.1 km"
                  },
                  "duration_with_traffic": {
                    "value": 96,
                    "text": "2 mins"
                  },
                  "duration_without_traffic": {
                    "value": 86,
                    "text": "1 min"
                  },
                  "start_location": {
                    "lat": 49.310753,
                    "lng": 4.1451221
                  },
                  "end_location": {
                    "lat": 49.313436,
                    "lng": 4.1529229
                  }
                }
              ],
              "overview_polyline": {
                "points": "e_~kH_rhXkBcDsAwBeAaB]c@a@g@c@g@c@a@[[a@_@YS[Ui@Y]O]K_@Gc@Gi@AcBCg@?_@ESCOMMMMUKYI]Ow@FIFMBI@G@O?IAMCMCKjCsDNShBaCDFDDDBF@F?FABADADIBC@GBM@M?KAKCKCG|@kA`AsA"
              },
              "summary": "route_0",
              "bounds": {
                "northeast": {
                  "lat": 49.31575,
                  "lng": 4.152923
                },
                "southwest": {
                  "lat": 49.310753,
                  "lng": 4.145122
                }
              }
            }
          ],
          "status": "OK"
        }
      },
      "TrafficDistanceLeg": {
        "title": "TrafficDistanceLeg",
        "type": "object",
        "description": "Leg in a route",
        "properties": {
          "distance": {
            "$ref": "#/components/schemas/DistanceValue"
          },
          "duration_with_traffic": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "duration_without_traffic": {
            "$ref": "#/components/schemas/DurationValue"
          },
          "start_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          },
          "end_location": {
            "$ref": "#/components/schemas/LatLngLiteral"
          }
        },
        "example": {
          "distance": {
            "value": 1073.570921248021,
            "text": "1.1 km"
          },
          "duration_with_traffic": {
            "value": 100,
            "text": "2 mins"
          },
          "duration_without_traffic": {
            "value": 88,
            "text": "1 min"
          },
          "start_location": {
            "lat": 49.310753,
            "lng": 4.1451221
          },
          "end_location": {
            "lat": 49.3134,
            "lng": 4.15297
          }
        }
      },
      "BoundsResponse": {
        "title": "BoundsResponse",
        "type": "object",
        "description": "Message returned to a success Search Bounds request",
        "properties": {
          "bounds": {
            "description": "The bounds object",
            "type": "object",
            "properties": {
              "west": {
                "description": "The west longitude of bounds",
                "type": "number",
                "example": -0.14408
              },
              "south": {
                "description": "The south latitude of bounds",
                "type": "number",
                "example": -51.5088
              },
              "east": {
                "description": "The east longitude of bounds",
                "type": "number",
                "example": -0.14408
              },
              "north": {
                "description": "The north latitude of bounds",
                "type": "number",
                "example": 51.5088
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "PrivateApiKeyAuth": {
        "description": "A Private key generated specifically to authenticate API requests on server side. Required for Data management API. See how to [register a Private API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-private-api-key).",
        "type": "apiKey",
        "in": "query",
        "name": "private_key"
      },
      "PublicApiKeyAuth": {
        "description": "A Public key generated specifically to authenticate API requests on the front side. See how to [register a Public API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-public-api-key).",
        "type": "apiKey",
        "in": "query",
        "name": "key"
      },
      "RefererHeader": {
        "description": "The Referer HTTP request header is mandatory when using PublicApiKeyAuth. In browser environment, the Referer is set by the browser itself and cannot be overridden.",
        "type": "apiKey",
        "in": "header",
        "name": "Referer"
      },
      "PrivateApiKeyHeaderAuth": {
        "description": "A Private key to authenticate API requests through the Header instead of Query parameter. Use either PrivateApiKeyHeaderAuth or PrivateApiKeyAuth. See how to [register a Private API Key](https://developers.woosmap.com/support/api-keys/#registering-a-woosmap-private-api-key).",
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      }
    }
  },
  "security": [
    {
      "PublicApiKeyAuth": [],
      "RefererHeader": []
    },
    {
      "PrivateApiKeyAuth": []
    },
    {
      "PrivateApiKeyHeaderAuth": []
    }
  ],
  "tags": [
    {
      "name": "Store Search API",
      "description": "Stores Search API lets you query the Assets which are returned as a [GeoJson](https://geojson.org/). Request is done over HTTPS using GET. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/). If your request returns a high number of assets, the result will be paginated. If so, you can request assets by page using `page` and `stores_by_page` parameters (Default is **100**, max is **300**).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/search-api/get-started/"
      }
    },
    {
      "name": "Data Management API",
      "description": "The Data Management API is a web service that uses an HTTP request to manage, create or edit your Assets. The API only supports JSON. So you have to create a JSON file with your assetsâ addresses and other information. Youâll need to convert, or geocode, the addresses in your file to latitude/longitude (`lat` / `long`) coordinates. Those coordinates will be used for most of Woosmap features like [local searches](https://developers.woosmap.com/products/search-api/get-started/), [stores nearby a user location](https://developers.woosmap.com/products/geolocation-api/stores/) or for displaying markers on a map with [Woosmap Javascript API](https://developers.woosmap.com/products/js-api/get-started/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/data-api/get-started/"
      }
    },
    {
      "name": "Geolocation API",
      "description": "Geolocation API returns a location (or nearby stores) and accuracy radius based on an IP address. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/geolocation-api/location/"
      }
    },
    {
      "name": "Localities API",
      "description": "Woosmap Localities API is a web service that returns a great amount of geographical places in response to an HTTP request. Among others are city names, postal codes, suburbs, addresses or airports. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/localities/get-started/"
      }
    },
    {
      "name": "Address API",
      "description": "Woosmap Address API is a web service that returns addresses and other geographical places in response to an HTTP request. Request is done over HTTPS using GET. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n>**â ï¸ This API has been deprecated in favour of Localities API**\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/address-api/get-started/"
      }
    },
    {
      "name": "Distance API",
      "description": "Woosmap Distance API is a service providing road travel distance and duration calculations, on a Worldwide scale. Request is done over HTTPS using GET or POST. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/distance-api/get-started/"
      }
    },
    {
      "name": "Traffic API",
      "description": "Woosmap Traffic API (Early Access) is a service that provides travel distances and durations with traffic, on a Worldwide scale. Compared to the Woosmap Distance API, this API uses traffic information when returning duration times.  Request is done over HTTPS using GET or POST. Response is formatted as JSON. You must specify a key in your request, included as the value of a `key` parameter for your public key or `private_key` for your private key. This key identifies your application for purposes of quota management. Learn how to [get a key](https://developers.woosmap.com/support/api-keys/).  \n>**â ï¸ This API has been deprecated in favour of Distance API**\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/traffic-api/get-started/"
      }
    },
    {
      "name": "Zones API",
      "description": "Woosmap Zones API is a web service that uses an HTTP request to manage, create or edit your Zones (polygons) attached to your assets.\nThe general principle is that sometimes searching assets using crowfly distance is not good enough. For example to search the restaurant that will do the delivery for a specified address, each restaurant has a delivery zone and for topological or business reasons itâs not always the nearest restaurant in charge of your delivery. Woosmap Zones API allows you to associate a delivery zone to each of the restaurants.\n",
      "externalDocs": {
        "url": "https://developers.woosmap.com/products/data-api/zones/"
      }
    }
  ]
}